
STM32H750-DK_BSP_Touch_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009408  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009c10  08009c10  0000ac10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009c14  08009c14  0000ac14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000058  24000000  08009c18  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001774  24000058  08009c70  0000b058  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240017cc  08009c70  0000b7cc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021b41  00000000  00000000  0000b086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000462f  00000000  00000000  0002cbc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001cd8  00000000  00000000  000311f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001651  00000000  00000000  00032ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000952c  00000000  00000000  00034521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002676b  00000000  00000000  0003da4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00191a83  00000000  00000000  000641b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001f5c3b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000079e0  00000000  00000000  001f5c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000d1  00000000  00000000  001fd660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000058 	.word	0x24000058
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009688 	.word	0x08009688

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400005c 	.word	0x2400005c
 80002d4:	08009688 	.word	0x08009688

080002d8 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d103      	bne.n	80002f0 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 80002e8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	e02c      	b.n	800034a <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	685a      	ldr	r2, [r3, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	891a      	ldrh	r2, [r3, #8]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	68da      	ldr	r2, [r3, #12]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	691a      	ldr	r2, [r3, #16]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	695a      	ldr	r2, [r3, #20]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a0c      	ldr	r2, [pc, #48]	@ (8000354 <FT5336_RegisterBusIO+0x7c>)
 8000324:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a0b      	ldr	r2, [pc, #44]	@ (8000358 <FT5336_RegisterBusIO+0x80>)
 800032a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d004      	beq.n	8000344 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4798      	blx	r3
 8000340:	60f8      	str	r0, [r7, #12]
 8000342:	e002      	b.n	800034a <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8000344:	f04f 33ff 	mov.w	r3, #4294967295
 8000348:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800034a:	68fb      	ldr	r3, [r7, #12]
}
 800034c:	4618      	mov	r0, r3
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	08000751 	.word	0x08000751
 8000358:	08000785 	.word	0x08000785

0800035c <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	2201      	movs	r2, #1
 800036a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	2201      	movs	r2, #1
 8000370:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2205      	movs	r2, #5
 8000376:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800037e:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000386:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8000388:	2300      	movs	r3, #0
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b084      	sub	sp, #16
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d10d      	bne.n	80003c8 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f000 f987 	bl	80006c6 <FT5336_DisableIT>
 80003b8:	4602      	mov	r2, r0
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	4413      	add	r3, r2
 80003be:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2201      	movs	r2, #1
 80003c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d002      	beq.n	80003d4 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 80003ce:	f04f 33ff 	mov.w	r3, #4294967295
 80003d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80003d4:	68fb      	ldr	r3, [r7, #12]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d103      	bne.n	80003fc <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 80003fc:	68fb      	ldr	r3, [r7, #12]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b084      	sub	sp, #16
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f103 0218 	add.w	r2, r3, #24
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	b2db      	uxtb	r3, r3
 8000420:	4619      	mov	r1, r3
 8000422:	4610      	mov	r0, r2
 8000424:	f000 fa25 	bl	8000872 <ft5336_radian_value>
 8000428:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f103 0218 	add.w	r2, r3, #24
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4619      	mov	r1, r3
 8000438:	4610      	mov	r0, r2
 800043a:	f000 fa2b 	bl	8000894 <ft5336_offset_left_right>
 800043e:	4602      	mov	r2, r0
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	4413      	add	r3, r2
 8000444:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	f103 0218 	add.w	r2, r3, #24
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	4619      	mov	r1, r3
 8000454:	4610      	mov	r0, r2
 8000456:	f000 fa2e 	bl	80008b6 <ft5336_offset_up_down>
 800045a:	4602      	mov	r2, r0
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	4413      	add	r3, r2
 8000460:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	f103 0218 	add.w	r2, r3, #24
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4619      	mov	r1, r3
 8000470:	4610      	mov	r0, r2
 8000472:	f000 fa31 	bl	80008d8 <ft5336_disatnce_left_right>
 8000476:	4602      	mov	r2, r0
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	4413      	add	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f103 0218 	add.w	r2, r3, #24
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4619      	mov	r1, r3
 800048c:	4610      	mov	r0, r2
 800048e:	f000 fa34 	bl	80008fa <ft5336_distance_up_down>
 8000492:	4602      	mov	r2, r0
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4413      	add	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f103 0218 	add.w	r2, r3, #24
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4619      	mov	r1, r3
 80004a8:	4610      	mov	r0, r2
 80004aa:	f000 fa37 	bl	800091c <ft5336_distance_zoom>
 80004ae:	4602      	mov	r2, r0
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	4413      	add	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d002      	beq.n	80004c2 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 80004bc:	f04f 33ff 	mov.w	r3, #4294967295
 80004c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80004c2:	68fb      	ldr	r3, [r7, #12]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3318      	adds	r3, #24
 80004da:	6839      	ldr	r1, [r7, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fa3f 	bl	8000960 <ft5336_chip_id>
 80004e2:	4603      	mov	r3, r0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f000 f908 	bl	8000710 <FT5336_DetectTouch>
 8000500:	4603      	mov	r3, r0
 8000502:	461a      	mov	r2, r3
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f103 0018 	add.w	r0, r3, #24
 800050e:	f107 0208 	add.w	r2, r7, #8
 8000512:	2304      	movs	r3, #4
 8000514:	2103      	movs	r1, #3
 8000516:	f000 f94f 	bl	80007b8 <ft5336_read_reg>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d003      	beq.n	8000528 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e00f      	b.n	8000548 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8000528:	7a3b      	ldrb	r3, [r7, #8]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000530:	7a7a      	ldrb	r2, [r7, #9]
 8000532:	431a      	orrs	r2, r3
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8000538:	7abb      	ldrb	r3, [r7, #10]
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000540:	7afa      	ldrb	r2, [r7, #11]
 8000542:	431a      	orrs	r2, r3
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b08c      	sub	sp, #48	@ 0x30
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800055c:	2300      	movs	r3, #0
 800055e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 f8d5 	bl	8000710 <FT5336_DetectTouch>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f103 0018 	add.w	r0, r3, #24
 8000574:	f107 0208 	add.w	r2, r7, #8
 8000578:	231e      	movs	r3, #30
 800057a:	2103      	movs	r1, #3
 800057c:	f000 f91c 	bl	80007b8 <ft5336_read_reg>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d003      	beq.n	800058e <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800058c:	e077      	b.n	800067e <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800058e:	2300      	movs	r3, #0
 8000590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000592:	e071      	b.n	8000678 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8000594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000596:	4613      	mov	r3, r2
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	4413      	add	r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	3330      	adds	r3, #48	@ 0x30
 80005a0:	443b      	add	r3, r7
 80005a2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80005a6:	021b      	lsls	r3, r3, #8
 80005a8:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 80005ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005ae:	4613      	mov	r3, r2
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	3301      	adds	r3, #1
 80005b8:	3330      	adds	r3, #48	@ 0x30
 80005ba:	443b      	add	r3, r7
 80005bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80005c0:	ea41 0203 	orr.w	r2, r1, r3
 80005c4:	6839      	ldr	r1, [r7, #0]
 80005c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	440b      	add	r3, r1
 80005cc:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80005ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	3302      	adds	r3, #2
 80005da:	3330      	adds	r3, #48	@ 0x30
 80005dc:	443b      	add	r3, r7
 80005de:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 80005e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005ea:	4613      	mov	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	3303      	adds	r3, #3
 80005f4:	3330      	adds	r3, #48	@ 0x30
 80005f6:	443b      	add	r3, r7
 80005f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80005fc:	4319      	orrs	r1, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000602:	3206      	adds	r2, #6
 8000604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8000608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800060a:	4613      	mov	r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	4413      	add	r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	3330      	adds	r3, #48	@ 0x30
 8000614:	443b      	add	r3, r7
 8000616:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800061a:	099b      	lsrs	r3, r3, #6
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4619      	mov	r1, r3
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000624:	3210      	adds	r2, #16
 8000626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800062a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	3304      	adds	r3, #4
 8000636:	3330      	adds	r3, #48	@ 0x30
 8000638:	443b      	add	r3, r7
 800063a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800063e:	4619      	mov	r1, r3
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000644:	330a      	adds	r3, #10
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	4413      	add	r3, r2
 800064a:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800064c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	3305      	adds	r3, #5
 8000658:	3330      	adds	r3, #48	@ 0x30
 800065a:	443b      	add	r3, r7
 800065c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	b2db      	uxtb	r3, r3
 8000664:	4619      	mov	r1, r3
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800066a:	3314      	adds	r3, #20
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8000672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000674:	3301      	adds	r3, #1
 8000676:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800067a:	2b04      	cmp	r3, #4
 800067c:	d98a      	bls.n	8000594 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800067e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000680:	4618      	mov	r0, r3
 8000682:	3730      	adds	r7, #48	@ 0x30
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3318      	adds	r3, #24
 8000696:	6839      	ldr	r1, [r7, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f8bb 	bl	8000814 <ft5336_gest_id>
 800069e:	4603      	mov	r3, r0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3318      	adds	r3, #24
 80006b4:	2101      	movs	r1, #1
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f941 	bl	800093e <ft5336_g_mode>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3318      	adds	r3, #24
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f932 	bl	800093e <ft5336_g_mode>
 80006da:	4603      	mov	r3, r0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3318      	adds	r3, #24
 800071c:	f107 020b 	add.w	r2, r7, #11
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f886 	bl	8000834 <ft5336_td_status>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	e007      	b.n	8000746 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8000736:	7afb      	ldrb	r3, [r7, #11]
 8000738:	2b05      	cmp	r3, #5
 800073a:	d902      	bls.n	8000742 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e001      	b.n	8000746 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b087      	sub	sp, #28
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	461a      	mov	r2, r3
 800075c:	460b      	mov	r3, r1
 800075e:	72fb      	strb	r3, [r7, #11]
 8000760:	4613      	mov	r3, r2
 8000762:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	691c      	ldr	r4, [r3, #16]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	8918      	ldrh	r0, [r3, #8]
 8000770:	7afb      	ldrb	r3, [r7, #11]
 8000772:	b299      	uxth	r1, r3
 8000774:	893b      	ldrh	r3, [r7, #8]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	47a0      	blx	r4
 800077a:	4603      	mov	r3, r0
}
 800077c:	4618      	mov	r0, r3
 800077e:	371c      	adds	r7, #28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd90      	pop	{r4, r7, pc}

08000784 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	461a      	mov	r2, r3
 8000790:	460b      	mov	r3, r1
 8000792:	72fb      	strb	r3, [r7, #11]
 8000794:	4613      	mov	r3, r2
 8000796:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	68dc      	ldr	r4, [r3, #12]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	8918      	ldrh	r0, [r3, #8]
 80007a4:	7afb      	ldrb	r3, [r7, #11]
 80007a6:	b299      	uxth	r1, r3
 80007a8:	893b      	ldrh	r3, [r7, #8]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	47a0      	blx	r4
 80007ae:	4603      	mov	r3, r0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	371c      	adds	r7, #28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd90      	pop	{r4, r7, pc}

080007b8 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	461a      	mov	r2, r3
 80007c4:	460b      	mov	r3, r1
 80007c6:	72fb      	strb	r3, [r7, #11]
 80007c8:	4613      	mov	r3, r2
 80007ca:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	685c      	ldr	r4, [r3, #4]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	6898      	ldr	r0, [r3, #8]
 80007d4:	893b      	ldrh	r3, [r7, #8]
 80007d6:	7af9      	ldrb	r1, [r7, #11]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	47a0      	blx	r4
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd90      	pop	{r4, r7, pc}

080007e6 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80007e6:	b590      	push	{r4, r7, lr}
 80007e8:	b085      	sub	sp, #20
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	461a      	mov	r2, r3
 80007f2:	460b      	mov	r3, r1
 80007f4:	72fb      	strb	r3, [r7, #11]
 80007f6:	4613      	mov	r3, r2
 80007f8:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681c      	ldr	r4, [r3, #0]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6898      	ldr	r0, [r3, #8]
 8000802:	893b      	ldrh	r3, [r7, #8]
 8000804:	7af9      	ldrb	r1, [r7, #11]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	47a0      	blx	r4
 800080a:	4603      	mov	r3, r0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bd90      	pop	{r4, r7, pc}

08000814 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800081e:	2301      	movs	r3, #1
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	2101      	movs	r1, #1
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ffc7 	bl	80007b8 <ft5336_read_reg>
 800082a:	4603      	mov	r3, r0
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800083e:	2301      	movs	r3, #1
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	2102      	movs	r1, #2
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ffb7 	bl	80007b8 <ft5336_read_reg>
 800084a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d10a      	bne.n	8000868 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	b2da      	uxtb	r2, r3
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000868:	68fb      	ldr	r3, [r7, #12]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	460b      	mov	r3, r1
 800087c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800087e:	1cfa      	adds	r2, r7, #3
 8000880:	2301      	movs	r3, #1
 8000882:	2191      	movs	r1, #145	@ 0x91
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ffae 	bl	80007e6 <ft5336_write_reg>
 800088a:	4603      	mov	r3, r0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 80008a0:	1cfa      	adds	r2, r7, #3
 80008a2:	2301      	movs	r3, #1
 80008a4:	2192      	movs	r1, #146	@ 0x92
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ff9d 	bl	80007e6 <ft5336_write_reg>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	460b      	mov	r3, r1
 80008c0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 80008c2:	1cfa      	adds	r2, r7, #3
 80008c4:	2301      	movs	r3, #1
 80008c6:	2193      	movs	r1, #147	@ 0x93
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff8c 	bl	80007e6 <ft5336_write_reg>
 80008ce:	4603      	mov	r3, r0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 80008e4:	1cfa      	adds	r2, r7, #3
 80008e6:	2301      	movs	r3, #1
 80008e8:	2194      	movs	r1, #148	@ 0x94
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ff7b 	bl	80007e6 <ft5336_write_reg>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	460b      	mov	r3, r1
 8000904:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8000906:	1cfa      	adds	r2, r7, #3
 8000908:	2301      	movs	r3, #1
 800090a:	2195      	movs	r1, #149	@ 0x95
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff6a 	bl	80007e6 <ft5336_write_reg>
 8000912:	4603      	mov	r3, r0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8000928:	1cfa      	adds	r2, r7, #3
 800092a:	2301      	movs	r3, #1
 800092c:	2196      	movs	r1, #150	@ 0x96
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ff59 	bl	80007e6 <ft5336_write_reg>
 8000934:	4603      	mov	r3, r0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	460b      	mov	r3, r1
 8000948:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800094a:	1cfa      	adds	r2, r7, #3
 800094c:	2301      	movs	r3, #1
 800094e:	21a4      	movs	r1, #164	@ 0xa4
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff48 	bl	80007e6 <ft5336_write_reg>
 8000956:	4603      	mov	r3, r0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800096a:	2301      	movs	r3, #1
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	21a8      	movs	r1, #168	@ 0xa8
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff21 	bl	80007b8 <ft5336_read_reg>
 8000976:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d107      	bne.n	800098e <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f832 	bl	8000a18 <MT48LC4M32B2_ClockEnable>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d128      	bne.n	8000a0c <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 f8e2 	bl	8000b84 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f84a 	bl	8000a60 <MT48LC4M32B2_Precharge>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d11c      	bne.n	8000a0c <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	6819      	ldr	r1, [r3, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	461a      	mov	r2, r3
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f897 	bl	8000b10 <MT48LC4M32B2_RefreshMode>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d111      	bne.n	8000a0c <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 80009e8:	6839      	ldr	r1, [r7, #0]
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 f85c 	bl	8000aa8 <MT48LC4M32B2_ModeRegConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10a      	bne.n	8000a0c <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	4619      	mov	r1, r3
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f8ad 	bl	8000b5c <MT48LC4M32B2_RefreshRate>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d101      	bne.n	8000a0c <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MT48LC4M32B2_ClockEnable+0x44>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000a28:	4a0c      	ldr	r2, [pc, #48]	@ (8000a5c <MT48LC4M32B2_ClockEnable+0x44>)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <MT48LC4M32B2_ClockEnable+0x44>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MT48LC4M32B2_ClockEnable+0x44>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000a3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a3e:	4907      	ldr	r1, [pc, #28]	@ (8000a5c <MT48LC4M32B2_ClockEnable+0x44>)
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f008 f875 	bl	8008b30 <HAL_SDRAM_SendCommand>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d002      	beq.n	8000a52 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	e000      	b.n	8000a54 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000a52:	2300      	movs	r3, #0
  }
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	24000074 	.word	0x24000074

08000a60 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MT48LC4M32B2_Precharge+0x44>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000a70:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <MT48LC4M32B2_Precharge+0x44>)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <MT48LC4M32B2_Precharge+0x44>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MT48LC4M32B2_Precharge+0x44>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000a82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a86:	4907      	ldr	r1, [pc, #28]	@ (8000aa4 <MT48LC4M32B2_Precharge+0x44>)
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f008 f851 	bl	8008b30 <HAL_SDRAM_SendCommand>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	e000      	b.n	8000a9c <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000a9a:	2300      	movs	r3, #0
  }
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000074 	.word	0x24000074

08000aa8 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000aba:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000ac0:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000ac6:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a0c      	ldr	r2, [pc, #48]	@ (8000b0c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000adc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000ae4:	4a09      	ldr	r2, [pc, #36]	@ (8000b0c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aee:	4907      	ldr	r1, [pc, #28]	@ (8000b0c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f008 f81d 	bl	8008b30 <HAL_SDRAM_SendCommand>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	e000      	b.n	8000b04 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000b02:	2300      	movs	r3, #0
  }
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24000074 	.word	0x24000074

08000b10 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <MT48LC4M32B2_RefreshMode+0x48>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000b22:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <MT48LC4M32B2_RefreshMode+0x48>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MT48LC4M32B2_RefreshMode+0x48>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <MT48LC4M32B2_RefreshMode+0x48>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000b34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b38:	4907      	ldr	r1, [pc, #28]	@ (8000b58 <MT48LC4M32B2_RefreshMode+0x48>)
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f007 fff8 	bl	8008b30 <HAL_SDRAM_SendCommand>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e000      	b.n	8000b4e <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000b4c:	2300      	movs	r3, #0
  }
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	24000074 	.word	0x24000074

08000b5c <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000b66:	6839      	ldr	r1, [r7, #0]
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f008 f816 	bl	8008b9a <HAL_SDRAM_ProgramRefreshRate>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
 8000b78:	e000      	b.n	8000b7c <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000b7a:	2300      	movs	r3, #0
  }
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000b8c:	f003 fa5a 	bl	8004044 <HAL_GetTick>
 8000b90:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000b92:	bf00      	nop
 8000b94:	f003 fa56 	bl	8004044 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8f7      	bhi.n	8000b94 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7)
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8000bb4:	f000 f8b0 	bl	8000d18 <CPU_CACHE_Enable>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8000bb8:	f003 f9f4 	bl	8003fa4 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8000bbc:	f000 f80e 	bl	8000bdc <SystemClock_Config>


  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f001 fb58 	bl	8002278 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000bc8:	4803      	ldr	r0, [pc, #12]	@ (8000bd8 <main+0x28>)
 8000bca:	f000 f913 	bl	8000df4 <UTIL_LCD_SetFuncDriver>

  Touchscreen_demo();
 8000bce:	f002 fecf 	bl	8003970 <Touchscreen_demo>
  /* Wait For User inputs */
  while (1)
 8000bd2:	bf00      	nop
 8000bd4:	e7fd      	b.n	8000bd2 <main+0x22>
 8000bd6:	bf00      	nop
 8000bd8:	08009bc0 	.word	0x08009bc0

08000bdc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09e      	sub	sp, #120	@ 0x78
 8000be0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000be8:	2002      	movs	r0, #2
 8000bea:	f005 fb8b 	bl	8006304 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b42      	ldr	r3, [pc, #264]	@ (8000cfc <SystemClock_Config+0x120>)
 8000bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf6:	4a41      	ldr	r2, [pc, #260]	@ (8000cfc <SystemClock_Config+0x120>)
 8000bf8:	f023 0301 	bic.w	r3, r3, #1
 8000bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8000cfc <SystemClock_Config+0x120>)
 8000c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b3d      	ldr	r3, [pc, #244]	@ (8000d00 <SystemClock_Config+0x124>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8000d00 <SystemClock_Config+0x124>)
 8000c0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b3a      	ldr	r3, [pc, #232]	@ (8000d00 <SystemClock_Config+0x124>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c20:	bf00      	nop
 8000c22:	4b37      	ldr	r3, [pc, #220]	@ (8000d00 <SystemClock_Config+0x124>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c2e:	d1f8      	bne.n	8000c22 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c30:	2301      	movs	r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c38:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c46:	2302      	movs	r3, #2
 8000c48:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c4e:	23a0      	movs	r3, #160	@ 0xa0
 8000c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c66:	2308      	movs	r3, #8
 8000c68:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f005 fb82 	bl	8006378 <HAL_RCC_OscConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8000c7a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c82:	f000 f841 	bl	8000d08 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000c86:	233f      	movs	r3, #63	@ 0x3f
 8000c88:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c92:	2308      	movs	r3, #8
 8000c94:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c96:	2340      	movs	r3, #64	@ 0x40
 8000c98:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c9a:	2340      	movs	r3, #64	@ 0x40
 8000c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ca4:	2340      	movs	r3, #64	@ 0x40
 8000ca6:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000ca8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cac:	2104      	movs	r1, #4
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f005 ffbc 	bl	8006c2c <HAL_RCC_ClockConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8000cba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000cc2:	f000 f821 	bl	8000d08 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <SystemClock_Config+0x128>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <SystemClock_Config+0x128>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd0:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <SystemClock_Config+0x128>)
 8000cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <SystemClock_Config+0x128>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <SystemClock_Config+0x128>)
 8000ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 8000cf0:	f003 f9e4 	bl	80040bc <HAL_EnableCompensationCell>
}
 8000cf4:	bf00      	nop
 8000cf6:	3778      	adds	r7, #120	@ 0x78
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58000400 	.word	0x58000400
 8000d00:	58024800 	.word	0x58024800
 8000d04:	58024400 	.word	0x58024400

08000d08 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Turn LED REDon */
  BSP_LED_On(LED_RED);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f000 fe2d 	bl	800196c <BSP_LED_On>
  while(1)
 8000d12:	bf00      	nop
 8000d14:	e7fd      	b.n	8000d12 <Error_Handler+0xa>
	...

08000d18 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d1e:	4b34      	ldr	r3, [pc, #208]	@ (8000df0 <CPU_CACHE_Enable+0xd8>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d11b      	bne.n	8000d62 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d2a:	f3bf 8f4f 	dsb	sy
}
 8000d2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d30:	f3bf 8f6f 	isb	sy
}
 8000d34:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d36:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <CPU_CACHE_Enable+0xd8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d3e:	f3bf 8f4f 	dsb	sy
}
 8000d42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d44:	f3bf 8f6f 	isb	sy
}
 8000d48:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d4a:	4b29      	ldr	r3, [pc, #164]	@ (8000df0 <CPU_CACHE_Enable+0xd8>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a28      	ldr	r2, [pc, #160]	@ (8000df0 <CPU_CACHE_Enable+0xd8>)
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d54:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d56:	f3bf 8f4f 	dsb	sy
}
 8000d5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d5c:	f3bf 8f6f 	isb	sy
}
 8000d60:	e000      	b.n	8000d64 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d62:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <CPU_CACHE_Enable+0xd8>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d138      	bne.n	8000de2 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <CPU_CACHE_Enable+0xd8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d78:	f3bf 8f4f 	dsb	sy
}
 8000d7c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <CPU_CACHE_Enable+0xd8>)
 8000d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d84:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	0b5b      	lsrs	r3, r3, #13
 8000d8a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d8e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	08db      	lsrs	r3, r3, #3
 8000d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d98:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	015a      	lsls	r2, r3, #5
 8000d9e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000da2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000da8:	4911      	ldr	r1, [pc, #68]	@ (8000df0 <CPU_CACHE_Enable+0xd8>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	1e5a      	subs	r2, r3, #1
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1ef      	bne.n	8000d9a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1e5a      	subs	r2, r3, #1
 8000dbe:	60ba      	str	r2, [r7, #8]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1e5      	bne.n	8000d90 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc4:	f3bf 8f4f 	dsb	sy
}
 8000dc8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <CPU_CACHE_Enable+0xd8>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a08      	ldr	r2, [pc, #32]	@ (8000df0 <CPU_CACHE_Enable+0xd8>)
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd6:	f3bf 8f4f 	dsb	sy
}
 8000dda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ddc:	f3bf 8f6f 	isb	sy
}
 8000de0:	e000      	b.n	8000de4 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000de2:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a22      	ldr	r2, [pc, #136]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e02:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4a20      	ldr	r2, [pc, #128]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e0a:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	4a1e      	ldr	r2, [pc, #120]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e12:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e1a:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	4a1a      	ldr	r2, [pc, #104]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e22:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4a18      	ldr	r2, [pc, #96]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e2a:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e32:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	4a14      	ldr	r2, [pc, #80]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e3a:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e42:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e48:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e4a:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e50:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e52:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <UTIL_LCD_SetFuncDriver+0xa0>)
 8000e66:	4611      	mov	r1, r2
 8000e68:	2000      	movs	r0, #0
 8000e6a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000e6c:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4a09      	ldr	r2, [pc, #36]	@ (8000e98 <UTIL_LCD_SetFuncDriver+0xa4>)
 8000e72:	4611      	mov	r1, r2
 8000e74:	2000      	movs	r0, #0
 8000e76:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8000e78:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <UTIL_LCD_SetFuncDriver+0x98>)
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <UTIL_LCD_SetFuncDriver+0xa8>)
 8000e7e:	4611      	mov	r1, r2
 8000e80:	2000      	movs	r0, #0
 8000e82:	4798      	blx	r3
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	240000c4 	.word	0x240000c4
 8000e90:	24000084 	.word	0x24000084
 8000e94:	24000098 	.word	0x24000098
 8000e98:	2400009c 	.word	0x2400009c
 8000e9c:	240000a0 	.word	0x240000a0

08000ea0 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <UTIL_LCD_SetTextColor+0x24>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <UTIL_LCD_SetTextColor+0x24>)
 8000eae:	015b      	lsls	r3, r3, #5
 8000eb0:	4413      	add	r3, r2
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	24000084 	.word	0x24000084

08000ec8 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <UTIL_LCD_SetBackColor+0x24>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <UTIL_LCD_SetBackColor+0x24>)
 8000ed6:	015b      	lsls	r3, r3, #5
 8000ed8:	4413      	add	r3, r2
 8000eda:	3304      	adds	r3, #4
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	24000084 	.word	0x24000084

08000ef0 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <UTIL_LCD_SetFont+0x24>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <UTIL_LCD_SetFont+0x24>)
 8000efe:	015b      	lsls	r3, r3, #5
 8000f00:	4413      	add	r3, r2
 8000f02:	3308      	adds	r3, #8
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	24000084 	.word	0x24000084

08000f18 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <UTIL_LCD_FillRGBRect+0x30>)
 8000f28:	685c      	ldr	r4, [r3, #4]
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <UTIL_LCD_FillRGBRect+0x34>)
 8000f2c:	6918      	ldr	r0, [r3, #16]
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	68f9      	ldr	r1, [r7, #12]
 8000f3c:	47a0      	blx	r4
}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	240000c4 	.word	0x240000c4
 8000f4c:	24000084 	.word	0x24000084

08000f50 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <UTIL_LCD_DrawHLine+0x64>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d118      	bne.n	8000f98 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <UTIL_LCD_DrawHLine+0x68>)
 8000f68:	689c      	ldr	r4, [r3, #8]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <UTIL_LCD_DrawHLine+0x64>)
 8000f6c:	6918      	ldr	r0, [r3, #16]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	f003 021f 	and.w	r2, r3, #31
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	0a9b      	lsrs	r3, r3, #10
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000f80:	431a      	orrs	r2, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	0cdb      	lsrs	r3, r3, #19
 8000f86:	02db      	lsls	r3, r3, #11
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	68f9      	ldr	r1, [r7, #12]
 8000f94:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8000f96:	e009      	b.n	8000fac <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8000f98:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <UTIL_LCD_DrawHLine+0x68>)
 8000f9a:	689c      	ldr	r4, [r3, #8]
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <UTIL_LCD_DrawHLine+0x64>)
 8000f9e:	6918      	ldr	r0, [r3, #16]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	68f9      	ldr	r1, [r7, #12]
 8000faa:	47a0      	blx	r4
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	24000084 	.word	0x24000084
 8000fb8:	240000c4 	.word	0x240000c4

08000fbc <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <UTIL_LCD_DrawVLine+0x64>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d118      	bne.n	8001004 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <UTIL_LCD_DrawVLine+0x68>)
 8000fd4:	68dc      	ldr	r4, [r3, #12]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <UTIL_LCD_DrawVLine+0x64>)
 8000fd8:	6918      	ldr	r0, [r3, #16]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	f003 021f 	and.w	r2, r3, #31
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	0a9b      	lsrs	r3, r3, #10
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000fec:	431a      	orrs	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	0cdb      	lsrs	r3, r3, #19
 8000ff2:	02db      	lsls	r3, r3, #11
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	68f9      	ldr	r1, [r7, #12]
 8001000:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8001002:	e009      	b.n	8001018 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <UTIL_LCD_DrawVLine+0x68>)
 8001006:	68dc      	ldr	r4, [r3, #12]
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <UTIL_LCD_DrawVLine+0x64>)
 800100a:	6918      	ldr	r0, [r3, #16]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	68f9      	ldr	r1, [r7, #12]
 8001016:	47a0      	blx	r4
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	24000084 	.word	0x24000084
 8001024:	240000c4 	.word	0x240000c4

08001028 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	603a      	str	r2, [r7, #0]
 8001032:	80fb      	strh	r3, [r7, #6]
 8001034:	460b      	mov	r3, r1
 8001036:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <UTIL_LCD_SetPixel+0x60>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d117      	bne.n	8001070 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <UTIL_LCD_SetPixel+0x64>)
 8001042:	699c      	ldr	r4, [r3, #24]
 8001044:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <UTIL_LCD_SetPixel+0x60>)
 8001046:	6918      	ldr	r0, [r3, #16]
 8001048:	88f9      	ldrh	r1, [r7, #6]
 800104a:	88bd      	ldrh	r5, [r7, #4]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	0a9b      	lsrs	r3, r3, #10
 8001058:	015b      	lsls	r3, r3, #5
 800105a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800105e:	431a      	orrs	r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	0cdb      	lsrs	r3, r3, #19
 8001064:	02db      	lsls	r3, r3, #11
 8001066:	b29b      	uxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	462a      	mov	r2, r5
 800106c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 800106e:	e007      	b.n	8001080 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <UTIL_LCD_SetPixel+0x64>)
 8001072:	699c      	ldr	r4, [r3, #24]
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <UTIL_LCD_SetPixel+0x60>)
 8001076:	6918      	ldr	r0, [r3, #16]
 8001078:	88f9      	ldrh	r1, [r7, #6]
 800107a:	88ba      	ldrh	r2, [r7, #4]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	47a0      	blx	r4
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bdb0      	pop	{r4, r5, r7, pc}
 8001088:	24000084 	.word	0x24000084
 800108c:	240000c4 	.word	0x240000c4

08001090 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
 8001096:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <UTIL_LCD_Clear+0x28>)
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <UTIL_LCD_Clear+0x28>)
 800109e:	6999      	ldr	r1, [r3, #24]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	460b      	mov	r3, r1
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 fa1f 	bl	80014ec <UTIL_LCD_FillRect>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	24000084 	.word	0x24000084

080010bc <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	4613      	mov	r3, r2
 80010c8:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <UTIL_LCD_DisplayChar+0x68>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	4a15      	ldr	r2, [pc, #84]	@ (8001124 <UTIL_LCD_DisplayChar+0x68>)
 80010d0:	015b      	lsls	r3, r3, #5
 80010d2:	4413      	add	r3, r2
 80010d4:	3308      	adds	r3, #8
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80010de:	4911      	ldr	r1, [pc, #68]	@ (8001124 <UTIL_LCD_DisplayChar+0x68>)
 80010e0:	68c9      	ldr	r1, [r1, #12]
 80010e2:	4810      	ldr	r0, [pc, #64]	@ (8001124 <UTIL_LCD_DisplayChar+0x68>)
 80010e4:	0149      	lsls	r1, r1, #5
 80010e6:	4401      	add	r1, r0
 80010e8:	3108      	adds	r1, #8
 80010ea:	6809      	ldr	r1, [r1, #0]
 80010ec:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80010ee:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <UTIL_LCD_DisplayChar+0x68>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	480b      	ldr	r0, [pc, #44]	@ (8001124 <UTIL_LCD_DisplayChar+0x68>)
 80010f8:	015b      	lsls	r3, r3, #5
 80010fa:	4403      	add	r3, r0
 80010fc:	3308      	adds	r3, #8
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	889b      	ldrh	r3, [r3, #4]
 8001102:	3307      	adds	r3, #7
 8001104:	2b00      	cmp	r3, #0
 8001106:	da00      	bge.n	800110a <UTIL_LCD_DisplayChar+0x4e>
 8001108:	3307      	adds	r3, #7
 800110a:	10db      	asrs	r3, r3, #3
 800110c:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001110:	4413      	add	r3, r2
 8001112:	461a      	mov	r2, r3
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 face 	bl	80016b8 <DrawChar>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24000084 	.word	0x24000084

08001128 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	@ 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8001136:	2301      	movs	r3, #1
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800114a:	e002      	b.n	8001152 <UTIL_LCD_DisplayStringAt+0x2a>
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3301      	adds	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	61ba      	str	r2, [r7, #24]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f6      	bne.n	800114c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800115e:	4b48      	ldr	r3, [pc, #288]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a47      	ldr	r2, [pc, #284]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001164:	68d2      	ldr	r2, [r2, #12]
 8001166:	4946      	ldr	r1, [pc, #280]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001168:	0152      	lsls	r2, r2, #5
 800116a:	440a      	add	r2, r1
 800116c:	3208      	adds	r2, #8
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	8892      	ldrh	r2, [r2, #4]
 8001172:	fbb3 f3f2 	udiv	r3, r3, r2
 8001176:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d018      	beq.n	80011b0 <UTIL_LCD_DisplayStringAt+0x88>
 800117e:	2b03      	cmp	r3, #3
 8001180:	dc2a      	bgt.n	80011d8 <UTIL_LCD_DisplayStringAt+0xb0>
 8001182:	2b01      	cmp	r3, #1
 8001184:	d002      	beq.n	800118c <UTIL_LCD_DisplayStringAt+0x64>
 8001186:	2b02      	cmp	r3, #2
 8001188:	d015      	beq.n	80011b6 <UTIL_LCD_DisplayStringAt+0x8e>
 800118a:	e025      	b.n	80011d8 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	4a3b      	ldr	r2, [pc, #236]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001194:	68d2      	ldr	r2, [r2, #12]
 8001196:	493a      	ldr	r1, [pc, #232]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001198:	0152      	lsls	r2, r2, #5
 800119a:	440a      	add	r2, r1
 800119c:	3208      	adds	r2, #8
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	8892      	ldrh	r2, [r2, #4]
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	085b      	lsrs	r3, r3, #1
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80011ae:	e016      	b.n	80011de <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80011b4:	e013      	b.n	80011de <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	4a30      	ldr	r2, [pc, #192]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 80011be:	68d2      	ldr	r2, [r2, #12]
 80011c0:	492f      	ldr	r1, [pc, #188]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 80011c2:	0152      	lsls	r2, r2, #5
 80011c4:	440a      	add	r2, r1
 80011c6:	3208      	adds	r2, #8
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	8892      	ldrh	r2, [r2, #4]
 80011cc:	fb03 f202 	mul.w	r2, r3, r2
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80011d6:	e002      	b.n	80011de <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80011dc:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <UTIL_LCD_DisplayStringAt+0xc4>
 80011e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011ea:	d31b      	bcc.n	8001224 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80011f0:	e018      	b.n	8001224 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011fc:	f7ff ff5e 	bl	80010bc <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	4413      	add	r3, r2
 800120a:	3308      	adds	r3, #8
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	461a      	mov	r2, r3
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	4413      	add	r3, r2
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3301      	adds	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
    i++;
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	3301      	adds	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001234:	6959      	ldr	r1, [r3, #20]
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	4811      	ldr	r0, [pc, #68]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 800123c:	015b      	lsls	r3, r3, #5
 800123e:	4403      	add	r3, r0
 8001240:	3308      	adds	r3, #8
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	fb00 f303 	mul.w	r3, r0, r3
 800124e:	1acb      	subs	r3, r1, r3
 8001250:	b29b      	uxth	r3, r3
 8001252:	490b      	ldr	r1, [pc, #44]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001254:	68c9      	ldr	r1, [r1, #12]
 8001256:	480a      	ldr	r0, [pc, #40]	@ (8001280 <UTIL_LCD_DisplayStringAt+0x158>)
 8001258:	0149      	lsls	r1, r1, #5
 800125a:	4401      	add	r1, r0
 800125c:	3108      	adds	r1, #8
 800125e:	6809      	ldr	r1, [r1, #0]
 8001260:	8889      	ldrh	r1, [r1, #4]
 8001262:	428b      	cmp	r3, r1
 8001264:	bf2c      	ite	cs
 8001266:	2301      	movcs	r3, #1
 8001268:	2300      	movcc	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4013      	ands	r3, r2
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1be      	bne.n	80011f2 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	24000084 	.word	0x24000084

08001284 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f7ff fe59 	bl	8000f50 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	1e59      	subs	r1, r3, #1
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fe50 	bl	8000f50 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff fe80 	bl	8000fbc <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	1e58      	subs	r0, r3, #1
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	f7ff fe77 	bl	8000fbc <UTIL_LCD_DrawVLine>
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	f1c3 0303 	rsb	r3, r3, #3
 80012ee:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 80012f8:	e0eb      	b.n	80014d2 <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	1ad2      	subs	r2, r2, r3
 8001300:	4b79      	ldr	r3, [pc, #484]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	429a      	cmp	r2, r3
 8001306:	d22d      	bcs.n	8001364 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	441a      	add	r2, r3
 800130e:	4b76      	ldr	r3, [pc, #472]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	429a      	cmp	r2, r3
 8001314:	d20f      	bcs.n	8001336 <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	b29a      	uxth	r2, r3
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b298      	uxth	r0, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	b29a      	uxth	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	b29b      	uxth	r3, r3
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fe79 	bl	8001028 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	1ad2      	subs	r2, r2, r3
 800133c:	4b6a      	ldr	r3, [pc, #424]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	d20f      	bcs.n	8001364 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	b29a      	uxth	r2, r3
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	b29b      	uxth	r3, r3
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	b298      	uxth	r0, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	b29a      	uxth	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	b29b      	uxth	r3, r3
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	b29b      	uxth	r3, r3
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fe62 	bl	8001028 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad2      	subs	r2, r2, r3
 800136a:	4b5f      	ldr	r3, [pc, #380]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	429a      	cmp	r2, r3
 8001370:	d22d      	bcs.n	80013ce <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	441a      	add	r2, r3
 8001378:	4b5b      	ldr	r3, [pc, #364]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	429a      	cmp	r2, r3
 800137e:	d20f      	bcs.n	80013a0 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	b29a      	uxth	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4413      	add	r3, r2
 800138a:	b298      	uxth	r0, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	b29a      	uxth	r2, r3
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	b29b      	uxth	r3, r3
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	b29b      	uxth	r3, r3
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fe44 	bl	8001028 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	1ad2      	subs	r2, r2, r3
 80013a6:	4b50      	ldr	r3, [pc, #320]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d20f      	bcs.n	80013ce <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	b298      	uxth	r0, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fe2d 	bl	8001028 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	441a      	add	r2, r3
 80013d4:	4b44      	ldr	r3, [pc, #272]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d22d      	bcs.n	8001438 <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	441a      	add	r2, r3
 80013e2:	4b41      	ldr	r3, [pc, #260]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d20f      	bcs.n	800140a <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	b298      	uxth	r0, r3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4413      	add	r3, r2
 8001400:	b29b      	uxth	r3, r3
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fe0f 	bl	8001028 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	1ad2      	subs	r2, r2, r3
 8001410:	4b35      	ldr	r3, [pc, #212]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	429a      	cmp	r2, r3
 8001416:	d20f      	bcs.n	8001438 <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	b29a      	uxth	r2, r3
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	b29b      	uxth	r3, r3
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b298      	uxth	r0, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	b29a      	uxth	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4413      	add	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fdf8 	bl	8001028 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	441a      	add	r2, r3
 800143e:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	429a      	cmp	r2, r3
 8001444:	d22d      	bcs.n	80014a2 <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	441a      	add	r2, r3
 800144c:	4b26      	ldr	r3, [pc, #152]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	d20f      	bcs.n	8001474 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	b29a      	uxth	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4413      	add	r3, r2
 800145e:	b298      	uxth	r0, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	b29a      	uxth	r2, r3
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	b29b      	uxth	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fdda 	bl	8001028 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	1ad2      	subs	r2, r2, r3
 800147a:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <UTIL_LCD_DrawCircle+0x210>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	429a      	cmp	r2, r3
 8001480:	d20f      	bcs.n	80014a2 <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	b29a      	uxth	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	b29b      	uxth	r3, r3
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b298      	uxth	r0, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	b29a      	uxth	r2, r3
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	b29b      	uxth	r3, r3
 8001496:	4413      	add	r3, r2
 8001498:	b29b      	uxth	r3, r3
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fdc3 	bl	8001028 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da06      	bge.n	80014b6 <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	009a      	lsls	r2, r3, #2
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	4413      	add	r3, r2
 80014b0:	3306      	adds	r3, #6
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e00a      	b.n	80014cc <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	009a      	lsls	r2, r3, #2
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	4413      	add	r3, r2
 80014c2:	330a      	adds	r3, #10
 80014c4:	61fb      	str	r3, [r7, #28]
      current_y--;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	f67f af0f 	bls.w	80012fa <UTIL_LCD_DrawCircle+0x22>
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	24000084 	.word	0x24000084

080014ec <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <UTIL_LCD_FillRect+0x6c>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d11a      	bne.n	8001538 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <UTIL_LCD_FillRect+0x70>)
 8001504:	691c      	ldr	r4, [r3, #16]
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <UTIL_LCD_FillRect+0x6c>)
 8001508:	6918      	ldr	r0, [r3, #16]
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	f003 021f 	and.w	r2, r3, #31
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	0a9b      	lsrs	r3, r3, #10
 8001516:	015b      	lsls	r3, r3, #5
 8001518:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800151c:	431a      	orrs	r2, r3
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	0cdb      	lsrs	r3, r3, #19
 8001522:	02db      	lsls	r3, r3, #11
 8001524:	b29b      	uxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	68f9      	ldr	r1, [r7, #12]
 8001534:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8001536:	e00b      	b.n	8001550 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <UTIL_LCD_FillRect+0x70>)
 800153a:	691c      	ldr	r4, [r3, #16]
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <UTIL_LCD_FillRect+0x6c>)
 800153e:	6918      	ldr	r0, [r3, #16]
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	47a0      	blx	r4
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	24000084 	.word	0x24000084
 800155c:	240000c4 	.word	0x240000c4

08001560 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	f1c3 0303 	rsb	r3, r3, #3
 8001576:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8001580:	e08b      	b.n	800169a <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d036      	beq.n	80015f6 <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d31c      	bcc.n	80015ca <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	18d0      	adds	r0, r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005a      	lsls	r2, r3, #1
 800159a:	68f9      	ldr	r1, [r7, #12]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	1acb      	subs	r3, r1, r3
 80015a0:	441a      	add	r2, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	4601      	mov	r1, r0
 80015a6:	2000      	movs	r0, #0
 80015a8:	f7ff fcd2 	bl	8000f50 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	1ad0      	subs	r0, r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005a      	lsls	r2, r3, #1
 80015b6:	68f9      	ldr	r1, [r7, #12]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	1acb      	subs	r3, r1, r3
 80015bc:	441a      	add	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	4601      	mov	r1, r0
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff fcc4 	bl	8000f50 <UTIL_LCD_DrawHLine>
 80015c8:	e015      	b.n	80015f6 <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	1ad0      	subs	r0, r2, r3
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	18d1      	adds	r1, r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005a      	lsls	r2, r3, #1
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f7ff fcb8 	bl	8000f50 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	1ad0      	subs	r0, r2, r3
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	1ad1      	subs	r1, r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005a      	lsls	r2, r3, #1
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f7ff fcad 	bl	8000f50 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d036      	beq.n	800166a <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d31c      	bcc.n	800163e <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	1ad0      	subs	r0, r2, r3
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	005a      	lsls	r2, r3, #1
 800160e:	68f9      	ldr	r1, [r7, #12]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	1acb      	subs	r3, r1, r3
 8001614:	441a      	add	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	4601      	mov	r1, r0
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff fc98 	bl	8000f50 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	18d0      	adds	r0, r2, r3
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	005a      	lsls	r2, r3, #1
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	1acb      	subs	r3, r1, r3
 8001630:	441a      	add	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	4601      	mov	r1, r0
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fc8a 	bl	8000f50 <UTIL_LCD_DrawHLine>
 800163c:	e015      	b.n	800166a <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	1ad0      	subs	r0, r2, r3
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	1ad1      	subs	r1, r2, r3
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	005a      	lsls	r2, r3, #1
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f7ff fc7e 	bl	8000f50 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	1ad0      	subs	r0, r2, r3
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	18d1      	adds	r1, r2, r3
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	005a      	lsls	r2, r3, #1
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f7ff fc73 	bl	8000f50 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	2b00      	cmp	r3, #0
 800166e:	da06      	bge.n	800167e <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	009a      	lsls	r2, r3, #2
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	3306      	adds	r3, #6
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	e00a      	b.n	8001694 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	009a      	lsls	r2, r3, #2
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	330a      	adds	r3, #10
 800168c:	61fb      	str	r3, [r7, #28]
      current_y--;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3b01      	subs	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	3301      	adds	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	429a      	cmp	r2, r3
 80016a0:	f67f af6f 	bls.w	8001582 <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7ff fe14 	bl	80012d8 <UTIL_LCD_DrawCircle>
}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0b2      	sub	sp, #200	@ 0xc8
 80016bc:	af02      	add	r7, sp, #8
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 80016d0:	4ba5      	ldr	r3, [pc, #660]	@ (8001968 <DrawChar+0x2b0>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4aa4      	ldr	r2, [pc, #656]	@ (8001968 <DrawChar+0x2b0>)
 80016d6:	015b      	lsls	r3, r3, #5
 80016d8:	4413      	add	r3, r2
 80016da:	3308      	adds	r3, #8
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	88db      	ldrh	r3, [r3, #6]
 80016e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 80016e4:	4ba0      	ldr	r3, [pc, #640]	@ (8001968 <DrawChar+0x2b0>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4a9f      	ldr	r2, [pc, #636]	@ (8001968 <DrawChar+0x2b0>)
 80016ea:	015b      	lsls	r3, r3, #5
 80016ec:	4413      	add	r3, r2
 80016ee:	3308      	adds	r3, #8
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	889b      	ldrh	r3, [r3, #4]
 80016f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 80016f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016fc:	3307      	adds	r3, #7
 80016fe:	f023 0207 	bic.w	r2, r3, #7
 8001702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001712:	e11c      	b.n	800194e <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8001714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001718:	3307      	adds	r3, #7
 800171a:	08db      	lsrs	r3, r3, #3
 800171c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 800172c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001730:	3307      	adds	r3, #7
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d002      	beq.n	800173e <DrawChar+0x86>
 8001738:	2b02      	cmp	r3, #2
 800173a:	d006      	beq.n	800174a <DrawChar+0x92>
 800173c:	e011      	b.n	8001762 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 800173e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8001748:	e01d      	b.n	8001786 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800174a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001756:	3201      	adds	r2, #1
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	4313      	orrs	r3, r2
 800175c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8001760:	e011      	b.n	8001786 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800176e:	3301      	adds	r3, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	4313      	orrs	r3, r2
 8001776:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800177a:	3202      	adds	r2, #2
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8001784:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001786:	4b78      	ldr	r3, [pc, #480]	@ (8001968 <DrawChar+0x2b0>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	4a77      	ldr	r2, [pc, #476]	@ (8001968 <DrawChar+0x2b0>)
 800178c:	015b      	lsls	r3, r3, #5
 800178e:	4413      	add	r3, r2
 8001790:	331c      	adds	r3, #28
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b02      	cmp	r3, #2
 8001796:	f040 808c 	bne.w	80018b2 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80017a0:	e074      	b.n	800188c <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 80017a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80017a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80017aa:	1ad2      	subs	r2, r2, r3
 80017ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017b0:	4413      	add	r3, r2
 80017b2:	3b01      	subs	r3, #1
 80017b4:	2201      	movs	r2, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d02d      	beq.n	8001822 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 80017c6:	4b68      	ldr	r3, [pc, #416]	@ (8001968 <DrawChar+0x2b0>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	4a67      	ldr	r2, [pc, #412]	@ (8001968 <DrawChar+0x2b0>)
 80017cc:	015b      	lsls	r3, r3, #5
 80017ce:	4413      	add	r3, r2
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b62      	ldr	r3, [pc, #392]	@ (8001968 <DrawChar+0x2b0>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4961      	ldr	r1, [pc, #388]	@ (8001968 <DrawChar+0x2b0>)
 80017e2:	015b      	lsls	r3, r3, #5
 80017e4:	440b      	add	r3, r1
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0a9b      	lsrs	r3, r3, #10
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	015b      	lsls	r3, r3, #5
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001968 <DrawChar+0x2b0>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	495a      	ldr	r1, [pc, #360]	@ (8001968 <DrawChar+0x2b0>)
 8001800:	015b      	lsls	r3, r3, #5
 8001802:	440b      	add	r3, r1
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0cdb      	lsrs	r3, r3, #19
 8001808:	b29b      	uxth	r3, r3
 800180a:	02db      	lsls	r3, r3, #11
 800180c:	b29b      	uxth	r3, r3
 800180e:	4313      	orrs	r3, r2
 8001810:	b29a      	uxth	r2, r3
 8001812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	33c0      	adds	r3, #192	@ 0xc0
 800181a:	443b      	add	r3, r7
 800181c:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8001820:	e02f      	b.n	8001882 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8001822:	4b51      	ldr	r3, [pc, #324]	@ (8001968 <DrawChar+0x2b0>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	4a50      	ldr	r2, [pc, #320]	@ (8001968 <DrawChar+0x2b0>)
 8001828:	015b      	lsls	r3, r3, #5
 800182a:	4413      	add	r3, r2
 800182c:	3304      	adds	r3, #4
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	b29b      	uxth	r3, r3
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	b29a      	uxth	r2, r3
 800183a:	4b4b      	ldr	r3, [pc, #300]	@ (8001968 <DrawChar+0x2b0>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	494a      	ldr	r1, [pc, #296]	@ (8001968 <DrawChar+0x2b0>)
 8001840:	015b      	lsls	r3, r3, #5
 8001842:	440b      	add	r3, r1
 8001844:	3304      	adds	r3, #4
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0a9b      	lsrs	r3, r3, #10
 800184a:	b29b      	uxth	r3, r3
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	b29b      	uxth	r3, r3
 8001850:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001854:	b29b      	uxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b43      	ldr	r3, [pc, #268]	@ (8001968 <DrawChar+0x2b0>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	4942      	ldr	r1, [pc, #264]	@ (8001968 <DrawChar+0x2b0>)
 8001860:	015b      	lsls	r3, r3, #5
 8001862:	440b      	add	r3, r1
 8001864:	3304      	adds	r3, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0cdb      	lsrs	r3, r3, #19
 800186a:	b29b      	uxth	r3, r3
 800186c:	02db      	lsls	r3, r3, #11
 800186e:	b29b      	uxth	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b29a      	uxth	r2, r3
 8001874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	33c0      	adds	r3, #192	@ 0xc0
 800187c:	443b      	add	r3, r7
 800187e:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8001882:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001886:	3301      	adds	r3, #1
 8001888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800188c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001894:	429a      	cmp	r2, r3
 8001896:	d384      	bcc.n	80017a2 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	1c4b      	adds	r3, r1, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80018a2:	2301      	movs	r3, #1
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7ff fb34 	bl	8000f18 <UTIL_LCD_FillRGBRect>
 80018b0:	e048      	b.n	8001944 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80018b8:	e032      	b.n	8001920 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 80018ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80018be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018c2:	1ad2      	subs	r2, r2, r3
 80018c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018c8:	4413      	add	r3, r2
 80018ca:	3b01      	subs	r3, #1
 80018cc:	2201      	movs	r2, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00d      	beq.n	80018fa <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80018de:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <DrawChar+0x2b0>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	4a21      	ldr	r2, [pc, #132]	@ (8001968 <DrawChar+0x2b0>)
 80018e4:	015b      	lsls	r3, r3, #5
 80018e6:	4413      	add	r3, r2
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	33c0      	adds	r3, #192	@ 0xc0
 80018f2:	443b      	add	r3, r7
 80018f4:	f843 2cac 	str.w	r2, [r3, #-172]
 80018f8:	e00d      	b.n	8001916 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <DrawChar+0x2b0>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001968 <DrawChar+0x2b0>)
 8001900:	015b      	lsls	r3, r3, #5
 8001902:	4413      	add	r3, r2
 8001904:	3304      	adds	r3, #4
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	33c0      	adds	r3, #192	@ 0xc0
 8001910:	443b      	add	r3, r7
 8001912:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8001916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800191a:	3301      	adds	r3, #1
 800191c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001920:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001928:	429a      	cmp	r2, r3
 800192a:	d3c6      	bcc.n	80018ba <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	1c4b      	adds	r3, r1, #1
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	f107 0214 	add.w	r2, r7, #20
 8001936:	2301      	movs	r3, #1
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff faea 	bl	8000f18 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8001944:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001948:	3301      	adds	r3, #1
 800194a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800194e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001952:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001956:	429a      	cmp	r2, r3
 8001958:	f4ff aedc 	bcc.w	8001714 <DrawChar+0x5c>
    }
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	37c0      	adds	r7, #192	@ 0xc0
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	24000084 	.word	0x24000084

0800196c <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4a08      	ldr	r2, [pc, #32]	@ (80019a0 <BSP_LED_On+0x34>)
 800197e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4a07      	ldr	r2, [pc, #28]	@ (80019a4 <BSP_LED_On+0x38>)
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	b29b      	uxth	r3, r3
 800198c:	2200      	movs	r2, #0
 800198e:	4619      	mov	r1, r3
 8001990:	f003 fa44 	bl	8004e1c <HAL_GPIO_WritePin>
  return ret;
 8001994:	68fb      	ldr	r3, [r7, #12]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	24000038 	.word	0x24000038
 80019a4:	08009b34 	.word	0x08009b34

080019a8 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <BSP_PB_IRQHandler+0x20>)
 80019b8:	4413      	add	r3, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 ff44 	bl	8004848 <HAL_EXTI_IRQHandler>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	240000f0 	.word	0x240000f0

080019cc <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <BSP_I2C4_Init+0x64>)
 80019d8:	4a16      	ldr	r2, [pc, #88]	@ (8001a34 <BSP_I2C4_Init+0x68>)
 80019da:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80019dc:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <BSP_I2C4_Init+0x6c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d11f      	bne.n	8001a24 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 80019e4:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <BSP_I2C4_Init+0x6c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a13      	ldr	r2, [pc, #76]	@ (8001a38 <BSP_I2C4_Init+0x6c>)
 80019ec:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80019ee:	4810      	ldr	r0, [pc, #64]	@ (8001a30 <BSP_I2C4_Init+0x64>)
 80019f0:	f003 fd30 	bl	8005454 <HAL_I2C_GetState>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d114      	bne.n	8001a24 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80019fa:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <BSP_I2C4_Init+0x64>)
 80019fc:	f000 fb60 	bl	80020c0 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8001a00:	f005 fc8a 	bl	8007318 <HAL_RCC_GetPCLK2Freq>
 8001a04:	4603      	mov	r3, r0
 8001a06:	490d      	ldr	r1, [pc, #52]	@ (8001a3c <BSP_I2C4_Init+0x70>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f8e3 	bl	8001bd4 <I2C_GetTiming>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4619      	mov	r1, r3
 8001a12:	4807      	ldr	r0, [pc, #28]	@ (8001a30 <BSP_I2C4_Init+0x64>)
 8001a14:	f000 f838 	bl	8001a88 <MX_I2C4_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a1e:	f06f 0307 	mvn.w	r3, #7
 8001a22:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	24000b00 	.word	0x24000b00
 8001a34:	58001c00 	.word	0x58001c00
 8001a38:	240000f8 	.word	0x240000f8
 8001a3c:	00061a80 	.word	0x00061a80

08001a40 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <BSP_I2C4_DeInit+0x40>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <BSP_I2C4_DeInit+0x40>)
 8001a52:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <BSP_I2C4_DeInit+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10b      	bne.n	8001a74 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8001a5c:	4809      	ldr	r0, [pc, #36]	@ (8001a84 <BSP_I2C4_DeInit+0x44>)
 8001a5e:	f000 fb9b 	bl	8002198 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8001a62:	4808      	ldr	r0, [pc, #32]	@ (8001a84 <BSP_I2C4_DeInit+0x44>)
 8001a64:	f003 fa84 	bl	8004f70 <HAL_I2C_DeInit>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8001a6e:	f06f 0307 	mvn.w	r3, #7
 8001a72:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	240000f8 	.word	0x240000f8
 8001a84:	24000b00 	.word	0x24000b00

08001a88 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f003 f9c2 	bl	8004e50 <HAL_I2C_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e014      	b.n	8001b02 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f003 ff8a 	bl	80059f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e008      	b.n	8001b02 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8001af0:	2100      	movs	r1, #0
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f003 ffcb 	bl	8005a8e <HAL_I2CEx_ConfigDigitalFilter>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60ba      	str	r2, [r7, #8]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	81fb      	strh	r3, [r7, #14]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	81bb      	strh	r3, [r7, #12]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001b22:	89b9      	ldrh	r1, [r7, #12]
 8001b24:	89f8      	ldrh	r0, [r7, #14]
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f000 fb57 	bl	80021e0 <I2C4_WriteReg>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e00c      	b.n	8001b58 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8001b3e:	4809      	ldr	r0, [pc, #36]	@ (8001b64 <BSP_I2C4_WriteReg+0x58>)
 8001b40:	f003 fc96 	bl	8005470 <HAL_I2C_GetError>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d103      	bne.n	8001b52 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b4a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e002      	b.n	8001b58 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001b52:	f06f 0303 	mvn.w	r3, #3
 8001b56:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001b58:	697b      	ldr	r3, [r7, #20]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	24000b00 	.word	0x24000b00

08001b68 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	60ba      	str	r2, [r7, #8]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	81fb      	strh	r3, [r7, #14]
 8001b76:	460b      	mov	r3, r1
 8001b78:	81bb      	strh	r3, [r7, #12]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001b7e:	89b9      	ldrh	r1, [r7, #12]
 8001b80:	89f8      	ldrh	r0, [r7, #14]
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f000 fb4f 	bl	800222c <I2C4_ReadReg>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e00c      	b.n	8001bb4 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8001b9a:	4809      	ldr	r0, [pc, #36]	@ (8001bc0 <BSP_I2C4_ReadReg+0x58>)
 8001b9c:	f003 fc68 	bl	8005470 <HAL_I2C_GetError>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d103      	bne.n	8001bae <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001ba6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e002      	b.n	8001bb4 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001bae:	f06f 0303 	mvn.w	r3, #3
 8001bb2:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001bb4:	697b      	ldr	r3, [r7, #20]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	24000b00 	.word	0x24000b00

08001bc4 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8001bc8:	f002 fa3c 	bl	8004044 <HAL_GetTick>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d06b      	beq.n	8001cc0 <I2C_GetTiming+0xec>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d068      	beq.n	8001cc0 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	e060      	b.n	8001cb6 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001bf4:	4a35      	ldr	r2, [pc, #212]	@ (8001ccc <I2C_GetTiming+0xf8>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	212c      	movs	r1, #44	@ 0x2c
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3304      	adds	r3, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d352      	bcc.n	8001cb0 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8001c0a:	4a30      	ldr	r2, [pc, #192]	@ (8001ccc <I2C_GetTiming+0xf8>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	212c      	movs	r1, #44	@ 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3308      	adds	r3, #8
 8001c18:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d847      	bhi.n	8001cb0 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8001c20:	6939      	ldr	r1, [r7, #16]
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f856 	bl	8001cd4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8001c28:	6939      	ldr	r1, [r7, #16]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f940 	bl	8001eb0 <I2C_Compute_SCLL_SCLH>
 8001c30:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c36:	d842      	bhi.n	8001cbe <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001c38:	4925      	ldr	r1, [pc, #148]	@ (8001cd0 <I2C_GetTiming+0xfc>)
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001c4a:	4821      	ldr	r0, [pc, #132]	@ (8001cd0 <I2C_GetTiming+0xfc>)
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4403      	add	r3, r0
 8001c58:	3304      	adds	r3, #4
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	051b      	lsls	r3, r3, #20
 8001c5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001c62:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001c64:	481a      	ldr	r0, [pc, #104]	@ (8001cd0 <I2C_GetTiming+0xfc>)
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4403      	add	r3, r0
 8001c72:	3308      	adds	r3, #8
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	041b      	lsls	r3, r3, #16
 8001c78:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001c7c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001c7e:	4814      	ldr	r0, [pc, #80]	@ (8001cd0 <I2C_GetTiming+0xfc>)
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4403      	add	r3, r0
 8001c8c:	330c      	adds	r3, #12
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001c94:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8001c96:	480e      	ldr	r0, [pc, #56]	@ (8001cd0 <I2C_GetTiming+0xfc>)
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4403      	add	r3, r0
 8001ca4:	3310      	adds	r3, #16
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001caa:	430b      	orrs	r3, r1
 8001cac:	617b      	str	r3, [r7, #20]
        }
        break;
 8001cae:	e006      	b.n	8001cbe <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d99b      	bls.n	8001bf4 <I2C_GetTiming+0x20>
 8001cbc:	e000      	b.n	8001cc0 <I2C_GetTiming+0xec>
        break;
 8001cbe:	bf00      	nop
      }
    }
  }

  return ret;
 8001cc0:	697b      	ldr	r3, [r7, #20]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	08009b3c 	.word	0x08009b3c
 8001cd0:	240000fc 	.word	0x240000fc

08001cd4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b08f      	sub	sp, #60	@ 0x3c
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8001cde:	2310      	movs	r3, #16
 8001ce0:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	085a      	lsrs	r2, r3, #1
 8001ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8001ce8:	4413      	add	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cf0:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8001cf2:	2332      	movs	r3, #50	@ 0x32
 8001cf4:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8001cf6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001cfa:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001cfc:	4a69      	ldr	r2, [pc, #420]	@ (8001ea4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	212c      	movs	r1, #44	@ 0x2c
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	3324      	adds	r3, #36	@ 0x24
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4a65      	ldr	r2, [pc, #404]	@ (8001ea4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	212c      	movs	r1, #44	@ 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	330c      	adds	r3, #12
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001d20:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001d22:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001d24:	495f      	ldr	r1, [pc, #380]	@ (8001ea4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	202c      	movs	r0, #44	@ 0x2c
 8001d2a:	fb00 f303 	mul.w	r3, r0, r3
 8001d2e:	440b      	add	r3, r1
 8001d30:	3328      	adds	r3, #40	@ 0x28
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3303      	adds	r3, #3
 8001d36:	69f9      	ldr	r1, [r7, #28]
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001d40:	4a58      	ldr	r2, [pc, #352]	@ (8001ea4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	212c      	movs	r1, #44	@ 0x2c
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3310      	adds	r3, #16
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	4a54      	ldr	r2, [pc, #336]	@ (8001ea4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	212c      	movs	r1, #44	@ 0x2c
 8001d58:	fb01 f303 	mul.w	r3, r1, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3320      	adds	r3, #32
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001d64:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001d66:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001d68:	494e      	ldr	r1, [pc, #312]	@ (8001ea4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	202c      	movs	r0, #44	@ 0x2c
 8001d6e:	fb00 f303 	mul.w	r3, r0, r3
 8001d72:	440b      	add	r3, r1
 8001d74:	3328      	adds	r3, #40	@ 0x28
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	69f9      	ldr	r1, [r7, #28]
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8001d84:	4a47      	ldr	r2, [pc, #284]	@ (8001ea4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	212c      	movs	r1, #44	@ 0x2c
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	3320      	adds	r3, #32
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	4a43      	ldr	r2, [pc, #268]	@ (8001ea4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	212c      	movs	r1, #44	@ 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	3314      	adds	r3, #20
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4403      	add	r3, r0
 8001da8:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8001daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	dc01      	bgt.n	8001db4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8001db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	dc01      	bgt.n	8001dbe <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dc2:	e062      	b.n	8001e8a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc8:	e059      	b.n	8001e7e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	3301      	adds	r3, #1
 8001dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dd0:	3201      	adds	r2, #1
 8001dd2:	fb03 f202 	mul.w	r2, r3, r2
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d348      	bcc.n	8001e78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
 8001dea:	e042      	b.n	8001e72 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8001dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dee:	3301      	adds	r3, #1
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	fb03 f202 	mul.w	r2, r3, r2
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d332      	bcc.n	8001e6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8001e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d82e      	bhi.n	8001e6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8001e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d02a      	beq.n	8001e6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001e16:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4924      	ldr	r1, [pc, #144]	@ (8001eac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e28:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	491f      	ldr	r1, [pc, #124]	@ (8001eac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e3e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8001e40:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4919      	ldr	r1, [pc, #100]	@ (8001eac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	3308      	adds	r3, #8
 8001e52:	6a3a      	ldr	r2, [r7, #32]
 8001e54:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	4a11      	ldr	r2, [pc, #68]	@ (8001ea8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001e62:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001e64:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e6a:	d812      	bhi.n	8001e92 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	623b      	str	r3, [r7, #32]
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d9b9      	bls.n	8001dec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d9a2      	bls.n	8001dca <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e86:	3301      	adds	r3, #1
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d999      	bls.n	8001dc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8001e90:	e000      	b.n	8001e94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8001e92:	bf00      	nop
          }
        }
      }
    }
  }
}
 8001e94:	373c      	adds	r7, #60	@ 0x3c
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	3b9aca00 	.word	0x3b9aca00
 8001ea4:	08009b3c 	.word	0x08009b3c
 8001ea8:	24000afc 	.word	0x24000afc
 8001eac:	240000fc 	.word	0x240000fc

08001eb0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b093      	sub	sp, #76	@ 0x4c
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	085a      	lsrs	r2, r3, #1
 8001ec4:	4b7a      	ldr	r3, [pc, #488]	@ (80020b0 <I2C_Compute_SCLL_SCLH+0x200>)
 8001ec6:	4413      	add	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8001ed0:	4a78      	ldr	r2, [pc, #480]	@ (80020b4 <I2C_Compute_SCLL_SCLH+0x204>)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	212c      	movs	r1, #44	@ 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	085a      	lsrs	r2, r3, #1
 8001ee0:	4b73      	ldr	r3, [pc, #460]	@ (80020b0 <I2C_Compute_SCLL_SCLH+0x200>)
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4973      	ldr	r1, [pc, #460]	@ (80020b4 <I2C_Compute_SCLL_SCLH+0x204>)
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	202c      	movs	r0, #44	@ 0x2c
 8001eea:	fb00 f202 	mul.w	r2, r0, r2
 8001eee:	440a      	add	r2, r1
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8001ef8:	2332      	movs	r3, #50	@ 0x32
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8001efc:	4a6d      	ldr	r2, [pc, #436]	@ (80020b4 <I2C_Compute_SCLL_SCLH+0x204>)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	212c      	movs	r1, #44	@ 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	3328      	adds	r3, #40	@ 0x28
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8001f14:	4a67      	ldr	r2, [pc, #412]	@ (80020b4 <I2C_Compute_SCLL_SCLH+0x204>)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	212c      	movs	r1, #44	@ 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a62      	ldr	r2, [pc, #392]	@ (80020b0 <I2C_Compute_SCLL_SCLH+0x200>)
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8001f2c:	4a61      	ldr	r2, [pc, #388]	@ (80020b4 <I2C_Compute_SCLL_SCLH+0x204>)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	212c      	movs	r1, #44	@ 0x2c
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	3308      	adds	r3, #8
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80020b0 <I2C_Compute_SCLL_SCLH+0x200>)
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8001f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f46:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f4c:	e0a3      	b.n	8002096 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001f4e:	495a      	ldr	r1, [pc, #360]	@ (80020b8 <I2C_Compute_SCLL_SCLH+0x208>)
 8001f50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f6c:	e08c      	b.n	8002088 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	441a      	add	r2, r3
 8001f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f76:	3301      	adds	r3, #1
 8001f78:	6979      	ldr	r1, [r7, #20]
 8001f7a:	fb03 f101 	mul.w	r1, r3, r1
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	440b      	add	r3, r1
 8001f84:	4413      	add	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001f88:	4a4a      	ldr	r2, [pc, #296]	@ (80020b4 <I2C_Compute_SCLL_SCLH+0x204>)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	212c      	movs	r1, #44	@ 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3318      	adds	r3, #24
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d971      	bls.n	8002082 <I2C_Compute_SCLL_SCLH+0x1d2>
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	1ad2      	subs	r2, r2, r3
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d268      	bcs.n	8002082 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fb4:	e062      	b.n	800207c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	441a      	add	r2, r3
 8001fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	6979      	ldr	r1, [r7, #20]
 8001fc2:	fb03 f101 	mul.w	r1, r3, r1
 8001fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	440b      	add	r3, r1
 8001fcc:	4413      	add	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	4937      	ldr	r1, [pc, #220]	@ (80020b4 <I2C_Compute_SCLL_SCLH+0x204>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	202c      	movs	r0, #44	@ 0x2c
 8001fdc:	fb00 f303 	mul.w	r3, r0, r3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3320      	adds	r3, #32
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	441a      	add	r2, r3
 8001fe8:	4932      	ldr	r1, [pc, #200]	@ (80020b4 <I2C_Compute_SCLL_SCLH+0x204>)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	202c      	movs	r0, #44	@ 0x2c
 8001fee:	fb00 f303 	mul.w	r3, r0, r3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3324      	adds	r3, #36	@ 0x24
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	429a      	cmp	r2, r3
 8002002:	d338      	bcc.n	8002076 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	429a      	cmp	r2, r3
 800200a:	d834      	bhi.n	8002076 <I2C_Compute_SCLL_SCLH+0x1c6>
 800200c:	4a29      	ldr	r2, [pc, #164]	@ (80020b4 <I2C_Compute_SCLL_SCLH+0x204>)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	212c      	movs	r1, #44	@ 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	331c      	adds	r3, #28
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	429a      	cmp	r2, r3
 8002020:	d329      	bcc.n	8002076 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	429a      	cmp	r2, r3
 8002028:	d225      	bcs.n	8002076 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8002032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002034:	2b00      	cmp	r3, #0
 8002036:	da02      	bge.n	800203e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203a:	425b      	negs	r3, r3
 800203c:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800203e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002040:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002042:	429a      	cmp	r2, r3
 8002044:	d917      	bls.n	8002076 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8002046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002048:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 800204a:	491b      	ldr	r1, [pc, #108]	@ (80020b8 <I2C_Compute_SCLL_SCLH+0x208>)
 800204c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3310      	adds	r3, #16
 800205a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800205c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800205e:	4916      	ldr	r1, [pc, #88]	@ (80020b8 <I2C_Compute_SCLL_SCLH+0x208>)
 8002060:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	330c      	adds	r3, #12
 800206e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002070:	601a      	str	r2, [r3, #0]
              ret = count;
 8002072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002074:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002078:	3301      	adds	r3, #1
 800207a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800207c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207e:	2bff      	cmp	r3, #255	@ 0xff
 8002080:	d999      	bls.n	8001fb6 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002084:	3301      	adds	r3, #1
 8002086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208a:	2bff      	cmp	r3, #255	@ 0xff
 800208c:	f67f af6f 	bls.w	8001f6e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002092:	3301      	adds	r3, #1
 8002094:	637b      	str	r3, [r7, #52]	@ 0x34
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <I2C_Compute_SCLL_SCLH+0x20c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800209c:	429a      	cmp	r2, r3
 800209e:	f4ff af56 	bcc.w	8001f4e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80020a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	374c      	adds	r7, #76	@ 0x4c
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	3b9aca00 	.word	0x3b9aca00
 80020b4:	08009b3c 	.word	0x08009b3c
 80020b8:	240000fc 	.word	0x240000fc
 80020bc:	24000afc 	.word	0x24000afc

080020c0 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	@ 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80020c8:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <I2C4_MspInit+0xd0>)
 80020ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ce:	4a30      	ldr	r2, [pc, #192]	@ (8002190 <I2C4_MspInit+0xd0>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002190 <I2C4_MspInit+0xd0>)
 80020da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80020e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002190 <I2C4_MspInit+0xd0>)
 80020e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ec:	4a28      	ldr	r2, [pc, #160]	@ (8002190 <I2C4_MspInit+0xd0>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f6:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <I2C4_MspInit+0xd0>)
 80020f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002108:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800210a:	2312      	movs	r3, #18
 800210c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002112:	2302      	movs	r3, #2
 8002114:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8002116:	2304      	movs	r3, #4
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	481c      	ldr	r0, [pc, #112]	@ (8002194 <I2C4_MspInit+0xd4>)
 8002122:	f002 fbc1 	bl	80048a8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8002126:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800212a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800212c:	2312      	movs	r3, #18
 800212e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002134:	2302      	movs	r3, #2
 8002136:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002138:	2304      	movs	r3, #4
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4814      	ldr	r0, [pc, #80]	@ (8002194 <I2C4_MspInit+0xd4>)
 8002144:	f002 fbb0 	bl	80048a8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8002148:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <I2C4_MspInit+0xd0>)
 800214a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800214e:	4a10      	ldr	r2, [pc, #64]	@ (8002190 <I2C4_MspInit+0xd0>)
 8002150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002154:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002158:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <I2C4_MspInit+0xd0>)
 800215a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800215e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <I2C4_MspInit+0xd0>)
 8002168:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800216c:	4a08      	ldr	r2, [pc, #32]	@ (8002190 <I2C4_MspInit+0xd0>)
 800216e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002172:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <I2C4_MspInit+0xd0>)
 8002178:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <I2C4_MspInit+0xd0>)
 800217e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002182:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	@ 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	58024400 	.word	0x58024400
 8002194:	58020c00 	.word	0x58020c00

08002198 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80021a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4619      	mov	r1, r3
 80021aa:	480b      	ldr	r0, [pc, #44]	@ (80021d8 <I2C4_MspDeInit+0x40>)
 80021ac:	f002 fd2c 	bl	8004c08 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80021b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4619      	mov	r1, r3
 80021ba:	4807      	ldr	r0, [pc, #28]	@ (80021d8 <I2C4_MspDeInit+0x40>)
 80021bc:	f002 fd24 	bl	8004c08 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <I2C4_MspDeInit+0x44>)
 80021c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <I2C4_MspDeInit+0x44>)
 80021c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	58020c00 	.word	0x58020c00
 80021dc:	58024400 	.word	0x58024400

080021e0 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	4603      	mov	r3, r0
 80021ea:	81fb      	strh	r3, [r7, #14]
 80021ec:	460b      	mov	r3, r1
 80021ee:	81bb      	strh	r3, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80021f4:	8978      	ldrh	r0, [r7, #10]
 80021f6:	89ba      	ldrh	r2, [r7, #12]
 80021f8:	89f9      	ldrh	r1, [r7, #14]
 80021fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	8b3b      	ldrh	r3, [r7, #24]
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4603      	mov	r3, r0
 800220a:	4807      	ldr	r0, [pc, #28]	@ (8002228 <I2C4_WriteReg+0x48>)
 800220c:	f002 fef4 	bl	8004ff8 <HAL_I2C_Mem_Write>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002216:	2300      	movs	r3, #0
 8002218:	e001      	b.n	800221e <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800221a:	f06f 0307 	mvn.w	r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	24000b00 	.word	0x24000b00

0800222c <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af04      	add	r7, sp, #16
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	4603      	mov	r3, r0
 8002236:	81fb      	strh	r3, [r7, #14]
 8002238:	460b      	mov	r3, r1
 800223a:	81bb      	strh	r3, [r7, #12]
 800223c:	4613      	mov	r3, r2
 800223e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002240:	8978      	ldrh	r0, [r7, #10]
 8002242:	89ba      	ldrh	r2, [r7, #12]
 8002244:	89f9      	ldrh	r1, [r7, #14]
 8002246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	8b3b      	ldrh	r3, [r7, #24]
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	4603      	mov	r3, r0
 8002256:	4807      	ldr	r0, [pc, #28]	@ (8002274 <I2C4_ReadReg+0x48>)
 8002258:	f002 ffe2 	bl	8005220 <HAL_I2C_Mem_Read>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002262:	2300      	movs	r3, #0
 8002264:	e001      	b.n	800226a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002266:	f06f 0307 	mvn.w	r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	24000b00 	.word	0x24000b00

08002278 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af02      	add	r7, sp, #8
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002282:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800228c:	2200      	movs	r2, #0
 800228e:	6839      	ldr	r1, [r7, #0]
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f805 	bl	80022a0 <BSP_LCD_InitEx>
 8002296:	4603      	mov	r3, r0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b09e      	sub	sp, #120	@ 0x78
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d808      	bhi.n	80022ce <BSP_LCD_InitEx+0x2e>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <BSP_LCD_InitEx+0x2e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d006      	beq.n	80022d6 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022ce:	f06f 0301 	mvn.w	r3, #1
 80022d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80022d4:	e0a8      	b.n	8002428 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d109      	bne.n	80022f0 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80022dc:	2302      	movs	r3, #2
 80022de:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 80022e0:	4a54      	ldr	r2, [pc, #336]	@ (8002434 <BSP_LCD_InitEx+0x194>)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015b      	lsls	r3, r3, #5
 80022e6:	4413      	add	r3, r2
 80022e8:	3310      	adds	r3, #16
 80022ea:	2202      	movs	r2, #2
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e008      	b.n	8002302 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 80022f0:	2300      	movs	r3, #0
 80022f2:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 80022f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002434 <BSP_LCD_InitEx+0x194>)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015b      	lsls	r3, r3, #5
 80022fa:	4413      	add	r3, r2
 80022fc:	3310      	adds	r3, #16
 80022fe:	2204      	movs	r2, #4
 8002300:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8002302:	4a4c      	ldr	r2, [pc, #304]	@ (8002434 <BSP_LCD_InitEx+0x194>)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	015b      	lsls	r3, r3, #5
 8002308:	4413      	add	r3, r2
 800230a:	330c      	adds	r3, #12
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8002310:	4a48      	ldr	r2, [pc, #288]	@ (8002434 <BSP_LCD_InitEx+0x194>)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	015b      	lsls	r3, r3, #5
 8002316:	4413      	add	r3, r2
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 800231c:	4a45      	ldr	r2, [pc, #276]	@ (8002434 <BSP_LCD_InitEx+0x194>)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	015b      	lsls	r3, r3, #5
 8002322:	4413      	add	r3, r2
 8002324:	3304      	adds	r3, #4
 8002326:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800232a:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 800232c:	4b42      	ldr	r3, [pc, #264]	@ (8002438 <BSP_LCD_InitEx+0x198>)
 800232e:	4a43      	ldr	r2, [pc, #268]	@ (800243c <BSP_LCD_InitEx+0x19c>)
 8002330:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8002332:	4b43      	ldr	r3, [pc, #268]	@ (8002440 <BSP_LCD_InitEx+0x1a0>)
 8002334:	4a43      	ldr	r2, [pc, #268]	@ (8002444 <BSP_LCD_InitEx+0x1a4>)
 8002336:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8002338:	483f      	ldr	r0, [pc, #252]	@ (8002438 <BSP_LCD_InitEx+0x198>)
 800233a:	f000 fd1b 	bl	8002d74 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 800233e:	4840      	ldr	r0, [pc, #256]	@ (8002440 <BSP_LCD_InitEx+0x1a0>)
 8002340:	f000 fde4 	bl	8002f0c <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8002344:	4b40      	ldr	r3, [pc, #256]	@ (8002448 <BSP_LCD_InitEx+0x1a8>)
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8002348:	4b40      	ldr	r3, [pc, #256]	@ (800244c <BSP_LCD_InitEx+0x1ac>)
 800234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 800234c:	2370      	movs	r3, #112	@ 0x70
 800234e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8002350:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002354:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f7fd ffbc 	bl	80002d8 <FT5336_RegisterBusIO>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	da03      	bge.n	800236e <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002366:	f06f 0304 	mvn.w	r3, #4
 800236a:	677b      	str	r3, [r7, #116]	@ 0x74
 800236c:	e02b      	b.n	80023c6 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 800236e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002372:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe f8a7 	bl	80004cc <FT5336_ReadID>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	da03      	bge.n	800238c <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002384:	f06f 0304 	mvn.w	r3, #4
 8002388:	677b      	str	r3, [r7, #116]	@ 0x74
 800238a:	e01c      	b.n	80023c6 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 800238c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800238e:	2b51      	cmp	r3, #81	@ 0x51
 8002390:	d003      	beq.n	800239a <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002392:	f06f 0306 	mvn.w	r3, #6
 8002396:	677b      	str	r3, [r7, #116]	@ 0x74
 8002398:	e015      	b.n	80023c6 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800239a:	4827      	ldr	r0, [pc, #156]	@ (8002438 <BSP_LCD_InitEx+0x198>)
 800239c:	f000 f8e8 	bl	8002570 <MX_LTDC_ClockConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80023a6:	f06f 0303 	mvn.w	r3, #3
 80023aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80023ac:	e00b      	b.n	80023c6 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 80023ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	4820      	ldr	r0, [pc, #128]	@ (8002438 <BSP_LCD_InitEx+0x198>)
 80023b6:	f000 f84d 	bl	8002454 <MX_LTDC_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80023c0:	f06f 0303 	mvn.w	r3, #3
 80023c4:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 80023c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d12d      	bne.n	8002428 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80023cc:	2000      	movs	r0, #0
 80023ce:	f000 fe2f 	bl	8003030 <BSP_SDRAM_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80023d8:	f06f 0303 	mvn.w	r3, #3
 80023dc:	e025      	b.n	800242a <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 80023ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023ee:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 80023f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 80023f4:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80023f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	461a      	mov	r2, r3
 8002400:	2100      	movs	r1, #0
 8002402:	480d      	ldr	r0, [pc, #52]	@ (8002438 <BSP_LCD_InitEx+0x198>)
 8002404:	f000 f872 	bl	80024ec <MX_LTDC_ConfigLayer>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800240e:	f06f 0303 	mvn.w	r3, #3
 8002412:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 8002414:	480e      	ldr	r0, [pc, #56]	@ (8002450 <BSP_LCD_InitEx+0x1b0>)
 8002416:	f000 fde1 	bl	8002fdc <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 800241a:	4a06      	ldr	r2, [pc, #24]	@ (8002434 <BSP_LCD_InitEx+0x194>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	015b      	lsls	r3, r3, #5
 8002420:	4413      	add	r3, r2
 8002422:	3318      	adds	r3, #24
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8002428:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 800242a:	4618      	mov	r0, r3
 800242c:	3778      	adds	r7, #120	@ 0x78
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	24000cb0 	.word	0x24000cb0
 8002438:	24000c08 	.word	0x24000c08
 800243c:	50001000 	.word	0x50001000
 8002440:	24000ba0 	.word	0x24000ba0
 8002444:	52001000 	.word	0x52001000
 8002448:	080019cd 	.word	0x080019cd
 800244c:	08001b69 	.word	0x08001b69
 8002450:	24000b54 	.word	0x24000b54

08002454 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a21      	ldr	r2, [pc, #132]	@ (80024e8 <MX_LTDC_Init+0x94>)
 8002464:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2228      	movs	r2, #40	@ 0x28
 8002482:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	222a      	movs	r2, #42	@ 0x2a
 8002488:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f103 0235 	add.w	r2, r3, #53	@ 0x35
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2209      	movs	r2, #9
 80024a2:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	220b      	movs	r2, #11
 80024a8:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f103 020b 	add.w	r2, r3, #11
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f103 020d 	add.w	r2, r3, #13
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	22ff      	movs	r2, #255	@ 0xff
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	22ff      	movs	r2, #255	@ 0xff
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	22ff      	movs	r2, #255	@ 0xff
 80024d2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f003 fb26 	bl	8005b28 <HAL_LTDC_Init>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	50001000 	.word	0x50001000

080024ec <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b092      	sub	sp, #72	@ 0x48
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 8002516:	23ff      	movs	r3, #255	@ 0xff
 8002518:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800251e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002524:	2307      	movs	r3, #7
 8002526:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	4619      	mov	r1, r3
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f003 fbbb 	bl	8005cdc <HAL_LTDC_ConfigLayer>
 8002566:	4603      	mov	r3, r0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3748      	adds	r7, #72	@ 0x48
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b0b2      	sub	sp, #200	@ 0xc8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8002578:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002584:	2305      	movs	r3, #5
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8002588:	23a0      	movs	r3, #160	@ 0xa0
 800258a:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800258c:	2302      	movs	r3, #2
 800258e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002590:	2302      	movs	r3, #2
 8002592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002594:	2353      	movs	r3, #83	@ 0x53
 8002596:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80025a0:	f107 0308 	add.w	r3, r7, #8
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 ff0f 	bl	80073c8 <HAL_RCCEx_PeriphCLKConfig>
 80025aa:	4603      	mov	r3, r0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	37c8      	adds	r7, #200	@ 0xc8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80025c8:	f06f 0301 	mvn.w	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e007      	b.n	80025e0 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80025d0:	4a07      	ldr	r2, [pc, #28]	@ (80025f0 <BSP_LCD_GetPixelFormat+0x3c>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	015b      	lsls	r3, r3, #5
 80025d6:	4413      	add	r3, r2
 80025d8:	330c      	adds	r3, #12
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	24000cb0 	.word	0x24000cb0

080025f4 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002608:	f06f 0301 	mvn.w	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	e006      	b.n	800261e <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8002610:	4a06      	ldr	r2, [pc, #24]	@ (800262c <BSP_LCD_SetActiveLayer+0x38>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	015b      	lsls	r3, r3, #5
 8002616:	4413      	add	r3, r2
 8002618:	3308      	adds	r3, #8
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	24000cb0 	.word	0x24000cb0

08002630 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002644:	f06f 0301 	mvn.w	r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e006      	b.n	800265a <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800264c:	4a06      	ldr	r2, [pc, #24]	@ (8002668 <BSP_LCD_GetXSize+0x38>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	015b      	lsls	r3, r3, #5
 8002652:	4413      	add	r3, r2
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	24000cb0 	.word	0x24000cb0

0800266c <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002680:	f06f 0301 	mvn.w	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e007      	b.n	8002698 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <BSP_LCD_GetYSize+0x3c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	015b      	lsls	r3, r3, #5
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002698:	68fb      	ldr	r3, [r7, #12]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	24000cb0 	.word	0x24000cb0

080026ac <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08e      	sub	sp, #56	@ 0x38
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	330a      	adds	r3, #10
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	330b      	adds	r3, #11
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	441a      	add	r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	441a      	add	r2, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	330d      	adds	r3, #13
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	4413      	add	r3, r2
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	3312      	adds	r3, #18
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3313      	adds	r3, #19
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	441a      	add	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	3314      	adds	r3, #20
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	441a      	add	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	3315      	adds	r3, #21
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	4413      	add	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	3316      	adds	r3, #22
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3317      	adds	r3, #23
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	441a      	add	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	3318      	adds	r3, #24
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	441a      	add	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	3319      	adds	r3, #25
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	4413      	add	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	331c      	adds	r3, #28
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	331d      	adds	r3, #29
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	4413      	add	r3, r2
 8002748:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800274a:	4a37      	ldr	r2, [pc, #220]	@ (8002828 <BSP_LCD_DrawBitmap+0x17c>)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	015b      	lsls	r3, r3, #5
 8002750:	4413      	add	r3, r2
 8002752:	3308      	adds	r3, #8
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a35      	ldr	r2, [pc, #212]	@ (800282c <BSP_LCD_DrawBitmap+0x180>)
 8002758:	2134      	movs	r1, #52	@ 0x34
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	4413      	add	r3, r2
 8002760:	335c      	adds	r3, #92	@ 0x5c
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4930      	ldr	r1, [pc, #192]	@ (8002828 <BSP_LCD_DrawBitmap+0x17c>)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015b      	lsls	r3, r3, #5
 800276a:	440b      	add	r3, r1
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	fb03 f101 	mul.w	r1, r3, r1
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	440b      	add	r3, r1
 8002778:	482b      	ldr	r0, [pc, #172]	@ (8002828 <BSP_LCD_DrawBitmap+0x17c>)
 800277a:	68f9      	ldr	r1, [r7, #12]
 800277c:	0149      	lsls	r1, r1, #5
 800277e:	4401      	add	r1, r0
 8002780:	3110      	adds	r1, #16
 8002782:	6809      	ldr	r1, [r1, #0]
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	3b20      	subs	r3, #32
 8002790:	2b07      	cmp	r3, #7
 8002792:	d802      	bhi.n	800279a <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
 8002798:	e008      	b.n	80027ac <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	3b10      	subs	r3, #16
 800279e:	2b07      	cmp	r3, #7
 80027a0:	d802      	bhi.n	80027a8 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 80027a2:	2302      	movs	r3, #2
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027a6:	e001      	b.n	80027ac <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 80027a8:	2301      	movs	r3, #1
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	08d2      	lsrs	r2, r2, #3
 80027ba:	fb03 f202 	mul.w	r2, r3, r2
 80027be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c0:	4413      	add	r3, r2
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027cc:	e023      	b.n	8002816 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 80027ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6a39      	ldr	r1, [r7, #32]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fa77 	bl	8002ccc <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80027de:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <BSP_LCD_DrawBitmap+0x17c>)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	015b      	lsls	r3, r3, #5
 80027e4:	4413      	add	r3, r2
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	490f      	ldr	r1, [pc, #60]	@ (8002828 <BSP_LCD_DrawBitmap+0x17c>)
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	0152      	lsls	r2, r2, #5
 80027ee:	440a      	add	r2, r1
 80027f0:	3210      	adds	r2, #16
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027fa:	4413      	add	r3, r2
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	08db      	lsrs	r3, r3, #3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	425b      	negs	r3, r3
 800280a:	6a3a      	ldr	r2, [r7, #32]
 800280c:	4413      	add	r3, r2
 800280e:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8002810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002812:	3301      	adds	r3, #1
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3d7      	bcc.n	80027ce <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 800281e:	69fb      	ldr	r3, [r7, #28]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3730      	adds	r7, #48	@ 0x30
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	24000cb0 	.word	0x24000cb0
 800282c:	24000c08 	.word	0x24000c08

08002830 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e032      	b.n	80028ae <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	e028      	b.n	80028a0 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	3301      	adds	r3, #1
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	431a      	orrs	r2, r3
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	3302      	adds	r3, #2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	431a      	orrs	r2, r3
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	3303      	adds	r3, #3
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	061b      	lsls	r3, r3, #24
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	18d1      	adds	r1, r2, r3
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	441a      	add	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f95e 	bl	8002b44 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8002888:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <BSP_LCD_FillRGBRect+0x90>)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	015b      	lsls	r3, r3, #5
 800288e:	4413      	add	r3, r2
 8002890:	3310      	adds	r3, #16
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4413      	add	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3d2      	bcc.n	800284e <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	3301      	adds	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d3c8      	bcc.n	8002848 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	24000cb0 	.word	0x24000cb0

080028c4 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80028d2:	4a21      	ldr	r2, [pc, #132]	@ (8002958 <BSP_LCD_DrawHLine+0x94>)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	015b      	lsls	r3, r3, #5
 80028d8:	4413      	add	r3, r2
 80028da:	3308      	adds	r3, #8
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1f      	ldr	r2, [pc, #124]	@ (800295c <BSP_LCD_DrawHLine+0x98>)
 80028e0:	2134      	movs	r1, #52	@ 0x34
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	335c      	adds	r3, #92	@ 0x5c
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	491a      	ldr	r1, [pc, #104]	@ (8002958 <BSP_LCD_DrawHLine+0x94>)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	015b      	lsls	r3, r3, #5
 80028f2:	440b      	add	r3, r1
 80028f4:	3310      	adds	r3, #16
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4817      	ldr	r0, [pc, #92]	@ (8002958 <BSP_LCD_DrawHLine+0x94>)
 80028fa:	68f9      	ldr	r1, [r7, #12]
 80028fc:	0149      	lsls	r1, r1, #5
 80028fe:	4401      	add	r1, r0
 8002900:	6809      	ldr	r1, [r1, #0]
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	fb01 f000 	mul.w	r0, r1, r0
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	4401      	add	r1, r0
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	441a      	add	r2, r3
 800291a:	490f      	ldr	r1, [pc, #60]	@ (8002958 <BSP_LCD_DrawHLine+0x94>)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	015b      	lsls	r3, r3, #5
 8002920:	440b      	add	r3, r1
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d907      	bls.n	8002938 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8002928:	4a0b      	ldr	r2, [pc, #44]	@ (8002958 <BSP_LCD_DrawHLine+0x94>)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	015b      	lsls	r3, r3, #5
 800292e:	4413      	add	r3, r2
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002938:	6979      	ldr	r1, [r7, #20]
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	2300      	movs	r3, #0
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2301      	movs	r3, #1
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f956 	bl	8002bf8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	24000cb0 	.word	0x24000cb0
 800295c:	24000c08 	.word	0x24000c08

08002960 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800296e:	4a24      	ldr	r2, [pc, #144]	@ (8002a00 <BSP_LCD_DrawVLine+0xa0>)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	015b      	lsls	r3, r3, #5
 8002974:	4413      	add	r3, r2
 8002976:	3308      	adds	r3, #8
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a22      	ldr	r2, [pc, #136]	@ (8002a04 <BSP_LCD_DrawVLine+0xa4>)
 800297c:	2134      	movs	r1, #52	@ 0x34
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	335c      	adds	r3, #92	@ 0x5c
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	491d      	ldr	r1, [pc, #116]	@ (8002a00 <BSP_LCD_DrawVLine+0xa0>)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015b      	lsls	r3, r3, #5
 800298e:	440b      	add	r3, r1
 8002990:	3310      	adds	r3, #16
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	481a      	ldr	r0, [pc, #104]	@ (8002a00 <BSP_LCD_DrawVLine+0xa0>)
 8002996:	68f9      	ldr	r1, [r7, #12]
 8002998:	0149      	lsls	r1, r1, #5
 800299a:	4401      	add	r1, r0
 800299c:	6809      	ldr	r1, [r1, #0]
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	fb01 f000 	mul.w	r0, r1, r0
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	4401      	add	r1, r0
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	441a      	add	r2, r3
 80029b6:	4912      	ldr	r1, [pc, #72]	@ (8002a00 <BSP_LCD_DrawVLine+0xa0>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	440b      	add	r3, r1
 80029be:	3304      	adds	r3, #4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d908      	bls.n	80029d8 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80029c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a00 <BSP_LCD_DrawVLine+0xa0>)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015b      	lsls	r3, r3, #5
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80029d8:	6979      	ldr	r1, [r7, #20]
 80029da:	4a09      	ldr	r2, [pc, #36]	@ (8002a00 <BSP_LCD_DrawVLine+0xa0>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	4413      	add	r3, r2
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	6a3a      	ldr	r2, [r7, #32]
 80029e8:	9201      	str	r2, [sp, #4]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f901 	bl	8002bf8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	24000cb0 	.word	0x24000cb0
 8002a04:	24000c08 	.word	0x24000c08

08002a08 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002a16:	4a1b      	ldr	r2, [pc, #108]	@ (8002a84 <BSP_LCD_FillRect+0x7c>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015b      	lsls	r3, r3, #5
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3308      	adds	r3, #8
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a19      	ldr	r2, [pc, #100]	@ (8002a88 <BSP_LCD_FillRect+0x80>)
 8002a24:	2134      	movs	r1, #52	@ 0x34
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	335c      	adds	r3, #92	@ 0x5c
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4914      	ldr	r1, [pc, #80]	@ (8002a84 <BSP_LCD_FillRect+0x7c>)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	015b      	lsls	r3, r3, #5
 8002a36:	440b      	add	r3, r1
 8002a38:	3310      	adds	r3, #16
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4811      	ldr	r0, [pc, #68]	@ (8002a84 <BSP_LCD_FillRect+0x7c>)
 8002a3e:	68f9      	ldr	r1, [r7, #12]
 8002a40:	0149      	lsls	r1, r1, #5
 8002a42:	4401      	add	r1, r0
 8002a44:	6809      	ldr	r1, [r1, #0]
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	fb01 f000 	mul.w	r0, r1, r0
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4401      	add	r1, r0
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002a58:	6979      	ldr	r1, [r7, #20]
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <BSP_LCD_FillRect+0x7c>)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	015b      	lsls	r3, r3, #5
 8002a60:	4413      	add	r3, r2
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6a:	9201      	str	r2, [sp, #4]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f8c0 	bl	8002bf8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	24000cb0 	.word	0x24000cb0
 8002a88:	24000c08 	.word	0x24000c08

08002a8c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002a9a:	4a28      	ldr	r2, [pc, #160]	@ (8002b3c <BSP_LCD_ReadPixel+0xb0>)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015b      	lsls	r3, r3, #5
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a26      	ldr	r2, [pc, #152]	@ (8002b40 <BSP_LCD_ReadPixel+0xb4>)
 8002aa8:	2134      	movs	r1, #52	@ 0x34
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3348      	adds	r3, #72	@ 0x48
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11c      	bne.n	8002af2 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002ab8:	4a20      	ldr	r2, [pc, #128]	@ (8002b3c <BSP_LCD_ReadPixel+0xb0>)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	015b      	lsls	r3, r3, #5
 8002abe:	4413      	add	r3, r2
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b40 <BSP_LCD_ReadPixel+0xb4>)
 8002ac6:	2134      	movs	r1, #52	@ 0x34
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	335c      	adds	r3, #92	@ 0x5c
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	491a      	ldr	r1, [pc, #104]	@ (8002b3c <BSP_LCD_ReadPixel+0xb0>)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	015b      	lsls	r3, r3, #5
 8002ad8:	440b      	add	r3, r1
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	fb03 f101 	mul.w	r1, r3, r1
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	440b      	add	r3, r1
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e01d      	b.n	8002b2e <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002af2:	4a12      	ldr	r2, [pc, #72]	@ (8002b3c <BSP_LCD_ReadPixel+0xb0>)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	015b      	lsls	r3, r3, #5
 8002af8:	4413      	add	r3, r2
 8002afa:	3308      	adds	r3, #8
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a10      	ldr	r2, [pc, #64]	@ (8002b40 <BSP_LCD_ReadPixel+0xb4>)
 8002b00:	2134      	movs	r1, #52	@ 0x34
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	335c      	adds	r3, #92	@ 0x5c
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	490b      	ldr	r1, [pc, #44]	@ (8002b3c <BSP_LCD_ReadPixel+0xb0>)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	015b      	lsls	r3, r3, #5
 8002b12:	440b      	add	r3, r1
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	fb03 f101 	mul.w	r1, r3, r1
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	440b      	add	r3, r1
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	24000cb0 	.word	0x24000cb0
 8002b40:	24000c08 	.word	0x24000c08

08002b44 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002b52:	4a27      	ldr	r2, [pc, #156]	@ (8002bf0 <BSP_LCD_WritePixel+0xac>)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	015b      	lsls	r3, r3, #5
 8002b58:	4413      	add	r3, r2
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	@ (8002bf4 <BSP_LCD_WritePixel+0xb0>)
 8002b60:	2134      	movs	r1, #52	@ 0x34
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3348      	adds	r3, #72	@ 0x48
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d11c      	bne.n	8002baa <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8002b70:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf0 <BSP_LCD_WritePixel+0xac>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	015b      	lsls	r3, r3, #5
 8002b76:	4413      	add	r3, r2
 8002b78:	3308      	adds	r3, #8
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf4 <BSP_LCD_WritePixel+0xb0>)
 8002b7e:	2134      	movs	r1, #52	@ 0x34
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	335c      	adds	r3, #92	@ 0x5c
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4919      	ldr	r1, [pc, #100]	@ (8002bf0 <BSP_LCD_WritePixel+0xac>)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	015b      	lsls	r3, r3, #5
 8002b90:	440b      	add	r3, r1
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	fb03 f101 	mul.w	r1, r3, r1
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	440b      	add	r3, r1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e01b      	b.n	8002be2 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8002baa:	4a11      	ldr	r2, [pc, #68]	@ (8002bf0 <BSP_LCD_WritePixel+0xac>)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	015b      	lsls	r3, r3, #5
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf4 <BSP_LCD_WritePixel+0xb0>)
 8002bb8:	2134      	movs	r1, #52	@ 0x34
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	335c      	adds	r3, #92	@ 0x5c
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	490a      	ldr	r1, [pc, #40]	@ (8002bf0 <BSP_LCD_WritePixel+0xac>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	015b      	lsls	r3, r3, #5
 8002bca:	440b      	add	r3, r1
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	fb03 f101 	mul.w	r1, r3, r1
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	440b      	add	r3, r1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b292      	uxth	r2, r2
 8002be0:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	24000cb0 	.word	0x24000cb0
 8002bf4:	24000c08 	.word	0x24000c08

08002bf8 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002cc0 <LL_FillBuffer+0xc8>)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	015b      	lsls	r3, r3, #5
 8002c10:	4413      	add	r3, r2
 8002c12:	330c      	adds	r3, #12
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d129      	bne.n	8002c6e <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	0adb      	lsrs	r3, r3, #11
 8002c22:	f003 021f 	and.w	r2, r3, #31
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	3317      	adds	r3, #23
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	0419      	lsls	r1, r3, #16
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c3e:	4613      	mov	r3, r2
 8002c40:	01db      	lsls	r3, r3, #7
 8002c42:	4413      	add	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	3321      	adds	r3, #33	@ 0x21
 8002c4a:	099b      	lsrs	r3, r3, #6
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4319      	orrs	r1, r3
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	f003 021f 	and.w	r2, r3, #31
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	4413      	add	r3, r2
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	3317      	adds	r3, #23
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	430b      	orrs	r3, r1
 8002c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c6a:	613b      	str	r3, [r7, #16]
    break;
 8002c6c:	e002      	b.n	8002c74 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
    break;
 8002c72:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8002c74:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <LL_FillBuffer+0xcc>)
 8002c76:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c7a:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002c7c:	4a11      	ldr	r2, [pc, #68]	@ (8002cc4 <LL_FillBuffer+0xcc>)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <LL_FillBuffer+0xcc>)
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8002c88:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <LL_FillBuffer+0xcc>)
 8002c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc8 <LL_FillBuffer+0xd0>)
 8002c8c:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002c8e:	480d      	ldr	r0, [pc, #52]	@ (8002cc4 <LL_FillBuffer+0xcc>)
 8002c90:	f001 fb04 	bl	800429c <HAL_DMA2D_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10e      	bne.n	8002cb8 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6939      	ldr	r1, [r7, #16]
 8002ca4:	4807      	ldr	r0, [pc, #28]	@ (8002cc4 <LL_FillBuffer+0xcc>)
 8002ca6:	f001 fb67 	bl	8004378 <HAL_DMA2D_Start>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8002cb0:	2132      	movs	r1, #50	@ 0x32
 8002cb2:	4804      	ldr	r0, [pc, #16]	@ (8002cc4 <LL_FillBuffer+0xcc>)
 8002cb4:	f001 fb8b 	bl	80043ce <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	24000cb0 	.word	0x24000cb0
 8002cc4:	24000ba0 	.word	0x24000ba0
 8002cc8:	52001000 	.word	0x52001000

08002ccc <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002cda:	4a23      	ldr	r2, [pc, #140]	@ (8002d68 <LL_ConvertLineToRGB+0x9c>)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015b      	lsls	r3, r3, #5
 8002ce0:	4413      	add	r3, r2
 8002ce2:	330c      	adds	r3, #12
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d102      	bne.n	8002cf0 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002cea:	2302      	movs	r3, #2
 8002cec:	617b      	str	r3, [r7, #20]
    break;
 8002cee:	e002      	b.n	8002cf6 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
    break;
 8002cf4:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002cf8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cfc:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8002d04:	4b19      	ldr	r3, [pc, #100]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002d0a:	4b18      	ldr	r3, [pc, #96]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8002d10:	4b16      	ldr	r3, [pc, #88]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d12:	22ff      	movs	r2, #255	@ 0xff
 8002d14:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8002d16:	4a15      	ldr	r2, [pc, #84]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8002d1c:	4b13      	ldr	r3, [pc, #76]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 8002d22:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d24:	4a12      	ldr	r2, [pc, #72]	@ (8002d70 <LL_ConvertLineToRGB+0xa4>)
 8002d26:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002d28:	4810      	ldr	r0, [pc, #64]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d2a:	f001 fab7 	bl	800429c <HAL_DMA2D_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d115      	bne.n	8002d60 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8002d34:	2101      	movs	r1, #1
 8002d36:	480d      	ldr	r0, [pc, #52]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d38:	f001 fc32 	bl	80045a0 <HAL_DMA2D_ConfigLayer>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10e      	bne.n	8002d60 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	2301      	movs	r3, #1
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	4807      	ldr	r0, [pc, #28]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d4e:	f001 fb13 	bl	8004378 <HAL_DMA2D_Start>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8002d58:	2132      	movs	r1, #50	@ 0x32
 8002d5a:	4804      	ldr	r0, [pc, #16]	@ (8002d6c <LL_ConvertLineToRGB+0xa0>)
 8002d5c:	f001 fb37 	bl	80043ce <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	24000cb0 	.word	0x24000cb0
 8002d6c:	24000ba0 	.word	0x24000ba0
 8002d70:	52001000 	.word	0x52001000

08002d74 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08e      	sub	sp, #56	@ 0x38
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5b      	ldr	r2, [pc, #364]	@ (8002ef0 <LTDC_MspInit+0x17c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	f040 80b0 	bne.w	8002ee8 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002d88:	4b5a      	ldr	r3, [pc, #360]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002d8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d8e:	4a59      	ldr	r2, [pc, #356]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002d90:	f043 0308 	orr.w	r3, r3, #8
 8002d94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002d98:	4b56      	ldr	r3, [pc, #344]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002d9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	623b      	str	r3, [r7, #32]
 8002da4:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002da6:	4b53      	ldr	r3, [pc, #332]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dac:	4a51      	ldr	r2, [pc, #324]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002db6:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dca:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002dcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dd4:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002de2:	4b44      	ldr	r3, [pc, #272]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002de8:	4a42      	ldr	r2, [pc, #264]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002df2:	4b40      	ldr	r3, [pc, #256]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e00:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e06:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e10:	4b38      	ldr	r3, [pc, #224]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1e:	4b35      	ldr	r3, [pc, #212]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e24:	4a33      	ldr	r2, [pc, #204]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002e26:	f043 0308 	orr.w	r3, r3, #8
 8002e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e2e:	4b31      	ldr	r3, [pc, #196]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8002e3c:	f24d 2303 	movw	r3, #53763	@ 0xd203
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002e4e:	230e      	movs	r3, #14
 8002e50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e56:	4619      	mov	r1, r3
 8002e58:	4827      	ldr	r0, [pc, #156]	@ (8002ef8 <LTDC_MspInit+0x184>)
 8002e5a:	f001 fd25 	bl	80048a8 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
 8002e5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002e64:	230e      	movs	r3, #14
 8002e66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8002e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4823      	ldr	r0, [pc, #140]	@ (8002efc <LTDC_MspInit+0x188>)
 8002e70:	f001 fd1a 	bl	80048a8 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002e74:	23ff      	movs	r3, #255	@ 0xff
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002e78:	230e      	movs	r3, #14
 8002e7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e80:	4619      	mov	r1, r3
 8002e82:	481f      	ldr	r0, [pc, #124]	@ (8002f00 <LTDC_MspInit+0x18c>)
 8002e84:	f001 fd10 	bl	80048a8 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8002e88:	f240 2302 	movw	r3, #514	@ 0x202
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002e96:	2302      	movs	r3, #2
 8002e98:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002e9a:	230e      	movs	r3, #14
 8002e9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002e9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4817      	ldr	r0, [pc, #92]	@ (8002f04 <LTDC_MspInit+0x190>)
 8002ea6:	f001 fcff 	bl	80048a8 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4813      	ldr	r0, [pc, #76]	@ (8002f08 <LTDC_MspInit+0x194>)
 8002eba:	f001 fcf5 	bl	80048a8 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	2180      	movs	r1, #128	@ 0x80
 8002ec2:	4811      	ldr	r0, [pc, #68]	@ (8002f08 <LTDC_MspInit+0x194>)
 8002ec4:	f001 ffaa 	bl	8004e1c <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ece:	4a09      	ldr	r2, [pc, #36]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002ed0:	f043 0308 	orr.w	r3, r3, #8
 8002ed4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8002ed8:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ede:	4a05      	ldr	r2, [pc, #20]	@ (8002ef4 <LTDC_MspInit+0x180>)
 8002ee0:	f023 0308 	bic.w	r3, r3, #8
 8002ee4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3738      	adds	r7, #56	@ 0x38
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	50001000 	.word	0x50001000
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	58022000 	.word	0x58022000
 8002efc:	58022400 	.word	0x58022400
 8002f00:	58022800 	.word	0x58022800
 8002f04:	58021c00 	.word	0x58021c00
 8002f08:	58020c00 	.word	0x58020c00

08002f0c <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a11      	ldr	r2, [pc, #68]	@ (8002f60 <DMA2D_MspInit+0x54>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d11a      	bne.n	8002f54 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f1e:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <DMA2D_MspInit+0x58>)
 8002f20:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002f24:	4a0f      	ldr	r2, [pc, #60]	@ (8002f64 <DMA2D_MspInit+0x58>)
 8002f26:	f043 0310 	orr.w	r3, r3, #16
 8002f2a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <DMA2D_MspInit+0x58>)
 8002f30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002f3c:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <DMA2D_MspInit+0x58>)
 8002f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f40:	4a08      	ldr	r2, [pc, #32]	@ (8002f64 <DMA2D_MspInit+0x58>)
 8002f42:	f043 0310 	orr.w	r3, r3, #16
 8002f46:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <DMA2D_MspInit+0x58>)
 8002f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f4c:	4a05      	ldr	r2, [pc, #20]	@ (8002f64 <DMA2D_MspInit+0x58>)
 8002f4e:	f023 0310 	bic.w	r3, r3, #16
 8002f52:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	52001000 	.word	0x52001000
 8002f64:	58024400 	.word	0x58024400

08002f68 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	@ 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002f70:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <TIMx_PWM_MspInit+0x6c>)
 8002f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f76:	4a17      	ldr	r2, [pc, #92]	@ (8002fd4 <TIMx_PWM_MspInit+0x6c>)
 8002f78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f80:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <TIMx_PWM_MspInit+0x6c>)
 8002f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8002f8e:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <TIMx_PWM_MspInit+0x6c>)
 8002f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f94:	4a0f      	ldr	r2, [pc, #60]	@ (8002fd4 <TIMx_PWM_MspInit+0x6c>)
 8002f96:	f043 0302 	orr.w	r3, r3, #2
 8002f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <TIMx_PWM_MspInit+0x6c>)
 8002fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4804      	ldr	r0, [pc, #16]	@ (8002fd8 <TIMx_PWM_MspInit+0x70>)
 8002fc8:	f001 fc6e 	bl	80048a8 <HAL_GPIO_Init>
}
 8002fcc:	bf00      	nop
 8002fce:	3728      	adds	r7, #40	@ 0x28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	58022800 	.word	0x58022800

08002fdc <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a11      	ldr	r2, [pc, #68]	@ (800302c <TIMx_PWM_Init+0x50>)
 8002fe8:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f005 ff2d 	bl	8008e4a <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ffb9 	bl	8002f68 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003002:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f005 febd 	bl	8008d9c <HAL_TIM_PWM_Init>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40010400 	.word	0x40010400

08003030 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8003042:	f06f 0301 	mvn.w	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e044      	b.n	80030d4 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2234      	movs	r2, #52	@ 0x34
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	4a23      	ldr	r2, [pc, #140]	@ (80030e0 <BSP_SDRAM_Init+0xb0>)
 8003054:	4413      	add	r3, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f892 	bl	8003180 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2234      	movs	r2, #52	@ 0x34
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	4a1e      	ldr	r2, [pc, #120]	@ (80030e0 <BSP_SDRAM_Init+0xb0>)
 8003066:	4413      	add	r3, r2
 8003068:	2210      	movs	r2, #16
 800306a:	2104      	movs	r1, #4
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f83b 	bl	80030e8 <MX_SDRAM_BANK2_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	e029      	b.n	80030d4 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8003080:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <BSP_SDRAM_Init+0xb4>)
 8003082:	2208      	movs	r2, #8
 8003084:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8003086:	4b17      	ldr	r3, [pc, #92]	@ (80030e4 <BSP_SDRAM_Init+0xb4>)
 8003088:	2203      	movs	r2, #3
 800308a:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800308c:	4b15      	ldr	r3, [pc, #84]	@ (80030e4 <BSP_SDRAM_Init+0xb4>)
 800308e:	f240 6203 	movw	r2, #1539	@ 0x603
 8003092:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8003094:	4b13      	ldr	r3, [pc, #76]	@ (80030e4 <BSP_SDRAM_Init+0xb4>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800309a:	4b12      	ldr	r3, [pc, #72]	@ (80030e4 <BSP_SDRAM_Init+0xb4>)
 800309c:	2200      	movs	r2, #0
 800309e:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 80030a0:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <BSP_SDRAM_Init+0xb4>)
 80030a2:	2230      	movs	r2, #48	@ 0x30
 80030a4:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 80030a6:	4b0f      	ldr	r3, [pc, #60]	@ (80030e4 <BSP_SDRAM_Init+0xb4>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 80030ac:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <BSP_SDRAM_Init+0xb4>)
 80030ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b2:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2234      	movs	r2, #52	@ 0x34
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	4a08      	ldr	r2, [pc, #32]	@ (80030e0 <BSP_SDRAM_Init+0xb0>)
 80030be:	4413      	add	r3, r2
 80030c0:	4908      	ldr	r1, [pc, #32]	@ (80030e4 <BSP_SDRAM_Init+0xb4>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fc68 	bl	8000998 <MT48LC4M32B2_Init>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80030ce:	f06f 0304 	mvn.w	r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80030d4:	68fb      	ldr	r3, [r7, #12]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	24000cd0 	.word	0x24000cd0
 80030e4:	24000d04 	.word	0x24000d04

080030e8 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08c      	sub	sp, #48	@ 0x30
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 80030f4:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <MX_SDRAM_BANK2_Init+0x90>)
 80030f6:	4a21      	ldr	r2, [pc, #132]	@ (800317c <MX_SDRAM_BANK2_Init+0x94>)
 80030f8:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003112:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <MX_SDRAM_BANK2_Init+0x90>)
 8003114:	2240      	movs	r2, #64	@ 0x40
 8003116:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800311e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800312c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003134:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800313c:	2302      	movs	r3, #2
 800313e:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003140:	2307      	movs	r3, #7
 8003142:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8003144:	2304      	movs	r3, #4
 8003146:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8003148:	2307      	movs	r3, #7
 800314a:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800314c:	2302      	movs	r3, #2
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
 8003150:	2302      	movs	r3, #2
 8003152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
 8003154:	2302      	movs	r3, #2
 8003156:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	4619      	mov	r1, r3
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f005 fca0 	bl	8008aa4 <HAL_SDRAM_Init>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3730      	adds	r7, #48	@ 0x30
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	24000cd0 	.word	0x24000cd0
 800317c:	52004140 	.word	0x52004140

08003180 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08e      	sub	sp, #56	@ 0x38
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003188:	4b73      	ldr	r3, [pc, #460]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 800318a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800318e:	4a72      	ldr	r2, [pc, #456]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 8003190:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003194:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003198:	4b6f      	ldr	r3, [pc, #444]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 800319a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800319e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a2:	623b      	str	r3, [r7, #32]
 80031a4:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80031a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 80031a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80031ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80031b6:	4b68      	ldr	r3, [pc, #416]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 80031b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c4:	4b64      	ldr	r3, [pc, #400]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ca:	4a63      	ldr	r2, [pc, #396]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 80031cc:	f043 0308 	orr.w	r3, r3, #8
 80031d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031d4:	4b60      	ldr	r3, [pc, #384]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 80031d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e8:	4a5b      	ldr	r2, [pc, #364]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 80031ea:	f043 0310 	orr.w	r3, r3, #16
 80031ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031f2:	4b59      	ldr	r3, [pc, #356]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 80031f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003200:	4b55      	ldr	r3, [pc, #340]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003206:	4a54      	ldr	r2, [pc, #336]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 8003208:	f043 0320 	orr.w	r3, r3, #32
 800320c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003210:	4b51      	ldr	r3, [pc, #324]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 8003212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800321e:	4b4e      	ldr	r3, [pc, #312]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 8003220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003224:	4a4c      	ldr	r2, [pc, #304]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 8003226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800322a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800322e:	4b4a      	ldr	r3, [pc, #296]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 8003230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800323c:	4b46      	ldr	r3, [pc, #280]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 800323e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003242:	4a45      	ldr	r2, [pc, #276]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 8003244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003248:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800324c:	4b42      	ldr	r3, [pc, #264]	@ (8003358 <SDRAM_MspInit+0x1d8>)
 800324e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800325e:	2301      	movs	r3, #1
 8003260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003262:	2303      	movs	r3, #3
 8003264:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003266:	230c      	movs	r3, #12
 8003268:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800326a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003274:	4619      	mov	r1, r3
 8003276:	4839      	ldr	r0, [pc, #228]	@ (800335c <SDRAM_MspInit+0x1dc>)
 8003278:	f001 fb16 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800327c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003286:	4619      	mov	r1, r3
 8003288:	4835      	ldr	r0, [pc, #212]	@ (8003360 <SDRAM_MspInit+0x1e0>)
 800328a:	f001 fb0d 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800328e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003298:	4619      	mov	r1, r3
 800329a:	4832      	ldr	r0, [pc, #200]	@ (8003364 <SDRAM_MspInit+0x1e4>)
 800329c:	f001 fb04 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80032a0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80032a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032aa:	4619      	mov	r1, r3
 80032ac:	482e      	ldr	r0, [pc, #184]	@ (8003368 <SDRAM_MspInit+0x1e8>)
 80032ae:	f001 fafb 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80032b2:	23e0      	movs	r3, #224	@ 0xe0
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80032b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ba:	4619      	mov	r1, r3
 80032bc:	482b      	ldr	r0, [pc, #172]	@ (800336c <SDRAM_MspInit+0x1ec>)
 80032be:	f001 faf3 	bl	80048a8 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 80032c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 80032c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80032c8:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80032ca:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 80032cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d0:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80032d2:	4b27      	ldr	r3, [pc, #156]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 80032d4:	2280      	movs	r2, #128	@ 0x80
 80032d6:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80032d8:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80032de:	4b24      	ldr	r3, [pc, #144]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 80032e0:	f240 2202 	movw	r2, #514	@ 0x202
 80032e4:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80032e6:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 80032e8:	f640 0208 	movw	r2, #2056	@ 0x808
 80032ec:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80032ee:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 80032f0:	2220      	movs	r2, #32
 80032f2:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80032f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 80032f6:	2280      	movs	r2, #128	@ 0x80
 80032f8:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80032fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 80032fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003300:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8003302:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 8003304:	2200      	movs	r2, #0
 8003306:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8003308:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800330e:	4b18      	ldr	r3, [pc, #96]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 8003310:	2280      	movs	r2, #128	@ 0x80
 8003312:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003314:	4b16      	ldr	r3, [pc, #88]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 8003316:	2200      	movs	r2, #0
 8003318:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800331a:	4b15      	ldr	r3, [pc, #84]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 800331c:	2200      	movs	r2, #0
 800331e:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8003320:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 8003322:	4a14      	ldr	r2, [pc, #80]	@ (8003374 <SDRAM_MspInit+0x1f4>)
 8003324:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8003326:	4b14      	ldr	r3, [pc, #80]	@ (8003378 <SDRAM_MspInit+0x1f8>)
 8003328:	4a11      	ldr	r2, [pc, #68]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
 800332c:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 800332e:	4a12      	ldr	r2, [pc, #72]	@ (8003378 <SDRAM_MspInit+0x1f8>)
 8003330:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8003332:	480f      	ldr	r0, [pc, #60]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 8003334:	f002 fef6 	bl	8006124 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8003338:	480d      	ldr	r0, [pc, #52]	@ (8003370 <SDRAM_MspInit+0x1f0>)
 800333a:	f002 fea7 	bl	800608c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	210f      	movs	r1, #15
 8003342:	207a      	movs	r0, #122	@ 0x7a
 8003344:	f000 ff82 	bl	800424c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8003348:	207a      	movs	r0, #122	@ 0x7a
 800334a:	f000 ff99 	bl	8004280 <HAL_NVIC_EnableIRQ>
}
 800334e:	bf00      	nop
 8003350:	3738      	adds	r7, #56	@ 0x38
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	58024400 	.word	0x58024400
 800335c:	58020c00 	.word	0x58020c00
 8003360:	58021000 	.word	0x58021000
 8003364:	58021400 	.word	0x58021400
 8003368:	58021800 	.word	0x58021800
 800336c:	58021c00 	.word	0x58021c00
 8003370:	24000d24 	.word	0x24000d24
 8003374:	52000040 	.word	0x52000040
 8003378:	24000cd0 	.word	0x24000cd0

0800337c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11c      	bne.n	80033ca <BSP_TS_Init+0x4e>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d018      	beq.n	80033ca <BSP_TS_Init+0x4e>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80033a0:	d813      	bhi.n	80033ca <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00f      	beq.n	80033ca <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80033b2:	d80a      	bhi.n	80033ca <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	428b      	cmp	r3, r1
 80033c2:	bf28      	it	cs
 80033c4:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d903      	bls.n	80033d2 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80033ca:	f06f 0301 	mvn.w	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e06e      	b.n	80034b0 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f98c 	bl	80036f0 <FT5336_Probe>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	e064      	b.n	80034b0 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4934      	ldr	r1, [pc, #208]	@ (80034bc <BSP_TS_Init+0x140>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	019b      	lsls	r3, r3, #6
 80033f0:	440b      	add	r3, r1
 80033f2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4930      	ldr	r1, [pc, #192]	@ (80034bc <BSP_TS_Init+0x140>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	440b      	add	r3, r1
 8003400:	3304      	adds	r3, #4
 8003402:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	492c      	ldr	r1, [pc, #176]	@ (80034bc <BSP_TS_Init+0x140>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	440b      	add	r3, r1
 8003410:	3308      	adds	r3, #8
 8003412:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	4928      	ldr	r1, [pc, #160]	@ (80034bc <BSP_TS_Init+0x140>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	019b      	lsls	r3, r3, #6
 800341e:	440b      	add	r3, r1
 8003420:	330c      	adds	r3, #12
 8003422:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8003424:	4b26      	ldr	r3, [pc, #152]	@ (80034c0 <BSP_TS_Init+0x144>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4926      	ldr	r1, [pc, #152]	@ (80034c4 <BSP_TS_Init+0x148>)
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003432:	f107 010c 	add.w	r1, r7, #12
 8003436:	4610      	mov	r0, r2
 8003438:	4798      	blx	r3
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	da03      	bge.n	8003448 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003440:	f06f 0304 	mvn.w	r3, #4
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	e033      	b.n	80034b0 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	491c      	ldr	r1, [pc, #112]	@ (80034bc <BSP_TS_Init+0x140>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	019b      	lsls	r3, r3, #6
 8003450:	440b      	add	r3, r1
 8003452:	3310      	adds	r3, #16
 8003454:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4918      	ldr	r1, [pc, #96]	@ (80034bc <BSP_TS_Init+0x140>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	019b      	lsls	r3, r3, #6
 800345e:	440b      	add	r3, r1
 8003460:	3314      	adds	r3, #20
 8003462:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e01f      	b.n	80034aa <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4413      	add	r3, r2
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	4811      	ldr	r0, [pc, #68]	@ (80034bc <BSP_TS_Init+0x140>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	0119      	lsls	r1, r3, #4
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	440b      	add	r3, r1
 8003480:	3306      	adds	r3, #6
 8003482:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	4413      	add	r3, r2
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	480a      	ldr	r0, [pc, #40]	@ (80034bc <BSP_TS_Init+0x140>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	0119      	lsls	r1, r3, #4
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	440b      	add	r3, r1
 800349c:	330a      	adds	r3, #10
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4403      	add	r3, r0
 80034a2:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	3301      	adds	r3, #1
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d9dc      	bls.n	800346a <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 80034b0:	69fb      	ldr	r3, [r7, #28]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	24000d98 	.word	0x24000d98
 80034c0:	24000d90 	.word	0x24000d90
 80034c4:	24000d94 	.word	0x24000d94

080034c8 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	@ 0x28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80034dc:	f06f 0301 	mvn.w	r3, #1
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e2:	e0f9      	b.n	80036d8 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80034e4:	4b7f      	ldr	r3, [pc, #508]	@ (80036e4 <BSP_TS_GetState+0x21c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	497f      	ldr	r1, [pc, #508]	@ (80036e8 <BSP_TS_GetState+0x220>)
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80034f2:	f107 0108 	add.w	r1, r7, #8
 80034f6:	4610      	mov	r0, r2
 80034f8:	4798      	blx	r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da03      	bge.n	8003508 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003500:	f06f 0304 	mvn.w	r3, #4
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
 8003506:	e0e7      	b.n	80036d8 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80d1 	beq.w	80036b2 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8003518:	4a74      	ldr	r2, [pc, #464]	@ (80036ec <BSP_TS_GetState+0x224>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	019b      	lsls	r3, r3, #6
 800351e:	4413      	add	r3, r2
 8003520:	3308      	adds	r3, #8
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8003534:	4a6d      	ldr	r2, [pc, #436]	@ (80036ec <BSP_TS_GetState+0x224>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	019b      	lsls	r3, r3, #6
 800353a:	4413      	add	r3, r2
 800353c:	3308      	adds	r3, #8
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8003548:	4a68      	ldr	r2, [pc, #416]	@ (80036ec <BSP_TS_GetState+0x224>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	4413      	add	r3, r2
 8003550:	3310      	adds	r3, #16
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800355c:	4a63      	ldr	r2, [pc, #396]	@ (80036ec <BSP_TS_GetState+0x224>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	4413      	add	r3, r2
 8003564:	3308      	adds	r3, #8
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8003570:	4a5e      	ldr	r2, [pc, #376]	@ (80036ec <BSP_TS_GetState+0x224>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	4413      	add	r3, r2
 8003578:	3314      	adds	r3, #20
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8003582:	4a5a      	ldr	r2, [pc, #360]	@ (80036ec <BSP_TS_GetState+0x224>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	019b      	lsls	r3, r3, #6
 8003588:	4413      	add	r3, r2
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	fb03 f202 	mul.w	r2, r3, r2
 8003592:	4956      	ldr	r1, [pc, #344]	@ (80036ec <BSP_TS_GetState+0x224>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	019b      	lsls	r3, r3, #6
 8003598:	440b      	add	r3, r1
 800359a:	3310      	adds	r3, #16
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80035a6:	4a51      	ldr	r2, [pc, #324]	@ (80036ec <BSP_TS_GetState+0x224>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	019b      	lsls	r3, r3, #6
 80035ac:	4413      	add	r3, r2
 80035ae:	3304      	adds	r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	fb03 f202 	mul.w	r2, r3, r2
 80035b8:	494c      	ldr	r1, [pc, #304]	@ (80036ec <BSP_TS_GetState+0x224>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	440b      	add	r3, r1
 80035c0:	3314      	adds	r3, #20
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4945      	ldr	r1, [pc, #276]	@ (80036ec <BSP_TS_GetState+0x224>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	019b      	lsls	r3, r3, #6
 80035dc:	440b      	add	r3, r1
 80035de:	3318      	adds	r3, #24
 80035e0:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d909      	bls.n	80035fa <BSP_TS_GetState+0x132>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	4940      	ldr	r1, [pc, #256]	@ (80036ec <BSP_TS_GetState+0x224>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	019b      	lsls	r3, r3, #6
 80035f0:	440b      	add	r3, r1
 80035f2:	3318      	adds	r3, #24
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	e008      	b.n	800360c <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80035fa:	4a3c      	ldr	r2, [pc, #240]	@ (80036ec <BSP_TS_GetState+0x224>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	019b      	lsls	r3, r3, #6
 8003600:	4413      	add	r3, r2
 8003602:	3318      	adds	r3, #24
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800360a:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800360c:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	4936      	ldr	r1, [pc, #216]	@ (80036ec <BSP_TS_GetState+0x224>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	019b      	lsls	r3, r3, #6
 8003618:	440b      	add	r3, r1
 800361a:	332c      	adds	r3, #44	@ 0x2c
 800361c:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800361e:	429a      	cmp	r2, r3
 8003620:	d909      	bls.n	8003636 <BSP_TS_GetState+0x16e>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	4931      	ldr	r1, [pc, #196]	@ (80036ec <BSP_TS_GetState+0x224>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	019b      	lsls	r3, r3, #6
 800362c:	440b      	add	r3, r1
 800362e:	332c      	adds	r3, #44	@ 0x2c
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	e008      	b.n	8003648 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8003636:	4a2d      	ldr	r2, [pc, #180]	@ (80036ec <BSP_TS_GetState+0x224>)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	019b      	lsls	r3, r3, #6
 800363c:	4413      	add	r3, r2
 800363e:	332c      	adds	r3, #44	@ 0x2c
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003646:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003648:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800364a:	4a28      	ldr	r2, [pc, #160]	@ (80036ec <BSP_TS_GetState+0x224>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	019b      	lsls	r3, r3, #6
 8003650:	4413      	add	r3, r2
 8003652:	330c      	adds	r3, #12
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	429a      	cmp	r2, r3
 800365a:	d808      	bhi.n	800366e <BSP_TS_GetState+0x1a6>
 800365c:	4a23      	ldr	r2, [pc, #140]	@ (80036ec <BSP_TS_GetState+0x224>)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	019b      	lsls	r3, r3, #6
 8003662:	4413      	add	r3, r2
 8003664:	330c      	adds	r3, #12
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	429a      	cmp	r2, r3
 800366c:	d910      	bls.n	8003690 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	491e      	ldr	r1, [pc, #120]	@ (80036ec <BSP_TS_GetState+0x224>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	019b      	lsls	r3, r3, #6
 8003678:	440b      	add	r3, r1
 800367a:	3318      	adds	r3, #24
 800367c:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	491a      	ldr	r1, [pc, #104]	@ (80036ec <BSP_TS_GetState+0x224>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	019b      	lsls	r3, r3, #6
 8003688:	440b      	add	r3, r1
 800368a:	332c      	adds	r3, #44	@ 0x2c
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e023      	b.n	80036d8 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003690:	4a16      	ldr	r2, [pc, #88]	@ (80036ec <BSP_TS_GetState+0x224>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	019b      	lsls	r3, r3, #6
 8003696:	4413      	add	r3, r2
 8003698:	3318      	adds	r3, #24
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80036a0:	4a12      	ldr	r2, [pc, #72]	@ (80036ec <BSP_TS_GetState+0x224>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	4413      	add	r3, r2
 80036a8:	332c      	adds	r3, #44	@ 0x2c
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	e012      	b.n	80036d8 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80036b8:	4a0c      	ldr	r2, [pc, #48]	@ (80036ec <BSP_TS_GetState+0x224>)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	019b      	lsls	r3, r3, #6
 80036be:	4413      	add	r3, r2
 80036c0:	3318      	adds	r3, #24
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80036c8:	4a08      	ldr	r2, [pc, #32]	@ (80036ec <BSP_TS_GetState+0x224>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	019b      	lsls	r3, r3, #6
 80036ce:	4413      	add	r3, r2
 80036d0:	332c      	adds	r3, #44	@ 0x2c
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3728      	adds	r7, #40	@ 0x28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	24000d90 	.word	0x24000d90
 80036e8:	24000d94 	.word	0x24000d94
 80036ec:	24000d98 	.word	0x24000d98

080036f0 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	@ 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8003700:	2370      	movs	r3, #112	@ 0x70
 8003702:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003704:	4b23      	ldr	r3, [pc, #140]	@ (8003794 <FT5336_Probe+0xa4>)
 8003706:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003708:	4b23      	ldr	r3, [pc, #140]	@ (8003798 <FT5336_Probe+0xa8>)
 800370a:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800370c:	4b23      	ldr	r3, [pc, #140]	@ (800379c <FT5336_Probe+0xac>)
 800370e:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8003710:	4b23      	ldr	r3, [pc, #140]	@ (80037a0 <FT5336_Probe+0xb0>)
 8003712:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003714:	4b23      	ldr	r3, [pc, #140]	@ (80037a4 <FT5336_Probe+0xb4>)
 8003716:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	4619      	mov	r1, r3
 800371e:	4822      	ldr	r0, [pc, #136]	@ (80037a8 <FT5336_Probe+0xb8>)
 8003720:	f7fc fdda 	bl	80002d8 <FT5336_RegisterBusIO>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800372a:	f06f 0307 	mvn.w	r3, #7
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003730:	e02a      	b.n	8003788 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8003732:	f107 0308 	add.w	r3, r7, #8
 8003736:	4619      	mov	r1, r3
 8003738:	481b      	ldr	r0, [pc, #108]	@ (80037a8 <FT5336_Probe+0xb8>)
 800373a:	f7fc fec7 	bl	80004cc <FT5336_ReadID>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003744:	f06f 0304 	mvn.w	r3, #4
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
 800374a:	e01d      	b.n	8003788 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b51      	cmp	r3, #81	@ 0x51
 8003750:	d003      	beq.n	800375a <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003752:	f06f 0306 	mvn.w	r3, #6
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
 8003758:	e016      	b.n	8003788 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800375a:	4a14      	ldr	r2, [pc, #80]	@ (80037ac <FT5336_Probe+0xbc>)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4912      	ldr	r1, [pc, #72]	@ (80037a8 <FT5336_Probe+0xb8>)
 8003760:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003764:	4b12      	ldr	r3, [pc, #72]	@ (80037b0 <FT5336_Probe+0xc0>)
 8003766:	4a13      	ldr	r2, [pc, #76]	@ (80037b4 <FT5336_Probe+0xc4>)
 8003768:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800376a:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <FT5336_Probe+0xc0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	490e      	ldr	r1, [pc, #56]	@ (80037ac <FT5336_Probe+0xbc>)
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003778:	4610      	mov	r0, r2
 800377a:	4798      	blx	r3
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003782:	f06f 0304 	mvn.w	r3, #4
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800378a:	4618      	mov	r0, r3
 800378c:	3728      	adds	r7, #40	@ 0x28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	080019cd 	.word	0x080019cd
 8003798:	08001a41 	.word	0x08001a41
 800379c:	08001b69 	.word	0x08001b69
 80037a0:	08001b0d 	.word	0x08001b0d
 80037a4:	08001bc5 	.word	0x08001bc5
 80037a8:	24000dd8 	.word	0x24000dd8
 80037ac:	24000d94 	.word	0x24000d94
 80037b0:	24000d90 	.word	0x24000d90
 80037b4:	24000000 	.word	0x24000000

080037b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037be:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <HAL_MspInit+0x30>)
 80037c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037c4:	4a08      	ldr	r2, [pc, #32]	@ (80037e8 <HAL_MspInit+0x30>)
 80037c6:	f043 0302 	orr.w	r3, r3, #2
 80037ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80037ce:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_MspInit+0x30>)
 80037d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	58024400 	.word	0x58024400

080037ec <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80037fa:	b480      	push	{r7}
 80037fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80037fe:	bf00      	nop
 8003800:	e7fd      	b.n	80037fe <HardFault_Handler+0x4>

08003802 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003806:	bf00      	nop
 8003808:	e7fd      	b.n	8003806 <MemManage_Handler+0x4>

0800380a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800380e:	bf00      	nop
 8003810:	e7fd      	b.n	800380e <BusFault_Handler+0x4>

08003812 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <UsageFault_Handler+0x4>

0800381a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
}
 800383a:	bf00      	nop
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003848:	f000 fbe8 	bl	800401c <HAL_IncTick>
}
 800384c:	bf00      	nop
 800384e:	bd80      	pop	{r7, pc}

08003850 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8003854:	2000      	movs	r0, #0
 8003856:	f7fe f8a7 	bl	80019a8 <BSP_PB_IRQHandler>
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003864:	4b37      	ldr	r3, [pc, #220]	@ (8003944 <SystemInit+0xe4>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386a:	4a36      	ldr	r2, [pc, #216]	@ (8003944 <SystemInit+0xe4>)
 800386c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003874:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <SystemInit+0xe8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	2b06      	cmp	r3, #6
 800387e:	d807      	bhi.n	8003890 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003880:	4b31      	ldr	r3, [pc, #196]	@ (8003948 <SystemInit+0xe8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f023 030f 	bic.w	r3, r3, #15
 8003888:	4a2f      	ldr	r2, [pc, #188]	@ (8003948 <SystemInit+0xe8>)
 800388a:	f043 0307 	orr.w	r3, r3, #7
 800388e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003890:	4b2e      	ldr	r3, [pc, #184]	@ (800394c <SystemInit+0xec>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2d      	ldr	r2, [pc, #180]	@ (800394c <SystemInit+0xec>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800389c:	4b2b      	ldr	r3, [pc, #172]	@ (800394c <SystemInit+0xec>)
 800389e:	2200      	movs	r2, #0
 80038a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80038a2:	4b2a      	ldr	r3, [pc, #168]	@ (800394c <SystemInit+0xec>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4929      	ldr	r1, [pc, #164]	@ (800394c <SystemInit+0xec>)
 80038a8:	4b29      	ldr	r3, [pc, #164]	@ (8003950 <SystemInit+0xf0>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038ae:	4b26      	ldr	r3, [pc, #152]	@ (8003948 <SystemInit+0xe8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038ba:	4b23      	ldr	r3, [pc, #140]	@ (8003948 <SystemInit+0xe8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 030f 	bic.w	r3, r3, #15
 80038c2:	4a21      	ldr	r2, [pc, #132]	@ (8003948 <SystemInit+0xe8>)
 80038c4:	f043 0307 	orr.w	r3, r3, #7
 80038c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <SystemInit+0xec>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80038d0:	4b1e      	ldr	r3, [pc, #120]	@ (800394c <SystemInit+0xec>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80038d6:	4b1d      	ldr	r3, [pc, #116]	@ (800394c <SystemInit+0xec>)
 80038d8:	2200      	movs	r2, #0
 80038da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80038dc:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <SystemInit+0xec>)
 80038de:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <SystemInit+0xf4>)
 80038e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80038e2:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <SystemInit+0xec>)
 80038e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003958 <SystemInit+0xf8>)
 80038e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80038e8:	4b18      	ldr	r3, [pc, #96]	@ (800394c <SystemInit+0xec>)
 80038ea:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <SystemInit+0xfc>)
 80038ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80038ee:	4b17      	ldr	r3, [pc, #92]	@ (800394c <SystemInit+0xec>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80038f4:	4b15      	ldr	r3, [pc, #84]	@ (800394c <SystemInit+0xec>)
 80038f6:	4a19      	ldr	r2, [pc, #100]	@ (800395c <SystemInit+0xfc>)
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80038fa:	4b14      	ldr	r3, [pc, #80]	@ (800394c <SystemInit+0xec>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003900:	4b12      	ldr	r3, [pc, #72]	@ (800394c <SystemInit+0xec>)
 8003902:	4a16      	ldr	r2, [pc, #88]	@ (800395c <SystemInit+0xfc>)
 8003904:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003906:	4b11      	ldr	r3, [pc, #68]	@ (800394c <SystemInit+0xec>)
 8003908:	2200      	movs	r2, #0
 800390a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800390c:	4b0f      	ldr	r3, [pc, #60]	@ (800394c <SystemInit+0xec>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0e      	ldr	r2, [pc, #56]	@ (800394c <SystemInit+0xec>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003916:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <SystemInit+0xec>)
 800391a:	2200      	movs	r2, #0
 800391c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800391e:	4b10      	ldr	r3, [pc, #64]	@ (8003960 <SystemInit+0x100>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <SystemInit+0x104>)
 8003924:	4013      	ands	r3, r2
 8003926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800392a:	d202      	bcs.n	8003932 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800392c:	4b0e      	ldr	r3, [pc, #56]	@ (8003968 <SystemInit+0x108>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003932:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <SystemInit+0x10c>)
 8003934:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003938:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00
 8003948:	52002000 	.word	0x52002000
 800394c:	58024400 	.word	0x58024400
 8003950:	eaf6ed7f 	.word	0xeaf6ed7f
 8003954:	02020200 	.word	0x02020200
 8003958:	01ff0000 	.word	0x01ff0000
 800395c:	01010280 	.word	0x01010280
 8003960:	5c001000 	.word	0x5c001000
 8003964:	ffff0000 	.word	0xffff0000
 8003968:	51008108 	.word	0x51008108
 800396c:	52004000 	.word	0x52004000

08003970 <Touchscreen_demo>:
  * @brief  Touchscreen Demo1 : test touchscreen calibration and single touch in polling mode
  * @param  None
  * @retval None
  */
void Touchscreen_demo(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
    uint16_t x1, y1;
    uint32_t ts_status = BSP_ERROR_NONE;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
    uint32_t x_size, y_size;
    uint8_t selectedColorIndex = 0; // Black is the default selected color
 800397a:	2300      	movs	r3, #0
 800397c:	75fb      	strb	r3, [r7, #23]

    BSP_LCD_GetXSize(0, &x_size);
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	4619      	mov	r1, r3
 8003982:	2000      	movs	r0, #0
 8003984:	f7fe fe54 	bl	8002630 <BSP_LCD_GetXSize>
    BSP_LCD_GetYSize(0, &y_size);
 8003988:	463b      	mov	r3, r7
 800398a:	4619      	mov	r1, r3
 800398c:	2000      	movs	r0, #0
 800398e:	f7fe fe6d 	bl	800266c <BSP_LCD_GetYSize>

    hTS.Width = x_size;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a7e      	ldr	r2, [pc, #504]	@ (8003b90 <Touchscreen_demo+0x220>)
 8003996:	6013      	str	r3, [r2, #0]
    hTS.Height = y_size;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b90 <Touchscreen_demo+0x220>)
 800399c:	6053      	str	r3, [r2, #4]
    hTS.Orientation = TS_SWAP_XY;
 800399e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b90 <Touchscreen_demo+0x220>)
 80039a0:	2208      	movs	r2, #8
 80039a2:	609a      	str	r2, [r3, #8]
    hTS.Accuracy = 5;
 80039a4:	4b7a      	ldr	r3, [pc, #488]	@ (8003b90 <Touchscreen_demo+0x220>)
 80039a6:	2205      	movs	r2, #5
 80039a8:	60da      	str	r2, [r3, #12]

    /* Touchscreen initialization */
    ts_status = BSP_TS_Init(0, &hTS);
 80039aa:	4979      	ldr	r1, [pc, #484]	@ (8003b90 <Touchscreen_demo+0x220>)
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7ff fce5 	bl	800337c <BSP_TS_Init>
 80039b2:	4603      	mov	r3, r0
 80039b4:	60fb      	str	r3, [r7, #12]

    if(ts_status == BSP_ERROR_NONE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f040 80e4 	bne.w	8003b86 <Touchscreen_demo+0x216>
    {
        UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80039be:	f04f 30ff 	mov.w	r0, #4294967295
 80039c2:	f7fd fb65 	bl	8001090 <UTIL_LCD_Clear>

        // Draw the canvas
        Touchscreen_DrawCanvas();
 80039c6:	f000 f8ed 	bl	8003ba4 <Touchscreen_DrawCanvas>

        // Draw the color palette
        Touchscreen_DrawBackground_Circles(selectedColorIndex);
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f8fd 	bl	8003bcc <Touchscreen_DrawBackground_Circles>

        // Draw clear, eraser, undo, and redo buttons
        Touchscreen_DrawButton_Clear();
 80039d2:	f000 f939 	bl	8003c48 <Touchscreen_DrawButton_Clear>
        Touchscreen_DrawButton_Eraser(false);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f000 f958 	bl	8003c8c <Touchscreen_DrawButton_Eraser>
        Touchscreen_DrawButton_Undo();
 80039dc:	f000 f998 	bl	8003d10 <Touchscreen_DrawButton_Undo>
        Touchscreen_DrawButton_Redo();
 80039e0:	f000 f9b8 	bl	8003d54 <Touchscreen_DrawButton_Redo>

        while (1)
        {
            ts_status = BSP_TS_GetState(0, &TS_State);
 80039e4:	496b      	ldr	r1, [pc, #428]	@ (8003b94 <Touchscreen_demo+0x224>)
 80039e6:	2000      	movs	r0, #0
 80039e8:	f7ff fd6e 	bl	80034c8 <BSP_TS_GetState>
 80039ec:	4603      	mov	r3, r0
 80039ee:	60fb      	str	r3, [r7, #12]
            if(TS_State.TouchDetected)
 80039f0:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <Touchscreen_demo+0x224>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80c2 	beq.w	8003b7e <Touchscreen_demo+0x20e>
            {
                x1 = TS_State.TouchX;
 80039fa:	4b66      	ldr	r3, [pc, #408]	@ (8003b94 <Touchscreen_demo+0x224>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	817b      	strh	r3, [r7, #10]
                y1 = TS_State.TouchY;
 8003a00:	4b64      	ldr	r3, [pc, #400]	@ (8003b94 <Touchscreen_demo+0x224>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	813b      	strh	r3, [r7, #8]

                // Check if the touch is on one of the color palette circles
                for (int i = 0; i < NUM_COLORS; i++) {
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e022      	b.n	8003a52 <Touchscreen_demo+0xe2>
                    if ((x1 > (CIRCLE_XPOS(i) - CIRCLE_RADIUS)) &&
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	2b0a      	cmp	r3, #10
 8003a10:	d91c      	bls.n	8003a4c <Touchscreen_demo+0xdc>
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	2b27      	cmp	r3, #39	@ 0x27
 8003a16:	d819      	bhi.n	8003a4c <Touchscreen_demo+0xdc>
                        (x1 < (CIRCLE_XPOS(i) + CIRCLE_RADIUS)) &&
                        (y1 > (CIRCLE_YPOS(i) - CIRCLE_RADIUS)) &&
 8003a18:	8939      	ldrh	r1, [r7, #8]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	332d      	adds	r3, #45	@ 0x2d
                        (x1 < (CIRCLE_XPOS(i) + CIRCLE_RADIUS)) &&
 8003a26:	4299      	cmp	r1, r3
 8003a28:	dd10      	ble.n	8003a4c <Touchscreen_demo+0xdc>
                        (y1 < (CIRCLE_YPOS(i) + CIRCLE_RADIUS))) {
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8003a38:	893b      	ldrh	r3, [r7, #8]
                        (y1 > (CIRCLE_YPOS(i) - CIRCLE_RADIUS)) &&
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	db06      	blt.n	8003a4c <Touchscreen_demo+0xdc>
                        selectedColorIndex = i;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	75fb      	strb	r3, [r7, #23]
                        Touchscreen_DrawBackground_Circles(selectedColorIndex);
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f8c1 	bl	8003bcc <Touchscreen_DrawBackground_Circles>
                        break;
 8003a4a:	e005      	b.n	8003a58 <Touchscreen_demo+0xe8>
                for (int i = 0; i < NUM_COLORS; i++) {
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	ddd9      	ble.n	8003a0c <Touchscreen_demo+0x9c>
                    }
                }

                // Check if the touch is on the clear button
                if ((x1 > (CLEAR_BUTTON_XPOS - CLEAR_BUTTON_RADIUS)) &&
 8003a58:	897b      	ldrh	r3, [r7, #10]
 8003a5a:	f5b3 7fce 	cmp.w	r3, #412	@ 0x19c
 8003a5e:	d924      	bls.n	8003aaa <Touchscreen_demo+0x13a>
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	f5b3 7fe7 	cmp.w	r3, #462	@ 0x1ce
 8003a66:	d220      	bcs.n	8003aaa <Touchscreen_demo+0x13a>
                    (x1 < (CLEAR_BUTTON_XPOS + CLEAR_BUTTON_RADIUS)) &&
 8003a68:	893b      	ldrh	r3, [r7, #8]
 8003a6a:	2b05      	cmp	r3, #5
 8003a6c:	d91d      	bls.n	8003aaa <Touchscreen_demo+0x13a>
                    (y1 > (CLEAR_BUTTON_YPOS - CLEAR_BUTTON_RADIUS)) &&
 8003a6e:	893b      	ldrh	r3, [r7, #8]
 8003a70:	2b36      	cmp	r3, #54	@ 0x36
 8003a72:	d81a      	bhi.n	8003aaa <Touchscreen_demo+0x13a>
                    (y1 < (CLEAR_BUTTON_YPOS + CLEAR_BUTTON_RADIUS))) {
                    UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	f7fd fb0a 	bl	8001090 <UTIL_LCD_Clear>
                    Touchscreen_DrawCanvas();
 8003a7c:	f000 f892 	bl	8003ba4 <Touchscreen_DrawCanvas>
                    Touchscreen_DrawBackground_Circles(selectedColorIndex);
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f8a2 	bl	8003bcc <Touchscreen_DrawBackground_Circles>
                    Touchscreen_DrawButton_Clear();
 8003a88:	f000 f8de 	bl	8003c48 <Touchscreen_DrawButton_Clear>
                    Touchscreen_DrawButton_Eraser(false);
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f000 f8fd 	bl	8003c8c <Touchscreen_DrawButton_Eraser>
                    Touchscreen_DrawButton_Undo();
 8003a92:	f000 f93d 	bl	8003d10 <Touchscreen_DrawButton_Undo>
                    Touchscreen_DrawButton_Redo();
 8003a96:	f000 f95d 	bl	8003d54 <Touchscreen_DrawButton_Redo>
                    undoTop = -1; // Clear undo stack on clear
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b98 <Touchscreen_demo+0x228>)
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	601a      	str	r2, [r3, #0]
                    redoTop = -1; // Clear redo stack on clear
 8003aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8003b9c <Touchscreen_demo+0x22c>)
 8003aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa8:	601a      	str	r2, [r3, #0]
                }

                // Check if the touch is on the eraser button
                if ((x1 > (ERASER_XPOS - ERASER_RADIUS)) &&
 8003aaa:	897b      	ldrh	r3, [r7, #10]
 8003aac:	f5b3 7fce 	cmp.w	r3, #412	@ 0x19c
 8003ab0:	d910      	bls.n	8003ad4 <Touchscreen_demo+0x164>
 8003ab2:	897b      	ldrh	r3, [r7, #10]
 8003ab4:	f5b3 7fe7 	cmp.w	r3, #462	@ 0x1ce
 8003ab8:	d20c      	bcs.n	8003ad4 <Touchscreen_demo+0x164>
                    (x1 < (ERASER_XPOS + ERASER_RADIUS)) &&
 8003aba:	893b      	ldrh	r3, [r7, #8]
 8003abc:	2bd7      	cmp	r3, #215	@ 0xd7
 8003abe:	d909      	bls.n	8003ad4 <Touchscreen_demo+0x164>
                    (y1 > (ERASER_YPOS - ERASER_RADIUS)) &&
 8003ac0:	893b      	ldrh	r3, [r7, #8]
 8003ac2:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8003ac6:	d805      	bhi.n	8003ad4 <Touchscreen_demo+0x164>
                    (y1 < (ERASER_YPOS + ERASER_RADIUS))) {
                    selectedColorIndex = NUM_COLORS; // Use index outside the color list to denote eraser
 8003ac8:	2305      	movs	r3, #5
 8003aca:	75fb      	strb	r3, [r7, #23]
                    Touchscreen_DrawBackground_Circles(selectedColorIndex); // Highlight eraser
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f87c 	bl	8003bcc <Touchscreen_DrawBackground_Circles>
                }

                // Check if the touch is on the undo button
                if ((x1 > (UNDO_BUTTON_XPOS - UNDO_BUTTON_RADIUS)) &&
 8003ad4:	897b      	ldrh	r3, [r7, #10]
 8003ad6:	f5b3 7fce 	cmp.w	r3, #412	@ 0x19c
 8003ada:	d90b      	bls.n	8003af4 <Touchscreen_demo+0x184>
 8003adc:	897b      	ldrh	r3, [r7, #10]
 8003ade:	f5b3 7fe7 	cmp.w	r3, #462	@ 0x1ce
 8003ae2:	d207      	bcs.n	8003af4 <Touchscreen_demo+0x184>
                    (x1 < (UNDO_BUTTON_XPOS + UNDO_BUTTON_RADIUS)) &&
 8003ae4:	893b      	ldrh	r3, [r7, #8]
 8003ae6:	2b4b      	cmp	r3, #75	@ 0x4b
 8003ae8:	d904      	bls.n	8003af4 <Touchscreen_demo+0x184>
                    (y1 > (UNDO_BUTTON_YPOS - UNDO_BUTTON_RADIUS)) &&
 8003aea:	893b      	ldrh	r3, [r7, #8]
 8003aec:	2b7c      	cmp	r3, #124	@ 0x7c
 8003aee:	d801      	bhi.n	8003af4 <Touchscreen_demo+0x184>
                    (y1 < (UNDO_BUTTON_YPOS + UNDO_BUTTON_RADIUS))) {
                    Undo();
 8003af0:	f000 f988 	bl	8003e04 <Undo>
                }

                // Check if the touch is on the redo button
                if ((x1 > (REDO_BUTTON_XPOS - REDO_BUTTON_RADIUS)) &&
 8003af4:	897b      	ldrh	r3, [r7, #10]
 8003af6:	f5b3 7fce 	cmp.w	r3, #412	@ 0x19c
 8003afa:	d90b      	bls.n	8003b14 <Touchscreen_demo+0x1a4>
 8003afc:	897b      	ldrh	r3, [r7, #10]
 8003afe:	f5b3 7fe7 	cmp.w	r3, #462	@ 0x1ce
 8003b02:	d207      	bcs.n	8003b14 <Touchscreen_demo+0x1a4>
                    (x1 < (REDO_BUTTON_XPOS + REDO_BUTTON_RADIUS)) &&
 8003b04:	893b      	ldrh	r3, [r7, #8]
 8003b06:	2b91      	cmp	r3, #145	@ 0x91
 8003b08:	d904      	bls.n	8003b14 <Touchscreen_demo+0x1a4>
                    (y1 > (REDO_BUTTON_YPOS - REDO_BUTTON_RADIUS)) &&
 8003b0a:	893b      	ldrh	r3, [r7, #8]
 8003b0c:	2bc2      	cmp	r3, #194	@ 0xc2
 8003b0e:	d801      	bhi.n	8003b14 <Touchscreen_demo+0x1a4>
                    (y1 < (REDO_BUTTON_YPOS + REDO_BUTTON_RADIUS))) {
                    Redo();
 8003b10:	f000 f9b8 	bl	8003e84 <Redo>
                }

                // Draw with the selected color or eraser within the canvas
                if (x1 >= CANVAS_XPOS && x1 <= CANVAS_XPOS + CANVAS_WIDTH &&
 8003b14:	897b      	ldrh	r3, [r7, #10]
 8003b16:	2b31      	cmp	r3, #49	@ 0x31
 8003b18:	d931      	bls.n	8003b7e <Touchscreen_demo+0x20e>
 8003b1a:	897b      	ldrh	r3, [r7, #10]
 8003b1c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003b20:	d82d      	bhi.n	8003b7e <Touchscreen_demo+0x20e>
 8003b22:	893b      	ldrh	r3, [r7, #8]
 8003b24:	2b0e      	cmp	r3, #14
 8003b26:	d92a      	bls.n	8003b7e <Touchscreen_demo+0x20e>
                    y1 >= CANVAS_YPOS && y1 <= CANVAS_YPOS + CANVAS_HEIGHT) {
 8003b28:	893b      	ldrh	r3, [r7, #8]
 8003b2a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003b2e:	d226      	bcs.n	8003b7e <Touchscreen_demo+0x20e>
                    if (selectedColorIndex < NUM_COLORS) {
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d812      	bhi.n	8003b5c <Touchscreen_demo+0x1ec>
                        UTIL_LCD_FillCircle(x1, y1, 5, COLOR_LIST[selectedColorIndex]);
 8003b36:	8978      	ldrh	r0, [r7, #10]
 8003b38:	8939      	ldrh	r1, [r7, #8]
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	@ (8003ba0 <Touchscreen_demo+0x230>)
 8003b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b42:	2205      	movs	r2, #5
 8003b44:	f7fd fd0c 	bl	8001560 <UTIL_LCD_FillCircle>
                        SaveToUndoStack(x1, y1, COLOR_LIST[selectedColorIndex]);
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ba0 <Touchscreen_demo+0x230>)
 8003b4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b50:	8939      	ldrh	r1, [r7, #8]
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 f91f 	bl	8003d98 <SaveToUndoStack>
 8003b5a:	e010      	b.n	8003b7e <Touchscreen_demo+0x20e>
                    } else if (selectedColorIndex == NUM_COLORS) {
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b05      	cmp	r3, #5
 8003b60:	d10d      	bne.n	8003b7e <Touchscreen_demo+0x20e>
                        UTIL_LCD_FillCircle(x1, y1, 10, UTIL_LCD_COLOR_WHITE); // Larger dots for eraser
 8003b62:	8978      	ldrh	r0, [r7, #10]
 8003b64:	8939      	ldrh	r1, [r7, #8]
 8003b66:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6a:	220a      	movs	r2, #10
 8003b6c:	f7fd fcf8 	bl	8001560 <UTIL_LCD_FillCircle>
                        SaveToUndoStack(x1, y1, UTIL_LCD_COLOR_WHITE);
 8003b70:	8939      	ldrh	r1, [r7, #8]
 8003b72:	897b      	ldrh	r3, [r7, #10]
 8003b74:	f04f 32ff 	mov.w	r2, #4294967295
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f90d 	bl	8003d98 <SaveToUndoStack>
                    }
                }
            }
            HAL_Delay(20);
 8003b7e:	2014      	movs	r0, #20
 8003b80:	f000 fa6c 	bl	800405c <HAL_Delay>
            ts_status = BSP_TS_GetState(0, &TS_State);
 8003b84:	e72e      	b.n	80039e4 <Touchscreen_demo+0x74>
        }
    }
}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	24000e0c 	.word	0x24000e0c
 8003b94:	24000e00 	.word	0x24000e00
 8003b98:	24000048 	.word	0x24000048
 8003b9c:	2400004c 	.word	0x2400004c
 8003ba0:	08009bfc 	.word	0x08009bfc

08003ba4 <Touchscreen_DrawCanvas>:
/**
  * @brief  Draw Touchscreen Canvas
  * @retval None
  */
void Touchscreen_DrawCanvas(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af02      	add	r7, sp, #8
    // Draw canvas border
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8003baa:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003bae:	f7fd f977 	bl	8000ea0 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DrawRect(CANVAS_XPOS, CANVAS_YPOS, CANVAS_WIDTH, CANVAS_HEIGHT, UTIL_LCD_COLOR_BLACK);
 8003bb2:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	23f2      	movs	r3, #242	@ 0xf2
 8003bba:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003bbe:	210f      	movs	r1, #15
 8003bc0:	2032      	movs	r0, #50	@ 0x32
 8003bc2:	f7fd fb5f 	bl	8001284 <UTIL_LCD_DrawRect>
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <Touchscreen_DrawBackground_Circles>:
  * @brief  Draw Touchscreen Background
  * @param  state : touch zone state
  * @retval None
  */
void Touchscreen_DrawBackground_Circles(uint8_t state)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_COLORS; i++) {
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e022      	b.n	8003c22 <Touchscreen_DrawBackground_Circles+0x56>
        UTIL_LCD_FillCircle(CIRCLE_XPOS(i), CIRCLE_YPOS(i), CIRCLE_RADIUS, COLOR_LIST[i]);
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	333c      	adds	r3, #60	@ 0x3c
 8003be8:	4619      	mov	r1, r3
 8003bea:	4a16      	ldr	r2, [pc, #88]	@ (8003c44 <Touchscreen_DrawBackground_Circles+0x78>)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	220f      	movs	r2, #15
 8003bf4:	2019      	movs	r0, #25
 8003bf6:	f7fd fcb3 	bl	8001560 <UTIL_LCD_FillCircle>
        if (i == state) {
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d10c      	bne.n	8003c1c <Touchscreen_DrawBackground_Circles+0x50>
            UTIL_LCD_FillCircle(CIRCLE_XPOS(i), CIRCLE_YPOS(i), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	333c      	adds	r3, #60	@ 0x3c
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	220d      	movs	r2, #13
 8003c16:	2019      	movs	r0, #25
 8003c18:	f7fd fca2 	bl	8001560 <UTIL_LCD_FillCircle>
    for (int i = 0; i < NUM_COLORS; i++) {
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	ddd9      	ble.n	8003bdc <Touchscreen_DrawBackground_Circles+0x10>
        }
    }
    // Redraw eraser button based on state
    if (state == NUM_COLORS) {
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d103      	bne.n	8003c36 <Touchscreen_DrawBackground_Circles+0x6a>
         Touchscreen_DrawButton_Eraser(true); // Highlight eraser
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f000 f82c 	bl	8003c8c <Touchscreen_DrawButton_Eraser>
    } else {
         Touchscreen_DrawButton_Eraser(false); // Normal state
    }

}
 8003c34:	e002      	b.n	8003c3c <Touchscreen_DrawBackground_Circles+0x70>
         Touchscreen_DrawButton_Eraser(false); // Normal state
 8003c36:	2000      	movs	r0, #0
 8003c38:	f000 f828 	bl	8003c8c <Touchscreen_DrawButton_Eraser>
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	08009bfc 	.word	0x08009bfc

08003c48 <Touchscreen_DrawButton_Clear>:
/**
  * @brief  Draw Clear Button
  * @retval None
  */
void Touchscreen_DrawButton_Clear(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
    UTIL_LCD_FillCircle(CLEAR_BUTTON_XPOS, CLEAR_BUTTON_YPOS, CLEAR_BUTTON_RADIUS, UTIL_LCD_COLOR_RED);
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <Touchscreen_DrawButton_Clear+0x38>)
 8003c4e:	2219      	movs	r2, #25
 8003c50:	211e      	movs	r1, #30
 8003c52:	f240 10b5 	movw	r0, #437	@ 0x1b5
 8003c56:	f7fd fc83 	bl	8001560 <UTIL_LCD_FillCircle>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8003c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5e:	f7fd f91f 	bl	8000ea0 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_RED);
 8003c62:	4807      	ldr	r0, [pc, #28]	@ (8003c80 <Touchscreen_DrawButton_Clear+0x38>)
 8003c64:	f7fd f930 	bl	8000ec8 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetFont(&Font12);
 8003c68:	4806      	ldr	r0, [pc, #24]	@ (8003c84 <Touchscreen_DrawButton_Clear+0x3c>)
 8003c6a:	f7fd f941 	bl	8000ef0 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(5000, CLEAR_BUTTON_YPOS - 13, (uint8_t *)"Clear", CENTER_MODE);
 8003c6e:	2301      	movs	r3, #1
 8003c70:	4a05      	ldr	r2, [pc, #20]	@ (8003c88 <Touchscreen_DrawButton_Clear+0x40>)
 8003c72:	2111      	movs	r1, #17
 8003c74:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003c78:	f7fd fa56 	bl	8001128 <UTIL_LCD_DisplayStringAt>
}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	ffff0000 	.word	0xffff0000
 8003c84:	24000030 	.word	0x24000030
 8003c88:	080096a0 	.word	0x080096a0

08003c8c <Touchscreen_DrawButton_Eraser>:
/**
  * @brief  Draw Eraser Button
  * @retval None
  */
void Touchscreen_DrawButton_Eraser(bool selected)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
	UTIL_LCD_DrawCircle(ERASER_XPOS, ERASER_YPOS, ERASER_RADIUS, UTIL_LCD_COLOR_GRAY);
 8003c96:	4b1b      	ldr	r3, [pc, #108]	@ (8003d04 <Touchscreen_DrawButton_Eraser+0x78>)
 8003c98:	2219      	movs	r2, #25
 8003c9a:	21f0      	movs	r1, #240	@ 0xf0
 8003c9c:	f240 10b5 	movw	r0, #437	@ 0x1b5
 8003ca0:	f7fd fb1a 	bl	80012d8 <UTIL_LCD_DrawCircle>
	if (selected) {
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00f      	beq.n	8003cca <Touchscreen_DrawButton_Eraser+0x3e>
	        // Draw eraser with no filling
			UTIL_LCD_FillCircle(ERASER_XPOS, ERASER_YPOS, ERASER_RADIUS-3, UTIL_LCD_COLOR_WHITE);
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	2216      	movs	r2, #22
 8003cb0:	21f0      	movs	r1, #240	@ 0xf0
 8003cb2:	f240 10b5 	movw	r0, #437	@ 0x1b5
 8003cb6:	f7fd fc53 	bl	8001560 <UTIL_LCD_FillCircle>
			UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8003cba:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbe:	f7fd f903 	bl	8000ec8 <UTIL_LCD_SetBackColor>
	        UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GRAY);
 8003cc2:	4810      	ldr	r0, [pc, #64]	@ (8003d04 <Touchscreen_DrawButton_Eraser+0x78>)
 8003cc4:	f7fd f8ec 	bl	8000ea0 <UTIL_LCD_SetTextColor>
 8003cc8:	e00d      	b.n	8003ce6 <Touchscreen_DrawButton_Eraser+0x5a>
	    } else {
	        // Draw eraser with filling
	        UTIL_LCD_FillCircle(ERASER_XPOS, ERASER_YPOS, ERASER_RADIUS, UTIL_LCD_COLOR_GRAY);
 8003cca:	4b0e      	ldr	r3, [pc, #56]	@ (8003d04 <Touchscreen_DrawButton_Eraser+0x78>)
 8003ccc:	2219      	movs	r2, #25
 8003cce:	21f0      	movs	r1, #240	@ 0xf0
 8003cd0:	f240 10b5 	movw	r0, #437	@ 0x1b5
 8003cd4:	f7fd fc44 	bl	8001560 <UTIL_LCD_FillCircle>
	        UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_GRAY);
 8003cd8:	480a      	ldr	r0, [pc, #40]	@ (8003d04 <Touchscreen_DrawButton_Eraser+0x78>)
 8003cda:	f7fd f8f5 	bl	8000ec8 <UTIL_LCD_SetBackColor>
	        UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce2:	f7fd f8dd 	bl	8000ea0 <UTIL_LCD_SetTextColor>
	    }

    UTIL_LCD_SetFont(&Font12);
 8003ce6:	4808      	ldr	r0, [pc, #32]	@ (8003d08 <Touchscreen_DrawButton_Eraser+0x7c>)
 8003ce8:	f7fd f902 	bl	8000ef0 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(5000, ERASER_YPOS - 13, (uint8_t *)"Eraser", CENTER_MODE);
 8003cec:	2301      	movs	r3, #1
 8003cee:	4a07      	ldr	r2, [pc, #28]	@ (8003d0c <Touchscreen_DrawButton_Eraser+0x80>)
 8003cf0:	21e3      	movs	r1, #227	@ 0xe3
 8003cf2:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003cf6:	f7fd fa17 	bl	8001128 <UTIL_LCD_DisplayStringAt>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	ff808080 	.word	0xff808080
 8003d08:	24000030 	.word	0x24000030
 8003d0c:	080096a8 	.word	0x080096a8

08003d10 <Touchscreen_DrawButton_Undo>:
/**
  * @brief  Draw Undo Button
  * @retval None
  */
void Touchscreen_DrawButton_Undo(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
    UTIL_LCD_FillCircle(UNDO_BUTTON_XPOS, UNDO_BUTTON_YPOS, UNDO_BUTTON_RADIUS, UTIL_LCD_COLOR_BLUE);
 8003d14:	4b0c      	ldr	r3, [pc, #48]	@ (8003d48 <Touchscreen_DrawButton_Undo+0x38>)
 8003d16:	2219      	movs	r2, #25
 8003d18:	2164      	movs	r1, #100	@ 0x64
 8003d1a:	f240 10b5 	movw	r0, #437	@ 0x1b5
 8003d1e:	f7fd fc1f 	bl	8001560 <UTIL_LCD_FillCircle>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8003d22:	f04f 30ff 	mov.w	r0, #4294967295
 8003d26:	f7fd f8bb 	bl	8000ea0 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8003d2a:	4807      	ldr	r0, [pc, #28]	@ (8003d48 <Touchscreen_DrawButton_Undo+0x38>)
 8003d2c:	f7fd f8cc 	bl	8000ec8 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetFont(&Font12);
 8003d30:	4806      	ldr	r0, [pc, #24]	@ (8003d4c <Touchscreen_DrawButton_Undo+0x3c>)
 8003d32:	f7fd f8dd 	bl	8000ef0 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(5000, UNDO_BUTTON_YPOS - 13, (uint8_t *)"Undo", CENTER_MODE);
 8003d36:	2301      	movs	r3, #1
 8003d38:	4a05      	ldr	r2, [pc, #20]	@ (8003d50 <Touchscreen_DrawButton_Undo+0x40>)
 8003d3a:	2157      	movs	r1, #87	@ 0x57
 8003d3c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003d40:	f7fd f9f2 	bl	8001128 <UTIL_LCD_DisplayStringAt>
}
 8003d44:	bf00      	nop
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	ff0000ff 	.word	0xff0000ff
 8003d4c:	24000030 	.word	0x24000030
 8003d50:	080096b0 	.word	0x080096b0

08003d54 <Touchscreen_DrawButton_Redo>:
/**
  * @brief  Draw Redo Button
  * @retval None
  */
void Touchscreen_DrawButton_Redo(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
    UTIL_LCD_FillCircle(REDO_BUTTON_XPOS, REDO_BUTTON_YPOS, REDO_BUTTON_RADIUS, UTIL_LCD_COLOR_GREEN);
 8003d58:	f04f 23ff 	mov.w	r3, #4278255360	@ 0xff00ff00
 8003d5c:	2219      	movs	r2, #25
 8003d5e:	21aa      	movs	r1, #170	@ 0xaa
 8003d60:	f240 10b5 	movw	r0, #437	@ 0x1b5
 8003d64:	f7fd fbfc 	bl	8001560 <UTIL_LCD_FillCircle>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	f7fd f898 	bl	8000ea0 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_GREEN);
 8003d70:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003d74:	f7fd f8a8 	bl	8000ec8 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetFont(&Font12);
 8003d78:	4805      	ldr	r0, [pc, #20]	@ (8003d90 <Touchscreen_DrawButton_Redo+0x3c>)
 8003d7a:	f7fd f8b9 	bl	8000ef0 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(5000, REDO_BUTTON_YPOS - 13, (uint8_t *)"Redo", CENTER_MODE);
 8003d7e:	2301      	movs	r3, #1
 8003d80:	4a04      	ldr	r2, [pc, #16]	@ (8003d94 <Touchscreen_DrawButton_Redo+0x40>)
 8003d82:	219d      	movs	r1, #157	@ 0x9d
 8003d84:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003d88:	f7fd f9ce 	bl	8001128 <UTIL_LCD_DisplayStringAt>
}
 8003d8c:	bf00      	nop
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	24000030 	.word	0x24000030
 8003d94:	080096b8 	.word	0x080096b8

08003d98 <SaveToUndoStack>:
  * @param  y     : y coordinate
  * @param  color : color of the drawing
  * @retval None
  */
void SaveToUndoStack(uint16_t x, uint16_t y, uint32_t color)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	603a      	str	r2, [r7, #0]
 8003da2:	80fb      	strh	r3, [r7, #6]
 8003da4:	460b      	mov	r3, r1
 8003da6:	80bb      	strh	r3, [r7, #4]
    if (undoTop < MAX_HISTORY_SIZE - 1) {
 8003da8:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <SaveToUndoStack+0x60>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b94      	cmp	r3, #148	@ 0x94
 8003dae:	dc1c      	bgt.n	8003dea <SaveToUndoStack+0x52>
        undoStack[++undoTop].x = x;
 8003db0:	4b11      	ldr	r3, [pc, #68]	@ (8003df8 <SaveToUndoStack+0x60>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <SaveToUndoStack+0x60>)
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b0f      	ldr	r3, [pc, #60]	@ (8003df8 <SaveToUndoStack+0x60>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	490f      	ldr	r1, [pc, #60]	@ (8003dfc <SaveToUndoStack+0x64>)
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
        undoStack[undoTop].y = y;
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003df8 <SaveToUndoStack+0x60>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a0c      	ldr	r2, [pc, #48]	@ (8003dfc <SaveToUndoStack+0x64>)
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	88ba      	ldrh	r2, [r7, #4]
 8003dd2:	805a      	strh	r2, [r3, #2]
        undoStack[undoTop].color = color;
 8003dd4:	4b08      	ldr	r3, [pc, #32]	@ (8003df8 <SaveToUndoStack+0x60>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a08      	ldr	r2, [pc, #32]	@ (8003dfc <SaveToUndoStack+0x64>)
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4413      	add	r3, r2
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	605a      	str	r2, [r3, #4]
        redoTop = -1; // Clear redo stack on new action
 8003de2:	4b07      	ldr	r3, [pc, #28]	@ (8003e00 <SaveToUndoStack+0x68>)
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295
 8003de8:	601a      	str	r2, [r3, #0]
    }
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	24000048 	.word	0x24000048
 8003dfc:	24000e1c 	.word	0x24000e1c
 8003e00:	2400004c 	.word	0x2400004c

08003e04 <Undo>:
/**
  * @brief  Perform Undo Operation
  * @retval None
  */
void Undo(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
    if (undoTop >= 0) {
 8003e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e74 <Undo+0x70>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	db2c      	blt.n	8003e6c <Undo+0x68>
        DrawingAction action = undoStack[undoTop--];
 8003e12:	4b18      	ldr	r3, [pc, #96]	@ (8003e74 <Undo+0x70>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	1e5a      	subs	r2, r3, #1
 8003e18:	4916      	ldr	r1, [pc, #88]	@ (8003e74 <Undo+0x70>)
 8003e1a:	600a      	str	r2, [r1, #0]
 8003e1c:	4916      	ldr	r1, [pc, #88]	@ (8003e78 <Undo+0x74>)
 8003e1e:	463a      	mov	r2, r7
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	440b      	add	r3, r1
 8003e24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e28:	e882 0003 	stmia.w	r2, {r0, r1}
        // Clear the drawing at the action position
        UTIL_LCD_FillCircle(action.x, action.y, 10, UTIL_LCD_COLOR_WHITE); // Larger size for undo
 8003e2c:	883b      	ldrh	r3, [r7, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	887b      	ldrh	r3, [r7, #2]
 8003e32:	4619      	mov	r1, r3
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295
 8003e38:	220a      	movs	r2, #10
 8003e3a:	f7fd fb91 	bl	8001560 <UTIL_LCD_FillCircle>
        // Push the action to redo stack
        if (redoTop < MAX_HISTORY_SIZE - 1) {
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e7c <Undo+0x78>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b94      	cmp	r3, #148	@ 0x94
 8003e44:	dc0e      	bgt.n	8003e64 <Undo+0x60>
            redoStack[++redoTop] = action;
 8003e46:	4b0d      	ldr	r3, [pc, #52]	@ (8003e7c <Undo+0x78>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e7c <Undo+0x78>)
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b0a      	ldr	r3, [pc, #40]	@ (8003e7c <Undo+0x78>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0a      	ldr	r2, [pc, #40]	@ (8003e80 <Undo+0x7c>)
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	463a      	mov	r2, r7
 8003e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e60:	e883 0003 	stmia.w	r3, {r0, r1}
        }
        // Redraw the canvas and history
        Touchscreen_DrawCanvas();
 8003e64:	f7ff fe9e 	bl	8003ba4 <Touchscreen_DrawCanvas>
        RedrawCanvas();
 8003e68:	f000 f848 	bl	8003efc <RedrawCanvas>
    }
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	24000048 	.word	0x24000048
 8003e78:	24000e1c 	.word	0x24000e1c
 8003e7c:	2400004c 	.word	0x2400004c
 8003e80:	240012cc 	.word	0x240012cc

08003e84 <Redo>:
/**
  * @brief  Perform Redo Operation
  * @retval None
  */
void Redo(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
    if (redoTop >= 0) {
 8003e8a:	4b18      	ldr	r3, [pc, #96]	@ (8003eec <Redo+0x68>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	db27      	blt.n	8003ee2 <Redo+0x5e>
        DrawingAction action = redoStack[redoTop--];
 8003e92:	4b16      	ldr	r3, [pc, #88]	@ (8003eec <Redo+0x68>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	1e5a      	subs	r2, r3, #1
 8003e98:	4914      	ldr	r1, [pc, #80]	@ (8003eec <Redo+0x68>)
 8003e9a:	600a      	str	r2, [r1, #0]
 8003e9c:	4914      	ldr	r1, [pc, #80]	@ (8003ef0 <Redo+0x6c>)
 8003e9e:	463a      	mov	r2, r7
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ea8:	e882 0003 	stmia.w	r2, {r0, r1}
        // Draw the action on the canvas
        UTIL_LCD_FillCircle(action.x, action.y, 5, action.color);
 8003eac:	883b      	ldrh	r3, [r7, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	887b      	ldrh	r3, [r7, #2]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2205      	movs	r2, #5
 8003eb8:	f7fd fb52 	bl	8001560 <UTIL_LCD_FillCircle>
        // Push the action to undo stack
        if (undoTop < MAX_HISTORY_SIZE - 1) {
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <Redo+0x70>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b94      	cmp	r3, #148	@ 0x94
 8003ec2:	dc0e      	bgt.n	8003ee2 <Redo+0x5e>
            undoStack[++undoTop] = action;
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <Redo+0x70>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef4 <Redo+0x70>)
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <Redo+0x70>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <Redo+0x74>)
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	463a      	mov	r2, r7
 8003eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ede:	e883 0003 	stmia.w	r3, {r0, r1}
        }
    }
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	2400004c 	.word	0x2400004c
 8003ef0:	240012cc 	.word	0x240012cc
 8003ef4:	24000048 	.word	0x24000048
 8003ef8:	24000e1c 	.word	0x24000e1c

08003efc <RedrawCanvas>:
/**
  * @brief  Redraw Canvas with History
  * @retval None
  */
void RedrawCanvas(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
    // Redraw the entire canvas by scanning through the history
    for (int i = 0; i <= undoTop; i++) {
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	e015      	b.n	8003f34 <RedrawCanvas+0x38>
        UTIL_LCD_FillCircle(undoStack[i].x, undoStack[i].y, 5, undoStack[i].color);
 8003f08:	4a0f      	ldr	r2, [pc, #60]	@ (8003f48 <RedrawCanvas+0x4c>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8003f10:	4618      	mov	r0, r3
 8003f12:	4a0d      	ldr	r2, [pc, #52]	@ (8003f48 <RedrawCanvas+0x4c>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	885b      	ldrh	r3, [r3, #2]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f48 <RedrawCanvas+0x4c>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2205      	movs	r2, #5
 8003f2a:	f7fd fb19 	bl	8001560 <UTIL_LCD_FillCircle>
    for (int i = 0; i <= undoTop; i++) {
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3301      	adds	r3, #1
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <RedrawCanvas+0x50>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	dde4      	ble.n	8003f08 <RedrawCanvas+0xc>
    }
}
 8003f3e:	bf00      	nop
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	24000e1c 	.word	0x24000e1c
 8003f4c:	24000048 	.word	0x24000048

08003f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f54:	f7ff fc84 	bl	8003860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f58:	480c      	ldr	r0, [pc, #48]	@ (8003f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f5a:	490d      	ldr	r1, [pc, #52]	@ (8003f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f60:	e002      	b.n	8003f68 <LoopCopyDataInit>

08003f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f66:	3304      	adds	r3, #4

08003f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f6c:	d3f9      	bcc.n	8003f62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f70:	4c0a      	ldr	r4, [pc, #40]	@ (8003f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f74:	e001      	b.n	8003f7a <LoopFillZerobss>

08003f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f78:	3204      	adds	r2, #4

08003f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f7c:	d3fb      	bcc.n	8003f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f7e:	f005 fb5f 	bl	8009640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f82:	f7fc fe15 	bl	8000bb0 <main>
  bx  lr
 8003f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003f8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f90:	24000058 	.word	0x24000058
  ldr r2, =_sidata
 8003f94:	08009c18 	.word	0x08009c18
  ldr r2, =_sbss
 8003f98:	24000058 	.word	0x24000058
  ldr r4, =_ebss
 8003f9c:	240017cc 	.word	0x240017cc

08003fa0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fa0:	e7fe      	b.n	8003fa0 <ADC3_IRQHandler>
	...

08003fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003faa:	2003      	movs	r0, #3
 8003fac:	f000 f943 	bl	8004236 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fb0:	f002 fff2 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b15      	ldr	r3, [pc, #84]	@ (800400c <HAL_Init+0x68>)
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	4913      	ldr	r1, [pc, #76]	@ (8004010 <HAL_Init+0x6c>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fce:	4b0f      	ldr	r3, [pc, #60]	@ (800400c <HAL_Init+0x68>)
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8004010 <HAL_Init+0x6c>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8004014 <HAL_Init+0x70>)
 8003fe6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8004018 <HAL_Init+0x74>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fee:	200f      	movs	r0, #15
 8003ff0:	f005 f99a 	bl	8009328 <HAL_InitTick>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e002      	b.n	8004004 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ffe:	f7ff fbdb 	bl	80037b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	58024400 	.word	0x58024400
 8004010:	08009bec 	.word	0x08009bec
 8004014:	24000044 	.word	0x24000044
 8004018:	24000040 	.word	0x24000040

0800401c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004020:	4b06      	ldr	r3, [pc, #24]	@ (800403c <HAL_IncTick+0x20>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <HAL_IncTick+0x24>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4413      	add	r3, r2
 800402c:	4a04      	ldr	r2, [pc, #16]	@ (8004040 <HAL_IncTick+0x24>)
 800402e:	6013      	str	r3, [r2, #0]
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	24000054 	.word	0x24000054
 8004040:	2400177c 	.word	0x2400177c

08004044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return uwTick;
 8004048:	4b03      	ldr	r3, [pc, #12]	@ (8004058 <HAL_GetTick+0x14>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	2400177c 	.word	0x2400177c

0800405c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004064:	f7ff ffee 	bl	8004044 <HAL_GetTick>
 8004068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d005      	beq.n	8004082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004076:	4b0a      	ldr	r3, [pc, #40]	@ (80040a0 <HAL_Delay+0x44>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004082:	bf00      	nop
 8004084:	f7ff ffde 	bl	8004044 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	429a      	cmp	r2, r3
 8004092:	d8f7      	bhi.n	8004084 <HAL_Delay+0x28>
  {
  }
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	24000054 	.word	0x24000054

080040a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80040a8:	4b03      	ldr	r3, [pc, #12]	@ (80040b8 <HAL_GetREVID+0x14>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0c1b      	lsrs	r3, r3, #16
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	5c001000 	.word	0x5c001000

080040bc <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_EnableCompensationCell+0x1c>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4a04      	ldr	r2, [pc, #16]	@ (80040d8 <HAL_EnableCompensationCell+0x1c>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6213      	str	r3, [r2, #32]
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	58000400 	.word	0x58000400

080040dc <__NVIC_SetPriorityGrouping>:
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040ec:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <__NVIC_SetPriorityGrouping+0x40>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040f8:	4013      	ands	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <__NVIC_SetPriorityGrouping+0x44>)
 8004106:	4313      	orrs	r3, r2
 8004108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800410a:	4a04      	ldr	r2, [pc, #16]	@ (800411c <__NVIC_SetPriorityGrouping+0x40>)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	60d3      	str	r3, [r2, #12]
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	e000ed00 	.word	0xe000ed00
 8004120:	05fa0000 	.word	0x05fa0000

08004124 <__NVIC_GetPriorityGrouping>:
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004128:	4b04      	ldr	r3, [pc, #16]	@ (800413c <__NVIC_GetPriorityGrouping+0x18>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	f003 0307 	and.w	r3, r3, #7
}
 8004132:	4618      	mov	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <__NVIC_EnableIRQ>:
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800414a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800414e:	2b00      	cmp	r3, #0
 8004150:	db0b      	blt.n	800416a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	f003 021f 	and.w	r2, r3, #31
 8004158:	4907      	ldr	r1, [pc, #28]	@ (8004178 <__NVIC_EnableIRQ+0x38>)
 800415a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2001      	movs	r0, #1
 8004162:	fa00 f202 	lsl.w	r2, r0, r2
 8004166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000e100 	.word	0xe000e100

0800417c <__NVIC_SetPriority>:
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	6039      	str	r1, [r7, #0]
 8004186:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800418c:	2b00      	cmp	r3, #0
 800418e:	db0a      	blt.n	80041a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	b2da      	uxtb	r2, r3
 8004194:	490c      	ldr	r1, [pc, #48]	@ (80041c8 <__NVIC_SetPriority+0x4c>)
 8004196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800419a:	0112      	lsls	r2, r2, #4
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	440b      	add	r3, r1
 80041a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80041a4:	e00a      	b.n	80041bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4908      	ldr	r1, [pc, #32]	@ (80041cc <__NVIC_SetPriority+0x50>)
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	3b04      	subs	r3, #4
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	440b      	add	r3, r1
 80041ba:	761a      	strb	r2, [r3, #24]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	e000e100 	.word	0xe000e100
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <NVIC_EncodePriority>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	@ 0x24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f1c3 0307 	rsb	r3, r3, #7
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	bf28      	it	cs
 80041ee:	2304      	movcs	r3, #4
 80041f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3304      	adds	r3, #4
 80041f6:	2b06      	cmp	r3, #6
 80041f8:	d902      	bls.n	8004200 <NVIC_EncodePriority+0x30>
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3b03      	subs	r3, #3
 80041fe:	e000      	b.n	8004202 <NVIC_EncodePriority+0x32>
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004204:	f04f 32ff 	mov.w	r2, #4294967295
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43da      	mvns	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	401a      	ands	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004218:	f04f 31ff 	mov.w	r1, #4294967295
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43d9      	mvns	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004228:	4313      	orrs	r3, r2
}
 800422a:	4618      	mov	r0, r3
 800422c:	3724      	adds	r7, #36	@ 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff ff4c 	bl	80040dc <__NVIC_SetPriorityGrouping>
}
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800425a:	f7ff ff63 	bl	8004124 <__NVIC_GetPriorityGrouping>
 800425e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	6978      	ldr	r0, [r7, #20]
 8004266:	f7ff ffb3 	bl	80041d0 <NVIC_EncodePriority>
 800426a:	4602      	mov	r2, r0
 800426c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff ff82 	bl	800417c <__NVIC_SetPriority>
}
 8004278:	bf00      	nop
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800428a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ff56 	bl	8004140 <__NVIC_EnableIRQ>
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e04f      	b.n	800434e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f84e 	bl	8004364 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b20      	ldr	r3, [pc, #128]	@ (8004358 <HAL_DMA2D_Init+0xbc>)
 80042d8:	4013      	ands	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6851      	ldr	r1, [r2, #4]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	69d2      	ldr	r2, [r2, #28]
 80042e2:	4311      	orrs	r1, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	430b      	orrs	r3, r1
 80042ea:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042f2:	4b1a      	ldr	r3, [pc, #104]	@ (800435c <HAL_DMA2D_Init+0xc0>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6891      	ldr	r1, [r2, #8]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6992      	ldr	r2, [r2, #24]
 80042fe:	4311      	orrs	r1, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	430b      	orrs	r3, r1
 8004306:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800430e:	4b14      	ldr	r3, [pc, #80]	@ (8004360 <HAL_DMA2D_Init+0xc4>)
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68d1      	ldr	r1, [r2, #12]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	430b      	orrs	r3, r1
 800431c:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004324:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	051a      	lsls	r2, r3, #20
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	055b      	lsls	r3, r3, #21
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	fff8ffbf 	.word	0xfff8ffbf
 800435c:	fffffef8 	.word	0xfffffef8
 8004360:	ffff0000 	.word	0xffff0000

08004364 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_DMA2D_Start+0x1c>
 8004390:	2302      	movs	r3, #2
 8004392:	e018      	b.n	80043c6 <HAL_DMA2D_Start+0x4e>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f9a4 	bl	80046fc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b086      	sub	sp, #24
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d056      	beq.n	8004498 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ea:	f7ff fe2b 	bl	8004044 <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80043f0:	e04b      	b.n	800448a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004400:	2b00      	cmp	r3, #0
 8004402:	d023      	beq.n	800444c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004412:	f043 0202 	orr.w	r2, r3, #2
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004428:	f043 0201 	orr.w	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2221      	movs	r2, #33	@ 0x21
 8004436:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2204      	movs	r2, #4
 800443c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0a5      	b.n	8004598 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d01a      	beq.n	800448a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004454:	f7ff fdf6 	bl	8004044 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d302      	bcc.n	800446a <HAL_DMA2D_PollForTransfer+0x9c>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10f      	bne.n	800448a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800446e:	f043 0220 	orr.w	r2, r3, #32
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2203      	movs	r2, #3
 800447a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e086      	b.n	8004598 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ac      	beq.n	80043f2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d061      	beq.n	800457e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80044ba:	f7ff fdc3 	bl	8004044 <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80044c0:	e056      	b.n	8004570 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d02e      	beq.n	8004532 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044e2:	f043 0204 	orr.w	r2, r3, #4
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044f8:	f043 0202 	orr.w	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800450e:	f043 0201 	orr.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2229      	movs	r2, #41	@ 0x29
 800451c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2204      	movs	r2, #4
 8004522:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e032      	b.n	8004598 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d01a      	beq.n	8004570 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7ff fd83 	bl	8004044 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <HAL_DMA2D_PollForTransfer+0x182>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10f      	bne.n	8004570 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2203      	movs	r2, #3
 8004560:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e013      	b.n	8004598 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0a1      	beq.n	80044c2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2212      	movs	r2, #18
 8004584:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_DMA2D_ConfigLayer+0x24>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e092      	b.n	80046ea <HAL_DMA2D_ConfigLayer+0x14a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	3328      	adds	r3, #40	@ 0x28
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80045f8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004604:	4b3c      	ldr	r3, [pc, #240]	@ (80046f8 <HAL_DMA2D_ConfigLayer+0x158>)
 8004606:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b0a      	cmp	r3, #10
 800460e:	d003      	beq.n	8004618 <HAL_DMA2D_ConfigLayer+0x78>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b09      	cmp	r3, #9
 8004616:	d107      	bne.n	8004628 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e005      	b.n	8004634 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d120      	bne.n	800467c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	43db      	mvns	r3, r3
 8004644:	ea02 0103 	and.w	r1, r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	430a      	orrs	r2, r1
 8004650:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b0a      	cmp	r3, #10
 8004662:	d003      	beq.n	800466c <HAL_DMA2D_ConfigLayer+0xcc>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b09      	cmp	r3, #9
 800466a:	d135      	bne.n	80046d8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004678:	629a      	str	r2, [r3, #40]	@ 0x28
 800467a:	e02d      	b.n	80046d8 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b0b      	cmp	r3, #11
 8004682:	d109      	bne.n	8004698 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	049b      	lsls	r3, r3, #18
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8004696:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	43db      	mvns	r3, r3
 80046a2:	ea02 0103 	and.w	r1, r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b0a      	cmp	r3, #10
 80046c0:	d003      	beq.n	80046ca <HAL_DMA2D_ConfigLayer+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b09      	cmp	r3, #9
 80046c8:	d106      	bne.n	80046d8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80046d6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	ff33000f 	.word	0xff33000f

080046fc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b08b      	sub	sp, #44	@ 0x2c
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004710:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	041a      	lsls	r2, r3, #16
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471a:	431a      	orrs	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004734:	d174      	bne.n	8004820 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800473c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004744:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800474c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d108      	bne.n	800476e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	431a      	orrs	r2, r3
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	4313      	orrs	r3, r2
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
 800476c:	e053      	b.n	8004816 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d106      	bne.n	8004784 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4313      	orrs	r3, r2
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
 8004782:	e048      	b.n	8004816 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d111      	bne.n	80047b0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	0cdb      	lsrs	r3, r3, #19
 8004790:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	0a9b      	lsrs	r3, r3, #10
 8004796:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	02db      	lsls	r3, r3, #11
 80047a6:	4313      	orrs	r3, r2
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ae:	e032      	b.n	8004816 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d117      	bne.n	80047e8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	0fdb      	lsrs	r3, r3, #31
 80047bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	0cdb      	lsrs	r3, r3, #19
 80047c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	0adb      	lsrs	r3, r3, #11
 80047c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	08db      	lsrs	r3, r3, #3
 80047ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	029b      	lsls	r3, r3, #10
 80047d8:	431a      	orrs	r2, r3
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	03db      	lsls	r3, r3, #15
 80047de:	4313      	orrs	r3, r2
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e6:	e016      	b.n	8004816 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	0f1b      	lsrs	r3, r3, #28
 80047ec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	0d1b      	lsrs	r3, r3, #20
 80047f2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	0b1b      	lsrs	r3, r3, #12
 80047f8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	011a      	lsls	r2, r3, #4
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	431a      	orrs	r2, r3
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	031b      	lsls	r3, r3, #12
 800480e:	4313      	orrs	r3, r2
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800481e:	e00d      	b.n	800483c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004828:	d104      	bne.n	8004834 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	615a      	str	r2, [r3, #20]
}
 8004832:	e003      	b.n	800483c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	60da      	str	r2, [r3, #12]
}
 800483c:	bf00      	nop
 800483e:	372c      	adds	r7, #44	@ 0x2c
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	2201      	movs	r2, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	011a      	lsls	r2, r3, #4
 8004870:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <HAL_EXTI_IRQHandler+0x5c>)
 8004872:	4413      	add	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4013      	ands	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4798      	blx	r3
    }
  }
}
 800489a:	bf00      	nop
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	58000088 	.word	0x58000088

080048a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	@ 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048b6:	4b89      	ldr	r3, [pc, #548]	@ (8004adc <HAL_GPIO_Init+0x234>)
 80048b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ba:	e194      	b.n	8004be6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2101      	movs	r1, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8186 	beq.w	8004be0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d005      	beq.n	80048ec <HAL_GPIO_Init+0x44>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d130      	bne.n	800494e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004922:	2201      	movs	r2, #1
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0201 	and.w	r2, r3, #1
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b03      	cmp	r3, #3
 8004958:	d017      	beq.n	800498a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2203      	movs	r2, #3
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d123      	bne.n	80049de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	08da      	lsrs	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3208      	adds	r2, #8
 800499e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	08da      	lsrs	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3208      	adds	r2, #8
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	2203      	movs	r2, #3
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4013      	ands	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 0203 	and.w	r2, r3, #3
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80e0 	beq.w	8004be0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a20:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a26:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a3e:	4a29      	ldr	r2, [pc, #164]	@ (8004ae4 <HAL_GPIO_Init+0x23c>)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	220f      	movs	r2, #15
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a20      	ldr	r2, [pc, #128]	@ (8004ae8 <HAL_GPIO_Init+0x240>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d052      	beq.n	8004b10 <HAL_GPIO_Init+0x268>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004aec <HAL_GPIO_Init+0x244>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d031      	beq.n	8004ad6 <HAL_GPIO_Init+0x22e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1e      	ldr	r2, [pc, #120]	@ (8004af0 <HAL_GPIO_Init+0x248>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02b      	beq.n	8004ad2 <HAL_GPIO_Init+0x22a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <HAL_GPIO_Init+0x24c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d025      	beq.n	8004ace <HAL_GPIO_Init+0x226>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <HAL_GPIO_Init+0x250>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01f      	beq.n	8004aca <HAL_GPIO_Init+0x222>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004afc <HAL_GPIO_Init+0x254>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d019      	beq.n	8004ac6 <HAL_GPIO_Init+0x21e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1a      	ldr	r2, [pc, #104]	@ (8004b00 <HAL_GPIO_Init+0x258>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_GPIO_Init+0x21a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <HAL_GPIO_Init+0x25c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00d      	beq.n	8004abe <HAL_GPIO_Init+0x216>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <HAL_GPIO_Init+0x260>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <HAL_GPIO_Init+0x212>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a17      	ldr	r2, [pc, #92]	@ (8004b0c <HAL_GPIO_Init+0x264>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d101      	bne.n	8004ab6 <HAL_GPIO_Init+0x20e>
 8004ab2:	2309      	movs	r3, #9
 8004ab4:	e02d      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ab6:	230a      	movs	r3, #10
 8004ab8:	e02b      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004aba:	2308      	movs	r3, #8
 8004abc:	e029      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004abe:	2307      	movs	r3, #7
 8004ac0:	e027      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ac2:	2306      	movs	r3, #6
 8004ac4:	e025      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ac6:	2305      	movs	r3, #5
 8004ac8:	e023      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004aca:	2304      	movs	r3, #4
 8004acc:	e021      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e01f      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e01d      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e01b      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ada:	bf00      	nop
 8004adc:	58000080 	.word	0x58000080
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	58000400 	.word	0x58000400
 8004ae8:	58020000 	.word	0x58020000
 8004aec:	58020400 	.word	0x58020400
 8004af0:	58020800 	.word	0x58020800
 8004af4:	58020c00 	.word	0x58020c00
 8004af8:	58021000 	.word	0x58021000
 8004afc:	58021400 	.word	0x58021400
 8004b00:	58021800 	.word	0x58021800
 8004b04:	58021c00 	.word	0x58021c00
 8004b08:	58022000 	.word	0x58022000
 8004b0c:	58022400 	.word	0x58022400
 8004b10:	2300      	movs	r3, #0
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	f002 0203 	and.w	r2, r2, #3
 8004b18:	0092      	lsls	r2, r2, #2
 8004b1a:	4093      	lsls	r3, r2
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b22:	4938      	ldr	r1, [pc, #224]	@ (8004c04 <HAL_GPIO_Init+0x35c>)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	3302      	adds	r3, #2
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	3301      	adds	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f ae63 	bne.w	80048bc <HAL_GPIO_Init+0x14>
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	3724      	adds	r7, #36	@ 0x24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	58000400 	.word	0x58000400

08004c08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c16:	4b75      	ldr	r3, [pc, #468]	@ (8004dec <HAL_GPIO_DeInit+0x1e4>)
 8004c18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004c1a:	e0d9      	b.n	8004dd0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	4013      	ands	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 80cc 	beq.w	8004dca <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004c32:	4a6f      	ldr	r2, [pc, #444]	@ (8004df0 <HAL_GPIO_DeInit+0x1e8>)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	3302      	adds	r3, #2
 8004c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	220f      	movs	r2, #15
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a67      	ldr	r2, [pc, #412]	@ (8004df4 <HAL_GPIO_DeInit+0x1ec>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d037      	beq.n	8004ccc <HAL_GPIO_DeInit+0xc4>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a66      	ldr	r2, [pc, #408]	@ (8004df8 <HAL_GPIO_DeInit+0x1f0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d031      	beq.n	8004cc8 <HAL_GPIO_DeInit+0xc0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a65      	ldr	r2, [pc, #404]	@ (8004dfc <HAL_GPIO_DeInit+0x1f4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d02b      	beq.n	8004cc4 <HAL_GPIO_DeInit+0xbc>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a64      	ldr	r2, [pc, #400]	@ (8004e00 <HAL_GPIO_DeInit+0x1f8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d025      	beq.n	8004cc0 <HAL_GPIO_DeInit+0xb8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a63      	ldr	r2, [pc, #396]	@ (8004e04 <HAL_GPIO_DeInit+0x1fc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d01f      	beq.n	8004cbc <HAL_GPIO_DeInit+0xb4>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a62      	ldr	r2, [pc, #392]	@ (8004e08 <HAL_GPIO_DeInit+0x200>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d019      	beq.n	8004cb8 <HAL_GPIO_DeInit+0xb0>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a61      	ldr	r2, [pc, #388]	@ (8004e0c <HAL_GPIO_DeInit+0x204>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_GPIO_DeInit+0xac>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a60      	ldr	r2, [pc, #384]	@ (8004e10 <HAL_GPIO_DeInit+0x208>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00d      	beq.n	8004cb0 <HAL_GPIO_DeInit+0xa8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a5f      	ldr	r2, [pc, #380]	@ (8004e14 <HAL_GPIO_DeInit+0x20c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <HAL_GPIO_DeInit+0xa4>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004e18 <HAL_GPIO_DeInit+0x210>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_GPIO_DeInit+0xa0>
 8004ca4:	2309      	movs	r3, #9
 8004ca6:	e012      	b.n	8004cce <HAL_GPIO_DeInit+0xc6>
 8004ca8:	230a      	movs	r3, #10
 8004caa:	e010      	b.n	8004cce <HAL_GPIO_DeInit+0xc6>
 8004cac:	2308      	movs	r3, #8
 8004cae:	e00e      	b.n	8004cce <HAL_GPIO_DeInit+0xc6>
 8004cb0:	2307      	movs	r3, #7
 8004cb2:	e00c      	b.n	8004cce <HAL_GPIO_DeInit+0xc6>
 8004cb4:	2306      	movs	r3, #6
 8004cb6:	e00a      	b.n	8004cce <HAL_GPIO_DeInit+0xc6>
 8004cb8:	2305      	movs	r3, #5
 8004cba:	e008      	b.n	8004cce <HAL_GPIO_DeInit+0xc6>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	e006      	b.n	8004cce <HAL_GPIO_DeInit+0xc6>
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e004      	b.n	8004cce <HAL_GPIO_DeInit+0xc6>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e002      	b.n	8004cce <HAL_GPIO_DeInit+0xc6>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_GPIO_DeInit+0xc6>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	f002 0203 	and.w	r2, r2, #3
 8004cd4:	0092      	lsls	r2, r2, #2
 8004cd6:	4093      	lsls	r3, r2
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d136      	bne.n	8004d4c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	401a      	ands	r2, r3
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	43db      	mvns	r3, r3
 8004d04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d08:	4013      	ands	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	220f      	movs	r2, #15
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004d2e:	4a30      	ldr	r2, [pc, #192]	@ (8004df0 <HAL_GPIO_DeInit+0x1e8>)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	3302      	adds	r3, #2
 8004d36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	43da      	mvns	r2, r3
 8004d3e:	482c      	ldr	r0, [pc, #176]	@ (8004df0 <HAL_GPIO_DeInit+0x1e8>)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	089b      	lsrs	r3, r3, #2
 8004d44:	400a      	ands	r2, r1
 8004d46:	3302      	adds	r3, #2
 8004d48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	2103      	movs	r1, #3
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	08da      	lsrs	r2, r3, #3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3208      	adds	r2, #8
 8004d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	220f      	movs	r2, #15
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	08d2      	lsrs	r2, r2, #3
 8004d80:	4019      	ands	r1, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3208      	adds	r2, #8
 8004d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	2103      	movs	r1, #3
 8004d94:	fa01 f303 	lsl.w	r3, r1, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	2101      	movs	r1, #1
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	401a      	ands	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	2103      	movs	r1, #3
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f47f af1f 	bne.w	8004c1c <HAL_GPIO_DeInit+0x14>
  }
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	58000080 	.word	0x58000080
 8004df0:	58000400 	.word	0x58000400
 8004df4:	58020000 	.word	0x58020000
 8004df8:	58020400 	.word	0x58020400
 8004dfc:	58020800 	.word	0x58020800
 8004e00:	58020c00 	.word	0x58020c00
 8004e04:	58021000 	.word	0x58021000
 8004e08:	58021400 	.word	0x58021400
 8004e0c:	58021800 	.word	0x58021800
 8004e10:	58021c00 	.word	0x58021c00
 8004e14:	58022000 	.word	0x58022000
 8004e18:	58022400 	.word	0x58022400

08004e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	807b      	strh	r3, [r7, #2]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e2c:	787b      	ldrb	r3, [r7, #1]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e32:	887a      	ldrh	r2, [r7, #2]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e38:	e003      	b.n	8004e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e3a:	887b      	ldrh	r3, [r7, #2]
 8004e3c:	041a      	lsls	r2, r3, #16
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	619a      	str	r2, [r3, #24]
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e07f      	b.n	8004f62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f8a9 	bl	8004fce <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	@ 0x24
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ea0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d107      	bne.n	8004eca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	e006      	b.n	8004ed8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ed6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d104      	bne.n	8004eea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ee8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6859      	ldr	r1, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f6c <HAL_I2C_Init+0x11c>)
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69d9      	ldr	r1, [r3, #28]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1a      	ldr	r2, [r3, #32]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	02008000 	.word	0x02008000

08004f70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e021      	b.n	8004fc6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2224      	movs	r2, #36	@ 0x24
 8004f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f821 	bl	8004fe2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	4603      	mov	r3, r0
 8005008:	817b      	strh	r3, [r7, #10]
 800500a:	460b      	mov	r3, r1
 800500c:	813b      	strh	r3, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b20      	cmp	r3, #32
 800501c:	f040 80f9 	bne.w	8005212 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_I2C_Mem_Write+0x34>
 8005026:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005032:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0ed      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_I2C_Mem_Write+0x4e>
 8005042:	2302      	movs	r3, #2
 8005044:	e0e6      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800504e:	f7fe fff9 	bl	8004044 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2319      	movs	r3, #25
 800505a:	2201      	movs	r2, #1
 800505c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fadd 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0d1      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2221      	movs	r2, #33	@ 0x21
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2240      	movs	r2, #64	@ 0x40
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a3a      	ldr	r2, [r7, #32]
 800508a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005098:	88f8      	ldrh	r0, [r7, #6]
 800509a:	893a      	ldrh	r2, [r7, #8]
 800509c:	8979      	ldrh	r1, [r7, #10]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	4603      	mov	r3, r0
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f9ed 	bl	8005488 <I2C_RequestMemoryWrite>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0a9      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2bff      	cmp	r3, #255	@ 0xff
 80050c8:	d90e      	bls.n	80050e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	22ff      	movs	r2, #255	@ 0xff
 80050ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	8979      	ldrh	r1, [r7, #10]
 80050d8:	2300      	movs	r3, #0
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fc57 	bl	8005994 <I2C_TransferConfig>
 80050e6:	e00f      	b.n	8005108 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	8979      	ldrh	r1, [r7, #10]
 80050fa:	2300      	movs	r3, #0
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fc46 	bl	8005994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fad6 	bl	80056be <I2C_WaitOnTXISFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e07b      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d034      	beq.n	80051c0 <HAL_I2C_Mem_Write+0x1c8>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d130      	bne.n	80051c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	2200      	movs	r2, #0
 8005166:	2180      	movs	r1, #128	@ 0x80
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fa59 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e04d      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	2bff      	cmp	r3, #255	@ 0xff
 8005180:	d90e      	bls.n	80051a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	22ff      	movs	r2, #255	@ 0xff
 8005186:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518c:	b2da      	uxtb	r2, r3
 800518e:	8979      	ldrh	r1, [r7, #10]
 8005190:	2300      	movs	r3, #0
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fbfb 	bl	8005994 <I2C_TransferConfig>
 800519e:	e00f      	b.n	80051c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	8979      	ldrh	r1, [r7, #10]
 80051b2:	2300      	movs	r3, #0
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fbea 	bl	8005994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d19e      	bne.n	8005108 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fabc 	bl	800574c <I2C_WaitOnSTOPFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e01a      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2220      	movs	r2, #32
 80051e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <HAL_I2C_Mem_Write+0x224>)
 80051f2:	400b      	ands	r3, r1
 80051f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e000      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005212:	2302      	movs	r3, #2
  }
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	fe00e800 	.word	0xfe00e800

08005220 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	461a      	mov	r2, r3
 800522e:	4603      	mov	r3, r0
 8005230:	817b      	strh	r3, [r7, #10]
 8005232:	460b      	mov	r3, r1
 8005234:	813b      	strh	r3, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b20      	cmp	r3, #32
 8005244:	f040 80fd 	bne.w	8005442 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_I2C_Mem_Read+0x34>
 800524e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800525a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0f1      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_I2C_Mem_Read+0x4e>
 800526a:	2302      	movs	r3, #2
 800526c:	e0ea      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005276:	f7fe fee5 	bl	8004044 <HAL_GetTick>
 800527a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2319      	movs	r3, #25
 8005282:	2201      	movs	r2, #1
 8005284:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f9c9 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0d5      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2222      	movs	r2, #34	@ 0x22
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2240      	movs	r2, #64	@ 0x40
 80052a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052c0:	88f8      	ldrh	r0, [r7, #6]
 80052c2:	893a      	ldrh	r2, [r7, #8]
 80052c4:	8979      	ldrh	r1, [r7, #10]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	4603      	mov	r3, r0
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f92d 	bl	8005530 <I2C_RequestMemoryRead>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0ad      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2bff      	cmp	r3, #255	@ 0xff
 80052f0:	d90e      	bls.n	8005310 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	22ff      	movs	r2, #255	@ 0xff
 80052f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	8979      	ldrh	r1, [r7, #10]
 8005300:	4b52      	ldr	r3, [pc, #328]	@ (800544c <HAL_I2C_Mem_Read+0x22c>)
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fb43 	bl	8005994 <I2C_TransferConfig>
 800530e:	e00f      	b.n	8005330 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531e:	b2da      	uxtb	r2, r3
 8005320:	8979      	ldrh	r1, [r7, #10]
 8005322:	4b4a      	ldr	r3, [pc, #296]	@ (800544c <HAL_I2C_Mem_Read+0x22c>)
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 fb32 	bl	8005994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	2200      	movs	r2, #0
 8005338:	2104      	movs	r1, #4
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f970 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e07c      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d034      	beq.n	80053f0 <HAL_I2C_Mem_Read+0x1d0>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d130      	bne.n	80053f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	2200      	movs	r2, #0
 8005396:	2180      	movs	r1, #128	@ 0x80
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f941 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e04d      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2bff      	cmp	r3, #255	@ 0xff
 80053b0:	d90e      	bls.n	80053d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	22ff      	movs	r2, #255	@ 0xff
 80053b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	8979      	ldrh	r1, [r7, #10]
 80053c0:	2300      	movs	r3, #0
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fae3 	bl	8005994 <I2C_TransferConfig>
 80053ce:	e00f      	b.n	80053f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	8979      	ldrh	r1, [r7, #10]
 80053e2:	2300      	movs	r3, #0
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 fad2 	bl	8005994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d19a      	bne.n	8005330 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f9a4 	bl	800574c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e01a      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2220      	movs	r2, #32
 8005414:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6859      	ldr	r1, [r3, #4]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_I2C_Mem_Read+0x230>)
 8005422:	400b      	ands	r3, r1
 8005424:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	e000      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	80002400 	.word	0x80002400
 8005450:	fe00e800 	.word	0xfe00e800

08005454 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005462:	b2db      	uxtb	r3, r3
}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	461a      	mov	r2, r3
 8005496:	4603      	mov	r3, r0
 8005498:	817b      	strh	r3, [r7, #10]
 800549a:	460b      	mov	r3, r1
 800549c:	813b      	strh	r3, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	8979      	ldrh	r1, [r7, #10]
 80054a8:	4b20      	ldr	r3, [pc, #128]	@ (800552c <I2C_RequestMemoryWrite+0xa4>)
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fa6f 	bl	8005994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	69b9      	ldr	r1, [r7, #24]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f8ff 	bl	80056be <I2C_WaitOnTXISFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e02c      	b.n	8005524 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d105      	bne.n	80054dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054d0:	893b      	ldrh	r3, [r7, #8]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80054da:	e015      	b.n	8005508 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054dc:	893b      	ldrh	r3, [r7, #8]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	69b9      	ldr	r1, [r7, #24]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f8e5 	bl	80056be <I2C_WaitOnTXISFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e012      	b.n	8005524 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054fe:	893b      	ldrh	r3, [r7, #8]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2200      	movs	r2, #0
 8005510:	2180      	movs	r1, #128	@ 0x80
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f884 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	80002000 	.word	0x80002000

08005530 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	4608      	mov	r0, r1
 800553a:	4611      	mov	r1, r2
 800553c:	461a      	mov	r2, r3
 800553e:	4603      	mov	r3, r0
 8005540:	817b      	strh	r3, [r7, #10]
 8005542:	460b      	mov	r3, r1
 8005544:	813b      	strh	r3, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	b2da      	uxtb	r2, r3
 800554e:	8979      	ldrh	r1, [r7, #10]
 8005550:	4b20      	ldr	r3, [pc, #128]	@ (80055d4 <I2C_RequestMemoryRead+0xa4>)
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	2300      	movs	r3, #0
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fa1c 	bl	8005994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	69b9      	ldr	r1, [r7, #24]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f8ac 	bl	80056be <I2C_WaitOnTXISFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e02c      	b.n	80055ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005570:	88fb      	ldrh	r3, [r7, #6]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d105      	bne.n	8005582 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005576:	893b      	ldrh	r3, [r7, #8]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005580:	e015      	b.n	80055ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005582:	893b      	ldrh	r3, [r7, #8]
 8005584:	0a1b      	lsrs	r3, r3, #8
 8005586:	b29b      	uxth	r3, r3
 8005588:	b2da      	uxtb	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	69b9      	ldr	r1, [r7, #24]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f892 	bl	80056be <I2C_WaitOnTXISFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e012      	b.n	80055ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055a4:	893b      	ldrh	r3, [r7, #8]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2200      	movs	r2, #0
 80055b6:	2140      	movs	r1, #64	@ 0x40
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f831 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	80002000 	.word	0x80002000

080055d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d103      	bne.n	80055f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	d007      	beq.n	8005614 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	619a      	str	r2, [r3, #24]
  }
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4613      	mov	r3, r2
 800562e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005630:	e031      	b.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005638:	d02d      	beq.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563a:	f7fe fd03 	bl	8004044 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d302      	bcc.n	8005650 <I2C_WaitOnFlagUntilTimeout+0x30>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d122      	bne.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4013      	ands	r3, r2
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	429a      	cmp	r2, r3
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	429a      	cmp	r2, r3
 800566c:	d113      	bne.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e00f      	b.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4013      	ands	r3, r2
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	bf0c      	ite	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	2300      	movne	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d0be      	beq.n	8005632 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056ca:	e033      	b.n	8005734 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f87f 	bl	80057d4 <I2C_IsErrorOccurred>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e031      	b.n	8005744 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d025      	beq.n	8005734 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e8:	f7fe fcac 	bl	8004044 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d302      	bcc.n	80056fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d11a      	bne.n	8005734 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b02      	cmp	r3, #2
 800570a:	d013      	beq.n	8005734 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e007      	b.n	8005744 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b02      	cmp	r3, #2
 8005740:	d1c4      	bne.n	80056cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005758:	e02f      	b.n	80057ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f838 	bl	80057d4 <I2C_IsErrorOccurred>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e02d      	b.n	80057ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576e:	f7fe fc69 	bl	8004044 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	429a      	cmp	r2, r3
 800577c:	d302      	bcc.n	8005784 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d11a      	bne.n	80057ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b20      	cmp	r3, #32
 8005790:	d013      	beq.n	80057ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005796:	f043 0220 	orr.w	r2, r3, #32
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e007      	b.n	80057ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d1c8      	bne.n	800575a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	@ 0x28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d068      	beq.n	80058d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2210      	movs	r2, #16
 8005806:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005808:	e049      	b.n	800589e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d045      	beq.n	800589e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005812:	f7fe fc17 	bl	8004044 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	d302      	bcc.n	8005828 <I2C_IsErrorOccurred+0x54>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d13a      	bne.n	800589e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005832:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800583a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800584a:	d121      	bne.n	8005890 <I2C_IsErrorOccurred+0xbc>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005852:	d01d      	beq.n	8005890 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005854:	7cfb      	ldrb	r3, [r7, #19]
 8005856:	2b20      	cmp	r3, #32
 8005858:	d01a      	beq.n	8005890 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005868:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800586a:	f7fe fbeb 	bl	8004044 <HAL_GetTick>
 800586e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005870:	e00e      	b.n	8005890 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005872:	f7fe fbe7 	bl	8004044 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b19      	cmp	r3, #25
 800587e:	d907      	bls.n	8005890 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	f043 0320 	orr.w	r3, r3, #32
 8005886:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800588e:	e006      	b.n	800589e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b20      	cmp	r3, #32
 800589c:	d1e9      	bne.n	8005872 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d003      	beq.n	80058b4 <I2C_IsErrorOccurred+0xe0>
 80058ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0aa      	beq.n	800580a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d103      	bne.n	80058c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2220      	movs	r2, #32
 80058c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	f043 0304 	orr.w	r3, r3, #4
 80058ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00b      	beq.n	80058fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	f043 0308 	orr.w	r3, r3, #8
 800590c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005916:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00b      	beq.n	8005940 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	f043 0302 	orr.w	r3, r3, #2
 800592e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005938:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01c      	beq.n	8005982 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f7ff fe45 	bl	80055d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6859      	ldr	r1, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <I2C_IsErrorOccurred+0x1bc>)
 800595a:	400b      	ands	r3, r1
 800595c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005986:	4618      	mov	r0, r3
 8005988:	3728      	adds	r7, #40	@ 0x28
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	fe00e800 	.word	0xfe00e800

08005994 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	607b      	str	r3, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	817b      	strh	r3, [r7, #10]
 80059a2:	4613      	mov	r3, r2
 80059a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059a6:	897b      	ldrh	r3, [r7, #10]
 80059a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059ac:	7a7b      	ldrb	r3, [r7, #9]
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	4313      	orrs	r3, r2
 80059be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	0d5b      	lsrs	r3, r3, #21
 80059ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80059d2:	4b08      	ldr	r3, [pc, #32]	@ (80059f4 <I2C_TransferConfig+0x60>)
 80059d4:	430b      	orrs	r3, r1
 80059d6:	43db      	mvns	r3, r3
 80059d8:	ea02 0103 	and.w	r1, r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	03ff63ff 	.word	0x03ff63ff

080059f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d138      	bne.n	8005a80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e032      	b.n	8005a82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2224      	movs	r2, #36	@ 0x24
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6819      	ldr	r1, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e000      	b.n	8005a82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
  }
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d139      	bne.n	8005b18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e033      	b.n	8005b1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2224      	movs	r2, #36	@ 0x24
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ae0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	e000      	b.n	8005b1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b18:	2302      	movs	r3, #2
  }
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e0bf      	b.n	8005cba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f8ba 	bl	8005cc8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005b6a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6999      	ldr	r1, [r3, #24]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b80:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6899      	ldr	r1, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc4 <HAL_LTDC_Init+0x19c>)
 8005b9c:	400b      	ands	r3, r1
 8005b9e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	041b      	lsls	r3, r3, #16
 8005ba6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6899      	ldr	r1, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68d9      	ldr	r1, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc4 <HAL_LTDC_Init+0x19c>)
 8005bca:	400b      	ands	r3, r1
 8005bcc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68d9      	ldr	r1, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6919      	ldr	r1, [r3, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b33      	ldr	r3, [pc, #204]	@ (8005cc4 <HAL_LTDC_Init+0x19c>)
 8005bf8:	400b      	ands	r3, r1
 8005bfa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c00:	041b      	lsls	r3, r3, #16
 8005c02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6919      	ldr	r1, [r3, #16]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6959      	ldr	r1, [r3, #20]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b27      	ldr	r3, [pc, #156]	@ (8005cc4 <HAL_LTDC_Init+0x19c>)
 8005c26:	400b      	ands	r3, r1
 8005c28:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2e:	041b      	lsls	r3, r3, #16
 8005c30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6959      	ldr	r1, [r3, #20]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005c58:	041b      	lsls	r3, r3, #16
 8005c5a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0206 	orr.w	r2, r2, #6
 8005c96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	f000f800 	.word	0xf000f800

08005cc8 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005cdc:	b5b0      	push	{r4, r5, r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_LTDC_ConfigLayer+0x1a>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e02c      	b.n	8005d50 <HAL_LTDC_ConfigLayer+0x74>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2134      	movs	r1, #52	@ 0x34
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	4413      	add	r3, r2
 8005d12:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4614      	mov	r4, r2
 8005d1a:	461d      	mov	r5, r3
 8005d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f811 	bl	8005d58 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bdb0      	pop	{r4, r5, r7, pc}

08005d58 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b089      	sub	sp, #36	@ 0x24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	0c1b      	lsrs	r3, r3, #16
 8005d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d74:	4413      	add	r3, r2
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	01db      	lsls	r3, r3, #7
 8005d84:	4413      	add	r3, r2
 8005d86:	3384      	adds	r3, #132	@ 0x84
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	4611      	mov	r1, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	01d2      	lsls	r2, r2, #7
 8005d94:	440a      	add	r2, r1
 8005d96:	3284      	adds	r2, #132	@ 0x84
 8005d98:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005d9c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005dae:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005db0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4619      	mov	r1, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	01db      	lsls	r3, r3, #7
 8005dbc:	440b      	add	r3, r1
 8005dbe:	3384      	adds	r3, #132	@ 0x84
 8005dc0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005dc6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dd6:	4413      	add	r3, r2
 8005dd8:	041b      	lsls	r3, r3, #16
 8005dda:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	01db      	lsls	r3, r3, #7
 8005de6:	4413      	add	r3, r2
 8005de8:	3384      	adds	r3, #132	@ 0x84
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	4611      	mov	r1, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	01d2      	lsls	r2, r2, #7
 8005df6:	440a      	add	r2, r1
 8005df8:	3284      	adds	r2, #132	@ 0x84
 8005dfa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005dfe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e0e:	4413      	add	r3, r2
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4619      	mov	r1, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	01db      	lsls	r3, r3, #7
 8005e1c:	440b      	add	r3, r1
 8005e1e:	3384      	adds	r3, #132	@ 0x84
 8005e20:	4619      	mov	r1, r3
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	01db      	lsls	r3, r3, #7
 8005e32:	4413      	add	r3, r2
 8005e34:	3384      	adds	r3, #132	@ 0x84
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	01d2      	lsls	r2, r2, #7
 8005e42:	440a      	add	r2, r1
 8005e44:	3284      	adds	r2, #132	@ 0x84
 8005e46:	f023 0307 	bic.w	r3, r3, #7
 8005e4a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	01db      	lsls	r3, r3, #7
 8005e56:	4413      	add	r3, r2
 8005e58:	3384      	adds	r3, #132	@ 0x84
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	061b      	lsls	r3, r3, #24
 8005e7c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	01db      	lsls	r3, r3, #7
 8005e88:	4413      	add	r3, r2
 8005e8a:	3384      	adds	r3, #132	@ 0x84
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	01db      	lsls	r3, r3, #7
 8005e98:	4413      	add	r3, r2
 8005e9a:	3384      	adds	r3, #132	@ 0x84
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	01db      	lsls	r3, r3, #7
 8005ebc:	440b      	add	r3, r1
 8005ebe:	3384      	adds	r3, #132	@ 0x84
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	01db      	lsls	r3, r3, #7
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3384      	adds	r3, #132	@ 0x84
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	4611      	mov	r1, r2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	01d2      	lsls	r2, r2, #7
 8005ee2:	440a      	add	r2, r1
 8005ee4:	3284      	adds	r2, #132	@ 0x84
 8005ee6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005eea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	01db      	lsls	r3, r3, #7
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3384      	adds	r3, #132	@ 0x84
 8005efa:	461a      	mov	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	01db      	lsls	r3, r3, #7
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3384      	adds	r3, #132	@ 0x84
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4619      	mov	r1, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	01db      	lsls	r3, r3, #7
 8005f1c:	440b      	add	r3, r1
 8005f1e:	3384      	adds	r3, #132	@ 0x84
 8005f20:	4619      	mov	r1, r3
 8005f22:	4b58      	ldr	r3, [pc, #352]	@ (8006084 <LTDC_SetConfig+0x32c>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	68f9      	ldr	r1, [r7, #12]
 8005f32:	6809      	ldr	r1, [r1, #0]
 8005f34:	4608      	mov	r0, r1
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	01c9      	lsls	r1, r1, #7
 8005f3a:	4401      	add	r1, r0
 8005f3c:	3184      	adds	r1, #132	@ 0x84
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	01db      	lsls	r3, r3, #7
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3384      	adds	r3, #132	@ 0x84
 8005f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	01db      	lsls	r3, r3, #7
 8005f5c:	4413      	add	r3, r2
 8005f5e:	3384      	adds	r3, #132	@ 0x84
 8005f60:	461a      	mov	r2, r3
 8005f62:	2300      	movs	r3, #0
 8005f64:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	01db      	lsls	r3, r3, #7
 8005f70:	4413      	add	r3, r2
 8005f72:	3384      	adds	r3, #132	@ 0x84
 8005f74:	461a      	mov	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005f84:	2304      	movs	r3, #4
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	e01b      	b.n	8005fc2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d102      	bne.n	8005f98 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005f92:	2303      	movs	r3, #3
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	e014      	b.n	8005fc2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d00b      	beq.n	8005fb8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d007      	beq.n	8005fb8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d003      	beq.n	8005fb8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005fb4:	2b07      	cmp	r3, #7
 8005fb6:	d102      	bne.n	8005fbe <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	61fb      	str	r3, [r7, #28]
 8005fbc:	e001      	b.n	8005fc2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	01db      	lsls	r3, r3, #7
 8005fcc:	4413      	add	r3, r2
 8005fce:	3384      	adds	r3, #132	@ 0x84
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	01d2      	lsls	r2, r2, #7
 8005fdc:	440a      	add	r2, r1
 8005fde:	3284      	adds	r2, #132	@ 0x84
 8005fe0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	fb02 f303 	mul.w	r3, r2, r3
 8005ff0:	041a      	lsls	r2, r3, #16
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6859      	ldr	r1, [r3, #4]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	1acb      	subs	r3, r1, r3
 8005ffc:	69f9      	ldr	r1, [r7, #28]
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	3307      	adds	r3, #7
 8006004:	68f9      	ldr	r1, [r7, #12]
 8006006:	6809      	ldr	r1, [r1, #0]
 8006008:	4608      	mov	r0, r1
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	01c9      	lsls	r1, r1, #7
 800600e:	4401      	add	r1, r0
 8006010:	3184      	adds	r1, #132	@ 0x84
 8006012:	4313      	orrs	r3, r2
 8006014:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	01db      	lsls	r3, r3, #7
 8006020:	4413      	add	r3, r2
 8006022:	3384      	adds	r3, #132	@ 0x84
 8006024:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	01db      	lsls	r3, r3, #7
 8006030:	440b      	add	r3, r1
 8006032:	3384      	adds	r3, #132	@ 0x84
 8006034:	4619      	mov	r1, r3
 8006036:	4b14      	ldr	r3, [pc, #80]	@ (8006088 <LTDC_SetConfig+0x330>)
 8006038:	4013      	ands	r3, r2
 800603a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	01db      	lsls	r3, r3, #7
 8006046:	4413      	add	r3, r2
 8006048:	3384      	adds	r3, #132	@ 0x84
 800604a:	461a      	mov	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006050:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	01db      	lsls	r3, r3, #7
 800605c:	4413      	add	r3, r2
 800605e:	3384      	adds	r3, #132	@ 0x84
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	6812      	ldr	r2, [r2, #0]
 8006066:	4611      	mov	r1, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	01d2      	lsls	r2, r2, #7
 800606c:	440a      	add	r2, r1
 800606e:	3284      	adds	r2, #132	@ 0x84
 8006070:	f043 0301 	orr.w	r3, r3, #1
 8006074:	6013      	str	r3, [r2, #0]
}
 8006076:	bf00      	nop
 8006078:	3724      	adds	r7, #36	@ 0x24
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	fffff8f8 	.word	0xfffff8f8
 8006088:	fffff800 	.word	0xfffff800

0800608c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006094:	f7fd ffd6 	bl	8004044 <HAL_GetTick>
 8006098:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e03b      	b.n	800611c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0201 	bic.w	r2, r2, #1
 80060c2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80060c4:	e00f      	b.n	80060e6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80060c6:	f7fd ffbd 	bl	8004044 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	d908      	bls.n	80060e6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2240      	movs	r2, #64	@ 0x40
 80060d8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2203      	movs	r2, #3
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e01a      	b.n	800611c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e8      	bne.n	80060c6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f86d 	bl	80061d4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e048      	b.n	80061c8 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2200      	movs	r2, #0
 8006154:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2200      	movs	r2, #0
 800615c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2200      	movs	r2, #0
 800616c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2200      	movs	r2, #0
 8006174:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2200      	movs	r2, #0
 800617c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2200      	movs	r2, #0
 8006184:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2200      	movs	r2, #0
 800618c:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2200      	movs	r2, #0
 8006194:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	221f      	movs	r2, #31
 800619c:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68d9      	ldr	r1, [r3, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	695a      	ldr	r2, [r3, #20]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80061fa:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006206:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006212:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006218:	3b01      	subs	r3, #1
 800621a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800621c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006228:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800622a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006234:	d107      	bne.n	8006246 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8006244:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2200      	movs	r2, #0
 800624c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006252:	2b00      	cmp	r3, #0
 8006254:	da11      	bge.n	800627a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006264:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626a:	425b      	negs	r3, r3
 800626c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	b292      	uxth	r2, r2
 8006276:	621a      	str	r2, [r3, #32]
 8006278:	e006      	b.n	8006288 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800627e:	461a      	mov	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	b292      	uxth	r2, r2
 8006286:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628c:	2b00      	cmp	r3, #0
 800628e:	da15      	bge.n	80062bc <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695a      	ldr	r2, [r3, #20]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800629e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	425b      	negs	r3, r3
 80062a6:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a19      	ldr	r1, [r3, #32]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	041a      	lsls	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	621a      	str	r2, [r3, #32]
 80062ba:	e009      	b.n	80062d0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6a19      	ldr	r1, [r3, #32]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c6:	041a      	lsls	r2, r3, #16
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d8:	d006      	beq.n	80062e8 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80062e6:	e003      	b.n	80062f0 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2200      	movs	r2, #0
 80062ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2200      	movs	r2, #0
 80062f6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800630c:	4b19      	ldr	r3, [pc, #100]	@ (8006374 <HAL_PWREx_ConfigSupply+0x70>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b04      	cmp	r3, #4
 8006316:	d00a      	beq.n	800632e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006318:	4b16      	ldr	r3, [pc, #88]	@ (8006374 <HAL_PWREx_ConfigSupply+0x70>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d001      	beq.n	800632a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e01f      	b.n	800636a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	e01d      	b.n	800636a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800632e:	4b11      	ldr	r3, [pc, #68]	@ (8006374 <HAL_PWREx_ConfigSupply+0x70>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f023 0207 	bic.w	r2, r3, #7
 8006336:	490f      	ldr	r1, [pc, #60]	@ (8006374 <HAL_PWREx_ConfigSupply+0x70>)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4313      	orrs	r3, r2
 800633c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800633e:	f7fd fe81 	bl	8004044 <HAL_GetTick>
 8006342:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006344:	e009      	b.n	800635a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006346:	f7fd fe7d 	bl	8004044 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006354:	d901      	bls.n	800635a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e007      	b.n	800636a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800635a:	4b06      	ldr	r3, [pc, #24]	@ (8006374 <HAL_PWREx_ConfigSupply+0x70>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006366:	d1ee      	bne.n	8006346 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	58024800 	.word	0x58024800

08006378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08c      	sub	sp, #48	@ 0x30
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d102      	bne.n	800638c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	f000 bc48 	b.w	8006c1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8088 	beq.w	80064aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800639a:	4b99      	ldr	r3, [pc, #612]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063a4:	4b96      	ldr	r3, [pc, #600]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	d007      	beq.n	80063c0 <HAL_RCC_OscConfig+0x48>
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b2:	2b18      	cmp	r3, #24
 80063b4:	d111      	bne.n	80063da <HAL_RCC_OscConfig+0x62>
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d10c      	bne.n	80063da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c0:	4b8f      	ldr	r3, [pc, #572]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d06d      	beq.n	80064a8 <HAL_RCC_OscConfig+0x130>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d169      	bne.n	80064a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f000 bc21 	b.w	8006c1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e2:	d106      	bne.n	80063f2 <HAL_RCC_OscConfig+0x7a>
 80063e4:	4b86      	ldr	r3, [pc, #536]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a85      	ldr	r2, [pc, #532]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	e02e      	b.n	8006450 <HAL_RCC_OscConfig+0xd8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10c      	bne.n	8006414 <HAL_RCC_OscConfig+0x9c>
 80063fa:	4b81      	ldr	r3, [pc, #516]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a80      	ldr	r2, [pc, #512]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	4b7e      	ldr	r3, [pc, #504]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a7d      	ldr	r2, [pc, #500]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800640c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	e01d      	b.n	8006450 <HAL_RCC_OscConfig+0xd8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800641c:	d10c      	bne.n	8006438 <HAL_RCC_OscConfig+0xc0>
 800641e:	4b78      	ldr	r3, [pc, #480]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a77      	ldr	r2, [pc, #476]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	4b75      	ldr	r3, [pc, #468]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a74      	ldr	r2, [pc, #464]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	e00b      	b.n	8006450 <HAL_RCC_OscConfig+0xd8>
 8006438:	4b71      	ldr	r3, [pc, #452]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a70      	ldr	r2, [pc, #448]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800643e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b6e      	ldr	r3, [pc, #440]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a6d      	ldr	r2, [pc, #436]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800644a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800644e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d013      	beq.n	8006480 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006458:	f7fd fdf4 	bl	8004044 <HAL_GetTick>
 800645c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006460:	f7fd fdf0 	bl	8004044 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	@ 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e3d4      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006472:	4b63      	ldr	r3, [pc, #396]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCC_OscConfig+0xe8>
 800647e:	e014      	b.n	80064aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006480:	f7fd fde0 	bl	8004044 <HAL_GetTick>
 8006484:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006488:	f7fd fddc 	bl	8004044 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b64      	cmp	r3, #100	@ 0x64
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e3c0      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800649a:	4b59      	ldr	r3, [pc, #356]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f0      	bne.n	8006488 <HAL_RCC_OscConfig+0x110>
 80064a6:	e000      	b.n	80064aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 80ca 	beq.w	800664c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064b8:	4b51      	ldr	r3, [pc, #324]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80064c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <HAL_RCC_OscConfig+0x166>
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	2b18      	cmp	r3, #24
 80064d2:	d156      	bne.n	8006582 <HAL_RCC_OscConfig+0x20a>
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d151      	bne.n	8006582 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064de:	4b48      	ldr	r3, [pc, #288]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_RCC_OscConfig+0x17e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e392      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064f6:	4b42      	ldr	r3, [pc, #264]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f023 0219 	bic.w	r2, r3, #25
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	493f      	ldr	r1, [pc, #252]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006504:	4313      	orrs	r3, r2
 8006506:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006508:	f7fd fd9c 	bl	8004044 <HAL_GetTick>
 800650c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006510:	f7fd fd98 	bl	8004044 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e37c      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006522:	4b37      	ldr	r3, [pc, #220]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f0      	beq.n	8006510 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652e:	f7fd fdb9 	bl	80040a4 <HAL_GetREVID>
 8006532:	4603      	mov	r3, r0
 8006534:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006538:	4293      	cmp	r3, r2
 800653a:	d817      	bhi.n	800656c <HAL_RCC_OscConfig+0x1f4>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b40      	cmp	r3, #64	@ 0x40
 8006542:	d108      	bne.n	8006556 <HAL_RCC_OscConfig+0x1de>
 8006544:	4b2e      	ldr	r3, [pc, #184]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800654c:	4a2c      	ldr	r2, [pc, #176]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800654e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006552:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006554:	e07a      	b.n	800664c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006556:	4b2a      	ldr	r3, [pc, #168]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	031b      	lsls	r3, r3, #12
 8006564:	4926      	ldr	r1, [pc, #152]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006566:	4313      	orrs	r3, r2
 8006568:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800656a:	e06f      	b.n	800664c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656c:	4b24      	ldr	r3, [pc, #144]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	061b      	lsls	r3, r3, #24
 800657a:	4921      	ldr	r1, [pc, #132]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800657c:	4313      	orrs	r3, r2
 800657e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006580:	e064      	b.n	800664c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d047      	beq.n	800661a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800658a:	4b1d      	ldr	r3, [pc, #116]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f023 0219 	bic.w	r2, r3, #25
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	491a      	ldr	r1, [pc, #104]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 8006598:	4313      	orrs	r3, r2
 800659a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659c:	f7fd fd52 	bl	8004044 <HAL_GetTick>
 80065a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a4:	f7fd fd4e 	bl	8004044 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e332      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065b6:	4b12      	ldr	r3, [pc, #72]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0f0      	beq.n	80065a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c2:	f7fd fd6f 	bl	80040a4 <HAL_GetREVID>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d819      	bhi.n	8006604 <HAL_RCC_OscConfig+0x28c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b40      	cmp	r3, #64	@ 0x40
 80065d6:	d108      	bne.n	80065ea <HAL_RCC_OscConfig+0x272>
 80065d8:	4b09      	ldr	r3, [pc, #36]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80065e0:	4a07      	ldr	r2, [pc, #28]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80065e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065e6:	6053      	str	r3, [r2, #4]
 80065e8:	e030      	b.n	800664c <HAL_RCC_OscConfig+0x2d4>
 80065ea:	4b05      	ldr	r3, [pc, #20]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	031b      	lsls	r3, r3, #12
 80065f8:	4901      	ldr	r1, [pc, #4]	@ (8006600 <HAL_RCC_OscConfig+0x288>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	604b      	str	r3, [r1, #4]
 80065fe:	e025      	b.n	800664c <HAL_RCC_OscConfig+0x2d4>
 8006600:	58024400 	.word	0x58024400
 8006604:	4b9a      	ldr	r3, [pc, #616]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	061b      	lsls	r3, r3, #24
 8006612:	4997      	ldr	r1, [pc, #604]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006614:	4313      	orrs	r3, r2
 8006616:	604b      	str	r3, [r1, #4]
 8006618:	e018      	b.n	800664c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800661a:	4b95      	ldr	r3, [pc, #596]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a94      	ldr	r2, [pc, #592]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006620:	f023 0301 	bic.w	r3, r3, #1
 8006624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006626:	f7fd fd0d 	bl	8004044 <HAL_GetTick>
 800662a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800662e:	f7fd fd09 	bl	8004044 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e2ed      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006640:	4b8b      	ldr	r3, [pc, #556]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f0      	bne.n	800662e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80a9 	beq.w	80067ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800665a:	4b85      	ldr	r3, [pc, #532]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006662:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006664:	4b82      	ldr	r3, [pc, #520]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d007      	beq.n	8006680 <HAL_RCC_OscConfig+0x308>
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b18      	cmp	r3, #24
 8006674:	d13a      	bne.n	80066ec <HAL_RCC_OscConfig+0x374>
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	2b01      	cmp	r3, #1
 800667e:	d135      	bne.n	80066ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006680:	4b7b      	ldr	r3, [pc, #492]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <HAL_RCC_OscConfig+0x320>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	2b80      	cmp	r3, #128	@ 0x80
 8006692:	d001      	beq.n	8006698 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e2c1      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006698:	f7fd fd04 	bl	80040a4 <HAL_GetREVID>
 800669c:	4603      	mov	r3, r0
 800669e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d817      	bhi.n	80066d6 <HAL_RCC_OscConfig+0x35e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d108      	bne.n	80066c0 <HAL_RCC_OscConfig+0x348>
 80066ae:	4b70      	ldr	r3, [pc, #448]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80066b6:	4a6e      	ldr	r2, [pc, #440]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80066b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066be:	e075      	b.n	80067ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066c0:	4b6b      	ldr	r3, [pc, #428]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	069b      	lsls	r3, r3, #26
 80066ce:	4968      	ldr	r1, [pc, #416]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066d4:	e06a      	b.n	80067ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066d6:	4b66      	ldr	r3, [pc, #408]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	061b      	lsls	r3, r3, #24
 80066e4:	4962      	ldr	r1, [pc, #392]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066ea:	e05f      	b.n	80067ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d042      	beq.n	800677a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066f4:	4b5e      	ldr	r3, [pc, #376]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a5d      	ldr	r2, [pc, #372]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80066fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fd fca0 	bl	8004044 <HAL_GetTick>
 8006704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006708:	f7fd fc9c 	bl	8004044 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e280      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800671a:	4b55      	ldr	r3, [pc, #340]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006726:	f7fd fcbd 	bl	80040a4 <HAL_GetREVID>
 800672a:	4603      	mov	r3, r0
 800672c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006730:	4293      	cmp	r3, r2
 8006732:	d817      	bhi.n	8006764 <HAL_RCC_OscConfig+0x3ec>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	2b20      	cmp	r3, #32
 800673a:	d108      	bne.n	800674e <HAL_RCC_OscConfig+0x3d6>
 800673c:	4b4c      	ldr	r3, [pc, #304]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006744:	4a4a      	ldr	r2, [pc, #296]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006746:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800674a:	6053      	str	r3, [r2, #4]
 800674c:	e02e      	b.n	80067ac <HAL_RCC_OscConfig+0x434>
 800674e:	4b48      	ldr	r3, [pc, #288]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	069b      	lsls	r3, r3, #26
 800675c:	4944      	ldr	r1, [pc, #272]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 800675e:	4313      	orrs	r3, r2
 8006760:	604b      	str	r3, [r1, #4]
 8006762:	e023      	b.n	80067ac <HAL_RCC_OscConfig+0x434>
 8006764:	4b42      	ldr	r3, [pc, #264]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	061b      	lsls	r3, r3, #24
 8006772:	493f      	ldr	r1, [pc, #252]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006774:	4313      	orrs	r3, r2
 8006776:	60cb      	str	r3, [r1, #12]
 8006778:	e018      	b.n	80067ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800677a:	4b3d      	ldr	r3, [pc, #244]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a3c      	ldr	r2, [pc, #240]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006786:	f7fd fc5d 	bl	8004044 <HAL_GetTick>
 800678a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800678c:	e008      	b.n	80067a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800678e:	f7fd fc59 	bl	8004044 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e23d      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067a0:	4b33      	ldr	r3, [pc, #204]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1f0      	bne.n	800678e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d036      	beq.n	8006826 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d019      	beq.n	80067f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80067c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067cc:	f7fd fc3a 	bl	8004044 <HAL_GetTick>
 80067d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067d4:	f7fd fc36 	bl	8004044 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e21a      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067e6:	4b22      	ldr	r3, [pc, #136]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80067e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x45c>
 80067f2:	e018      	b.n	8006826 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80067f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006800:	f7fd fc20 	bl	8004044 <HAL_GetTick>
 8006804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006808:	f7fd fc1c 	bl	8004044 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e200      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800681a:	4b15      	ldr	r3, [pc, #84]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 800681c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f0      	bne.n	8006808 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d039      	beq.n	80068a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01c      	beq.n	8006874 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800683a:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a0c      	ldr	r2, [pc, #48]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006844:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006846:	f7fd fbfd 	bl	8004044 <HAL_GetTick>
 800684a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800684e:	f7fd fbf9 	bl	8004044 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e1dd      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006860:	4b03      	ldr	r3, [pc, #12]	@ (8006870 <HAL_RCC_OscConfig+0x4f8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0f0      	beq.n	800684e <HAL_RCC_OscConfig+0x4d6>
 800686c:	e01b      	b.n	80068a6 <HAL_RCC_OscConfig+0x52e>
 800686e:	bf00      	nop
 8006870:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006874:	4b9b      	ldr	r3, [pc, #620]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a9a      	ldr	r2, [pc, #616]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 800687a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800687e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006880:	f7fd fbe0 	bl	8004044 <HAL_GetTick>
 8006884:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006888:	f7fd fbdc 	bl	8004044 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e1c0      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800689a:	4b92      	ldr	r3, [pc, #584]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 8081 	beq.w	80069b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068b4:	4b8c      	ldr	r3, [pc, #560]	@ (8006ae8 <HAL_RCC_OscConfig+0x770>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a8b      	ldr	r2, [pc, #556]	@ (8006ae8 <HAL_RCC_OscConfig+0x770>)
 80068ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068c0:	f7fd fbc0 	bl	8004044 <HAL_GetTick>
 80068c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c8:	f7fd fbbc 	bl	8004044 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b64      	cmp	r3, #100	@ 0x64
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e1a0      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068da:	4b83      	ldr	r3, [pc, #524]	@ (8006ae8 <HAL_RCC_OscConfig+0x770>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d106      	bne.n	80068fc <HAL_RCC_OscConfig+0x584>
 80068ee:	4b7d      	ldr	r3, [pc, #500]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 80068f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 80068f4:	f043 0301 	orr.w	r3, r3, #1
 80068f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068fa:	e02d      	b.n	8006958 <HAL_RCC_OscConfig+0x5e0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10c      	bne.n	800691e <HAL_RCC_OscConfig+0x5a6>
 8006904:	4b77      	ldr	r3, [pc, #476]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006908:	4a76      	ldr	r2, [pc, #472]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 800690a:	f023 0301 	bic.w	r3, r3, #1
 800690e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006910:	4b74      	ldr	r3, [pc, #464]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006914:	4a73      	ldr	r2, [pc, #460]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006916:	f023 0304 	bic.w	r3, r3, #4
 800691a:	6713      	str	r3, [r2, #112]	@ 0x70
 800691c:	e01c      	b.n	8006958 <HAL_RCC_OscConfig+0x5e0>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2b05      	cmp	r3, #5
 8006924:	d10c      	bne.n	8006940 <HAL_RCC_OscConfig+0x5c8>
 8006926:	4b6f      	ldr	r3, [pc, #444]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692a:	4a6e      	ldr	r2, [pc, #440]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 800692c:	f043 0304 	orr.w	r3, r3, #4
 8006930:	6713      	str	r3, [r2, #112]	@ 0x70
 8006932:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006936:	4a6b      	ldr	r2, [pc, #428]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	6713      	str	r3, [r2, #112]	@ 0x70
 800693e:	e00b      	b.n	8006958 <HAL_RCC_OscConfig+0x5e0>
 8006940:	4b68      	ldr	r3, [pc, #416]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006944:	4a67      	ldr	r2, [pc, #412]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006946:	f023 0301 	bic.w	r3, r3, #1
 800694a:	6713      	str	r3, [r2, #112]	@ 0x70
 800694c:	4b65      	ldr	r3, [pc, #404]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 800694e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006950:	4a64      	ldr	r2, [pc, #400]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006952:	f023 0304 	bic.w	r3, r3, #4
 8006956:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d015      	beq.n	800698c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006960:	f7fd fb70 	bl	8004044 <HAL_GetTick>
 8006964:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006966:	e00a      	b.n	800697e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006968:	f7fd fb6c 	bl	8004044 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006976:	4293      	cmp	r3, r2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e14e      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800697e:	4b59      	ldr	r3, [pc, #356]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0ee      	beq.n	8006968 <HAL_RCC_OscConfig+0x5f0>
 800698a:	e014      	b.n	80069b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800698c:	f7fd fb5a 	bl	8004044 <HAL_GetTick>
 8006990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006992:	e00a      	b.n	80069aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006994:	f7fd fb56 	bl	8004044 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e138      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069aa:	4b4e      	ldr	r3, [pc, #312]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 80069ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1ee      	bne.n	8006994 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 812d 	beq.w	8006c1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069c0:	4b48      	ldr	r3, [pc, #288]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069c8:	2b18      	cmp	r3, #24
 80069ca:	f000 80bd 	beq.w	8006b48 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	f040 809e 	bne.w	8006b14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d8:	4b42      	ldr	r3, [pc, #264]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a41      	ldr	r2, [pc, #260]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 80069de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e4:	f7fd fb2e 	bl	8004044 <HAL_GetTick>
 80069e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ec:	f7fd fb2a 	bl	8004044 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e10e      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069fe:	4b39      	ldr	r3, [pc, #228]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f0      	bne.n	80069ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a0a:	4b36      	ldr	r3, [pc, #216]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a0e:	4b37      	ldr	r3, [pc, #220]	@ (8006aec <HAL_RCC_OscConfig+0x774>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a1a:	0112      	lsls	r2, r2, #4
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	4931      	ldr	r1, [pc, #196]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a32:	3b01      	subs	r3, #1
 8006a34:	025b      	lsls	r3, r3, #9
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	041b      	lsls	r3, r3, #16
 8006a42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	061b      	lsls	r3, r3, #24
 8006a50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a54:	4923      	ldr	r1, [pc, #140]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a5a:	4b22      	ldr	r3, [pc, #136]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5e:	4a21      	ldr	r2, [pc, #132]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a60:	f023 0301 	bic.w	r3, r3, #1
 8006a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a66:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a6a:	4b21      	ldr	r3, [pc, #132]	@ (8006af0 <HAL_RCC_OscConfig+0x778>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a72:	00d2      	lsls	r2, r2, #3
 8006a74:	491b      	ldr	r1, [pc, #108]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	f023 020c 	bic.w	r2, r3, #12
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a86:	4917      	ldr	r1, [pc, #92]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a8c:	4b15      	ldr	r3, [pc, #84]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a90:	f023 0202 	bic.w	r2, r3, #2
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a98:	4912      	ldr	r1, [pc, #72]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a9e:	4b11      	ldr	r3, [pc, #68]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa2:	4a10      	ldr	r2, [pc, #64]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	4a0d      	ldr	r2, [pc, #52]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aba:	4a0a      	ldr	r2, [pc, #40]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ac2:	4b08      	ldr	r3, [pc, #32]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	4a07      	ldr	r2, [pc, #28]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006ac8:	f043 0301 	orr.w	r3, r3, #1
 8006acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ace:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a04      	ldr	r2, [pc, #16]	@ (8006ae4 <HAL_RCC_OscConfig+0x76c>)
 8006ad4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ada:	f7fd fab3 	bl	8004044 <HAL_GetTick>
 8006ade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ae0:	e011      	b.n	8006b06 <HAL_RCC_OscConfig+0x78e>
 8006ae2:	bf00      	nop
 8006ae4:	58024400 	.word	0x58024400
 8006ae8:	58024800 	.word	0x58024800
 8006aec:	fffffc0c 	.word	0xfffffc0c
 8006af0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af4:	f7fd faa6 	bl	8004044 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e08a      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b06:	4b47      	ldr	r3, [pc, #284]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCC_OscConfig+0x77c>
 8006b12:	e082      	b.n	8006c1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b14:	4b43      	ldr	r3, [pc, #268]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a42      	ldr	r2, [pc, #264]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b20:	f7fd fa90 	bl	8004044 <HAL_GetTick>
 8006b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b28:	f7fd fa8c 	bl	8004044 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e070      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f0      	bne.n	8006b28 <HAL_RCC_OscConfig+0x7b0>
 8006b46:	e068      	b.n	8006c1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b48:	4b36      	ldr	r3, [pc, #216]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b4e:	4b35      	ldr	r3, [pc, #212]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d031      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f003 0203 	and.w	r2, r3, #3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d12a      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	091b      	lsrs	r3, r3, #4
 8006b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d122      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d11a      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	0a5b      	lsrs	r3, r3, #9
 8006b8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d111      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	0c1b      	lsrs	r3, r3, #16
 8006ba0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d108      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	0e1b      	lsrs	r3, r3, #24
 8006bb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d001      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e02b      	b.n	8006c1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006bc4:	4b17      	ldr	r3, [pc, #92]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc8:	08db      	lsrs	r3, r3, #3
 8006bca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d01f      	beq.n	8006c1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bda:	4b12      	ldr	r3, [pc, #72]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bde:	4a11      	ldr	r2, [pc, #68]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006be6:	f7fd fa2d 	bl	8004044 <HAL_GetTick>
 8006bea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006bec:	bf00      	nop
 8006bee:	f7fd fa29 	bl	8004044 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d0f9      	beq.n	8006bee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8006c28 <HAL_RCC_OscConfig+0x8b0>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c06:	00d2      	lsls	r2, r2, #3
 8006c08:	4906      	ldr	r1, [pc, #24]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c0e:	4b05      	ldr	r3, [pc, #20]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c12:	4a04      	ldr	r2, [pc, #16]	@ (8006c24 <HAL_RCC_OscConfig+0x8ac>)
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3730      	adds	r7, #48	@ 0x30
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	58024400 	.word	0x58024400
 8006c28:	ffff0007 	.word	0xffff0007

08006c2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e19c      	b.n	8006f7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c40:	4b8a      	ldr	r3, [pc, #552]	@ (8006e6c <HAL_RCC_ClockConfig+0x240>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d910      	bls.n	8006c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4e:	4b87      	ldr	r3, [pc, #540]	@ (8006e6c <HAL_RCC_ClockConfig+0x240>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f023 020f 	bic.w	r2, r3, #15
 8006c56:	4985      	ldr	r1, [pc, #532]	@ (8006e6c <HAL_RCC_ClockConfig+0x240>)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5e:	4b83      	ldr	r3, [pc, #524]	@ (8006e6c <HAL_RCC_ClockConfig+0x240>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d001      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e184      	b.n	8006f7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d010      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691a      	ldr	r2, [r3, #16]
 8006c80:	4b7b      	ldr	r3, [pc, #492]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d908      	bls.n	8006c9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c8c:	4b78      	ldr	r3, [pc, #480]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	4975      	ldr	r1, [pc, #468]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d010      	beq.n	8006ccc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695a      	ldr	r2, [r3, #20]
 8006cae:	4b70      	ldr	r3, [pc, #448]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d908      	bls.n	8006ccc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cba:	4b6d      	ldr	r3, [pc, #436]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	496a      	ldr	r1, [pc, #424]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0310 	and.w	r3, r3, #16
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d010      	beq.n	8006cfa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	4b64      	ldr	r3, [pc, #400]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d908      	bls.n	8006cfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ce8:	4b61      	ldr	r3, [pc, #388]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	495e      	ldr	r1, [pc, #376]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d010      	beq.n	8006d28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	69da      	ldr	r2, [r3, #28]
 8006d0a:	4b59      	ldr	r3, [pc, #356]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d908      	bls.n	8006d28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d16:	4b56      	ldr	r3, [pc, #344]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	4953      	ldr	r1, [pc, #332]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d010      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	4b4d      	ldr	r3, [pc, #308]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d908      	bls.n	8006d56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d44:	4b4a      	ldr	r3, [pc, #296]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	f023 020f 	bic.w	r2, r3, #15
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	4947      	ldr	r1, [pc, #284]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d055      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d62:	4b43      	ldr	r3, [pc, #268]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	4940      	ldr	r1, [pc, #256]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d107      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d121      	bne.n	8006dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0f6      	b.n	8006f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d107      	bne.n	8006da4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d94:	4b36      	ldr	r3, [pc, #216]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d115      	bne.n	8006dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0ea      	b.n	8006f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d107      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006dac:	4b30      	ldr	r3, [pc, #192]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d109      	bne.n	8006dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e0de      	b.n	8006f7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0d6      	b.n	8006f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dcc:	4b28      	ldr	r3, [pc, #160]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	f023 0207 	bic.w	r2, r3, #7
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4925      	ldr	r1, [pc, #148]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dde:	f7fd f931 	bl	8004044 <HAL_GetTick>
 8006de2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de4:	e00a      	b.n	8006dfc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de6:	f7fd f92d 	bl	8004044 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e0be      	b.n	8006f7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d1eb      	bne.n	8006de6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d010      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	4b14      	ldr	r3, [pc, #80]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d208      	bcs.n	8006e3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e2a:	4b11      	ldr	r3, [pc, #68]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	f023 020f 	bic.w	r2, r3, #15
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	490e      	ldr	r1, [pc, #56]	@ (8006e70 <HAL_RCC_ClockConfig+0x244>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e6c <HAL_RCC_ClockConfig+0x240>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 030f 	and.w	r3, r3, #15
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d214      	bcs.n	8006e74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4a:	4b08      	ldr	r3, [pc, #32]	@ (8006e6c <HAL_RCC_ClockConfig+0x240>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f023 020f 	bic.w	r2, r3, #15
 8006e52:	4906      	ldr	r1, [pc, #24]	@ (8006e6c <HAL_RCC_ClockConfig+0x240>)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5a:	4b04      	ldr	r3, [pc, #16]	@ (8006e6c <HAL_RCC_ClockConfig+0x240>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d005      	beq.n	8006e74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e086      	b.n	8006f7a <HAL_RCC_ClockConfig+0x34e>
 8006e6c:	52002000 	.word	0x52002000
 8006e70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d010      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	4b3f      	ldr	r3, [pc, #252]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d208      	bcs.n	8006ea2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e90:	4b3c      	ldr	r3, [pc, #240]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	4939      	ldr	r1, [pc, #228]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d010      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	695a      	ldr	r2, [r3, #20]
 8006eb2:	4b34      	ldr	r3, [pc, #208]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d208      	bcs.n	8006ed0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ebe:	4b31      	ldr	r3, [pc, #196]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	492e      	ldr	r1, [pc, #184]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d010      	beq.n	8006efe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699a      	ldr	r2, [r3, #24]
 8006ee0:	4b28      	ldr	r3, [pc, #160]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d208      	bcs.n	8006efe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006eec:	4b25      	ldr	r3, [pc, #148]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	4922      	ldr	r1, [pc, #136]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d010      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69da      	ldr	r2, [r3, #28]
 8006f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d208      	bcs.n	8006f2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	4917      	ldr	r1, [pc, #92]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f2c:	f000 f834 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006f30:	4602      	mov	r2, r0
 8006f32:	4b14      	ldr	r3, [pc, #80]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	0a1b      	lsrs	r3, r3, #8
 8006f38:	f003 030f 	and.w	r3, r3, #15
 8006f3c:	4912      	ldr	r1, [pc, #72]	@ (8006f88 <HAL_RCC_ClockConfig+0x35c>)
 8006f3e:	5ccb      	ldrb	r3, [r1, r3]
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
 8006f48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f84 <HAL_RCC_ClockConfig+0x358>)
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	4a0d      	ldr	r2, [pc, #52]	@ (8006f88 <HAL_RCC_ClockConfig+0x35c>)
 8006f54:	5cd3      	ldrb	r3, [r2, r3]
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f60:	4a0a      	ldr	r2, [pc, #40]	@ (8006f8c <HAL_RCC_ClockConfig+0x360>)
 8006f62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f64:	4a0a      	ldr	r2, [pc, #40]	@ (8006f90 <HAL_RCC_ClockConfig+0x364>)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f94 <HAL_RCC_ClockConfig+0x368>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f002 f9da 	bl	8009328 <HAL_InitTick>
 8006f74:	4603      	mov	r3, r0
 8006f76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	58024400 	.word	0x58024400
 8006f88:	08009bec 	.word	0x08009bec
 8006f8c:	24000044 	.word	0x24000044
 8006f90:	24000040 	.word	0x24000040
 8006f94:	24000050 	.word	0x24000050

08006f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b089      	sub	sp, #36	@ 0x24
 8006f9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f9e:	4bb3      	ldr	r3, [pc, #716]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fa6:	2b18      	cmp	r3, #24
 8006fa8:	f200 8155 	bhi.w	8007256 <HAL_RCC_GetSysClockFreq+0x2be>
 8006fac:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb2:	bf00      	nop
 8006fb4:	08007019 	.word	0x08007019
 8006fb8:	08007257 	.word	0x08007257
 8006fbc:	08007257 	.word	0x08007257
 8006fc0:	08007257 	.word	0x08007257
 8006fc4:	08007257 	.word	0x08007257
 8006fc8:	08007257 	.word	0x08007257
 8006fcc:	08007257 	.word	0x08007257
 8006fd0:	08007257 	.word	0x08007257
 8006fd4:	0800703f 	.word	0x0800703f
 8006fd8:	08007257 	.word	0x08007257
 8006fdc:	08007257 	.word	0x08007257
 8006fe0:	08007257 	.word	0x08007257
 8006fe4:	08007257 	.word	0x08007257
 8006fe8:	08007257 	.word	0x08007257
 8006fec:	08007257 	.word	0x08007257
 8006ff0:	08007257 	.word	0x08007257
 8006ff4:	08007045 	.word	0x08007045
 8006ff8:	08007257 	.word	0x08007257
 8006ffc:	08007257 	.word	0x08007257
 8007000:	08007257 	.word	0x08007257
 8007004:	08007257 	.word	0x08007257
 8007008:	08007257 	.word	0x08007257
 800700c:	08007257 	.word	0x08007257
 8007010:	08007257 	.word	0x08007257
 8007014:	0800704b 	.word	0x0800704b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007018:	4b94      	ldr	r3, [pc, #592]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d009      	beq.n	8007038 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007024:	4b91      	ldr	r3, [pc, #580]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	08db      	lsrs	r3, r3, #3
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	4a90      	ldr	r2, [pc, #576]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007030:	fa22 f303 	lsr.w	r3, r2, r3
 8007034:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007036:	e111      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007038:	4b8d      	ldr	r3, [pc, #564]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800703a:	61bb      	str	r3, [r7, #24]
      break;
 800703c:	e10e      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800703e:	4b8d      	ldr	r3, [pc, #564]	@ (8007274 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007040:	61bb      	str	r3, [r7, #24]
      break;
 8007042:	e10b      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007044:	4b8c      	ldr	r3, [pc, #560]	@ (8007278 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007046:	61bb      	str	r3, [r7, #24]
      break;
 8007048:	e108      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800704a:	4b88      	ldr	r3, [pc, #544]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800704c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007054:	4b85      	ldr	r3, [pc, #532]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	091b      	lsrs	r3, r3, #4
 800705a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800705e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007060:	4b82      	ldr	r3, [pc, #520]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800706a:	4b80      	ldr	r3, [pc, #512]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800706c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706e:	08db      	lsrs	r3, r3, #3
 8007070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	fb02 f303 	mul.w	r3, r2, r3
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007082:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80e1 	beq.w	8007250 <HAL_RCC_GetSysClockFreq+0x2b8>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b02      	cmp	r3, #2
 8007092:	f000 8083 	beq.w	800719c <HAL_RCC_GetSysClockFreq+0x204>
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b02      	cmp	r3, #2
 800709a:	f200 80a1 	bhi.w	80071e0 <HAL_RCC_GetSysClockFreq+0x248>
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <HAL_RCC_GetSysClockFreq+0x114>
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d056      	beq.n	8007158 <HAL_RCC_GetSysClockFreq+0x1c0>
 80070aa:	e099      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ac:	4b6f      	ldr	r3, [pc, #444]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0320 	and.w	r3, r3, #32
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d02d      	beq.n	8007114 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070b8:	4b6c      	ldr	r3, [pc, #432]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	08db      	lsrs	r3, r3, #3
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	4a6b      	ldr	r2, [pc, #428]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070c4:	fa22 f303 	lsr.w	r3, r2, r3
 80070c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	ee07 3a90 	vmov	s15, r3
 80070d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e2:	4b62      	ldr	r3, [pc, #392]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800727c <HAL_RCC_GetSysClockFreq+0x2e4>
 80070fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007112:	e087      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007280 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007126:	4b51      	ldr	r3, [pc, #324]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007136:	ed97 6a02 	vldr	s12, [r7, #8]
 800713a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800727c <HAL_RCC_GetSysClockFreq+0x2e4>
 800713e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007156:	e065      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007162:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007284 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716a:	4b40      	ldr	r3, [pc, #256]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800716c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717a:	ed97 6a02 	vldr	s12, [r7, #8]
 800717e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800727c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800719a:	e043      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007288 <HAL_RCC_GetSysClockFreq+0x2f0>
 80071aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ae:	4b2f      	ldr	r3, [pc, #188]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071be:	ed97 6a02 	vldr	s12, [r7, #8]
 80071c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800727c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071de:	e021      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007284 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f2:	4b1e      	ldr	r3, [pc, #120]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007202:	ed97 6a02 	vldr	s12, [r7, #8]
 8007206:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800727c <HAL_RCC_GetSysClockFreq+0x2e4>
 800720a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007222:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007224:	4b11      	ldr	r3, [pc, #68]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007228:	0a5b      	lsrs	r3, r3, #9
 800722a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800722e:	3301      	adds	r3, #1
 8007230:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800723c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007248:	ee17 3a90 	vmov	r3, s15
 800724c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800724e:	e005      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	61bb      	str	r3, [r7, #24]
      break;
 8007254:	e002      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007256:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007258:	61bb      	str	r3, [r7, #24]
      break;
 800725a:	bf00      	nop
  }

  return sysclockfreq;
 800725c:	69bb      	ldr	r3, [r7, #24]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3724      	adds	r7, #36	@ 0x24
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	58024400 	.word	0x58024400
 8007270:	03d09000 	.word	0x03d09000
 8007274:	003d0900 	.word	0x003d0900
 8007278:	017d7840 	.word	0x017d7840
 800727c:	46000000 	.word	0x46000000
 8007280:	4c742400 	.word	0x4c742400
 8007284:	4a742400 	.word	0x4a742400
 8007288:	4bbebc20 	.word	0x4bbebc20

0800728c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007292:	f7ff fe81 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8007296:	4602      	mov	r2, r0
 8007298:	4b10      	ldr	r3, [pc, #64]	@ (80072dc <HAL_RCC_GetHCLKFreq+0x50>)
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	0a1b      	lsrs	r3, r3, #8
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	490f      	ldr	r1, [pc, #60]	@ (80072e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80072a4:	5ccb      	ldrb	r3, [r1, r3]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	fa22 f303 	lsr.w	r3, r2, r3
 80072ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072b0:	4b0a      	ldr	r3, [pc, #40]	@ (80072dc <HAL_RCC_GetHCLKFreq+0x50>)
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	4a09      	ldr	r2, [pc, #36]	@ (80072e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80072ba:	5cd3      	ldrb	r3, [r2, r3]
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	fa22 f303 	lsr.w	r3, r2, r3
 80072c6:	4a07      	ldr	r2, [pc, #28]	@ (80072e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80072c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ca:	4a07      	ldr	r2, [pc, #28]	@ (80072e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072d0:	4b04      	ldr	r3, [pc, #16]	@ (80072e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80072d2:	681b      	ldr	r3, [r3, #0]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	58024400 	.word	0x58024400
 80072e0:	08009bec 	.word	0x08009bec
 80072e4:	24000044 	.word	0x24000044
 80072e8:	24000040 	.word	0x24000040

080072ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072f0:	f7ff ffcc 	bl	800728c <HAL_RCC_GetHCLKFreq>
 80072f4:	4602      	mov	r2, r0
 80072f6:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	091b      	lsrs	r3, r3, #4
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	4904      	ldr	r1, [pc, #16]	@ (8007314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007302:	5ccb      	ldrb	r3, [r1, r3]
 8007304:	f003 031f 	and.w	r3, r3, #31
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800730c:	4618      	mov	r0, r3
 800730e:	bd80      	pop	{r7, pc}
 8007310:	58024400 	.word	0x58024400
 8007314:	08009bec 	.word	0x08009bec

08007318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800731c:	f7ff ffb6 	bl	800728c <HAL_RCC_GetHCLKFreq>
 8007320:	4602      	mov	r2, r0
 8007322:	4b06      	ldr	r3, [pc, #24]	@ (800733c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	0a1b      	lsrs	r3, r3, #8
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	4904      	ldr	r1, [pc, #16]	@ (8007340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800732e:	5ccb      	ldrb	r3, [r1, r3]
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007338:	4618      	mov	r0, r3
 800733a:	bd80      	pop	{r7, pc}
 800733c:	58024400 	.word	0x58024400
 8007340:	08009bec 	.word	0x08009bec

08007344 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	223f      	movs	r2, #63	@ 0x3f
 8007352:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007354:	4b1a      	ldr	r3, [pc, #104]	@ (80073c0 <HAL_RCC_GetClockConfig+0x7c>)
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	f003 0207 	and.w	r2, r3, #7
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007360:	4b17      	ldr	r3, [pc, #92]	@ (80073c0 <HAL_RCC_GetClockConfig+0x7c>)
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800736c:	4b14      	ldr	r3, [pc, #80]	@ (80073c0 <HAL_RCC_GetClockConfig+0x7c>)
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f003 020f 	and.w	r2, r3, #15
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007378:	4b11      	ldr	r3, [pc, #68]	@ (80073c0 <HAL_RCC_GetClockConfig+0x7c>)
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007384:	4b0e      	ldr	r3, [pc, #56]	@ (80073c0 <HAL_RCC_GetClockConfig+0x7c>)
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007390:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <HAL_RCC_GetClockConfig+0x7c>)
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800739c:	4b08      	ldr	r3, [pc, #32]	@ (80073c0 <HAL_RCC_GetClockConfig+0x7c>)
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80073a8:	4b06      	ldr	r3, [pc, #24]	@ (80073c4 <HAL_RCC_GetClockConfig+0x80>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 020f 	and.w	r2, r3, #15
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	58024400 	.word	0x58024400
 80073c4:	52002000 	.word	0x52002000

080073c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073cc:	b0ca      	sub	sp, #296	@ 0x128
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073d4:	2300      	movs	r3, #0
 80073d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80073ec:	2500      	movs	r5, #0
 80073ee:	ea54 0305 	orrs.w	r3, r4, r5
 80073f2:	d049      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073fe:	d02f      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007400:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007404:	d828      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800740a:	d01a      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800740c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007410:	d822      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800741a:	d007      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800741c:	e01c      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800741e:	4bb8      	ldr	r3, [pc, #736]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	4ab7      	ldr	r2, [pc, #732]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800742a:	e01a      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007430:	3308      	adds	r3, #8
 8007432:	2102      	movs	r1, #2
 8007434:	4618      	mov	r0, r3
 8007436:	f001 f9d1 	bl	80087dc <RCCEx_PLL2_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007440:	e00f      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007446:	3328      	adds	r3, #40	@ 0x28
 8007448:	2102      	movs	r1, #2
 800744a:	4618      	mov	r0, r3
 800744c:	f001 fa78 	bl	8008940 <RCCEx_PLL3_Config>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007456:	e004      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800745e:	e000      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10a      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800746a:	4ba5      	ldr	r3, [pc, #660]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800746c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800746e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007478:	4aa1      	ldr	r2, [pc, #644]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800747a:	430b      	orrs	r3, r1
 800747c:	6513      	str	r3, [r2, #80]	@ 0x50
 800747e:	e003      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007494:	f04f 0900 	mov.w	r9, #0
 8007498:	ea58 0309 	orrs.w	r3, r8, r9
 800749c:	d047      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d82a      	bhi.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80074a8:	a201      	add	r2, pc, #4	@ (adr r2, 80074b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074c5 	.word	0x080074c5
 80074b4:	080074d3 	.word	0x080074d3
 80074b8:	080074e9 	.word	0x080074e9
 80074bc:	08007507 	.word	0x08007507
 80074c0:	08007507 	.word	0x08007507
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c4:	4b8e      	ldr	r3, [pc, #568]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	4a8d      	ldr	r2, [pc, #564]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074d0:	e01a      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d6:	3308      	adds	r3, #8
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 f97e 	bl	80087dc <RCCEx_PLL2_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074e6:	e00f      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ec:	3328      	adds	r3, #40	@ 0x28
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 fa25 	bl	8008940 <RCCEx_PLL3_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074fc:	e004      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007504:	e000      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10a      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007510:	4b7b      	ldr	r3, [pc, #492]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007514:	f023 0107 	bic.w	r1, r3, #7
 8007518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800751e:	4a78      	ldr	r2, [pc, #480]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007520:	430b      	orrs	r3, r1
 8007522:	6513      	str	r3, [r2, #80]	@ 0x50
 8007524:	e003      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800752a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800753a:	f04f 0b00 	mov.w	fp, #0
 800753e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007542:	d04c      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800754a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800754e:	d030      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007554:	d829      	bhi.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007556:	2bc0      	cmp	r3, #192	@ 0xc0
 8007558:	d02d      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800755a:	2bc0      	cmp	r3, #192	@ 0xc0
 800755c:	d825      	bhi.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800755e:	2b80      	cmp	r3, #128	@ 0x80
 8007560:	d018      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007562:	2b80      	cmp	r3, #128	@ 0x80
 8007564:	d821      	bhi.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800756a:	2b40      	cmp	r3, #64	@ 0x40
 800756c:	d007      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800756e:	e01c      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007570:	4b63      	ldr	r3, [pc, #396]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	4a62      	ldr	r2, [pc, #392]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800757a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800757c:	e01c      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007582:	3308      	adds	r3, #8
 8007584:	2100      	movs	r1, #0
 8007586:	4618      	mov	r0, r3
 8007588:	f001 f928 	bl	80087dc <RCCEx_PLL2_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007592:	e011      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007598:	3328      	adds	r3, #40	@ 0x28
 800759a:	2100      	movs	r1, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f001 f9cf 	bl	8008940 <RCCEx_PLL3_Config>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80075a8:	e006      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075b0:	e002      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80075b2:	bf00      	nop
 80075b4:	e000      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80075b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80075c0:	4b4f      	ldr	r3, [pc, #316]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80075c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ce:	4a4c      	ldr	r2, [pc, #304]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075d0:	430b      	orrs	r3, r1
 80075d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80075d4:	e003      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80075de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80075ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80075ee:	2300      	movs	r3, #0
 80075f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80075f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80075f8:	460b      	mov	r3, r1
 80075fa:	4313      	orrs	r3, r2
 80075fc:	d053      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007602:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007606:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800760a:	d035      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800760c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007610:	d82e      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007612:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007616:	d031      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007618:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800761c:	d828      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800761e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007622:	d01a      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007628:	d822      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800762e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007632:	d007      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007634:	e01c      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007636:	4b32      	ldr	r3, [pc, #200]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	4a31      	ldr	r2, [pc, #196]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800763c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007642:	e01c      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007648:	3308      	adds	r3, #8
 800764a:	2100      	movs	r1, #0
 800764c:	4618      	mov	r0, r3
 800764e:	f001 f8c5 	bl	80087dc <RCCEx_PLL2_Config>
 8007652:	4603      	mov	r3, r0
 8007654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007658:	e011      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	3328      	adds	r3, #40	@ 0x28
 8007660:	2100      	movs	r1, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f001 f96c 	bl	8008940 <RCCEx_PLL3_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800766e:	e006      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007676:	e002      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007678:	bf00      	nop
 800767a:	e000      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800767c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800767e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10b      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007686:	4b1e      	ldr	r3, [pc, #120]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007692:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007696:	4a1a      	ldr	r2, [pc, #104]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007698:	430b      	orrs	r3, r1
 800769a:	6593      	str	r3, [r2, #88]	@ 0x58
 800769c:	e003      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80076a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80076b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80076b6:	2300      	movs	r3, #0
 80076b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80076bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80076c0:	460b      	mov	r3, r1
 80076c2:	4313      	orrs	r3, r2
 80076c4:	d056      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076d2:	d038      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80076d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076d8:	d831      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076de:	d034      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80076e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076e4:	d82b      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076ea:	d01d      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80076ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076f0:	d825      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d006      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80076f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076fa:	d00a      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80076fc:	e01f      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076fe:	bf00      	nop
 8007700:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007704:	4ba2      	ldr	r3, [pc, #648]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	4aa1      	ldr	r2, [pc, #644]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800770a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800770e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007710:	e01c      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007716:	3308      	adds	r3, #8
 8007718:	2100      	movs	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f001 f85e 	bl	80087dc <RCCEx_PLL2_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007726:	e011      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772c:	3328      	adds	r3, #40	@ 0x28
 800772e:	2100      	movs	r1, #0
 8007730:	4618      	mov	r0, r3
 8007732:	f001 f905 	bl	8008940 <RCCEx_PLL3_Config>
 8007736:	4603      	mov	r3, r0
 8007738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800773c:	e006      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007744:	e002      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007746:	bf00      	nop
 8007748:	e000      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800774a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10b      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007754:	4b8e      	ldr	r3, [pc, #568]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007758:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800775c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007760:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007764:	4a8a      	ldr	r2, [pc, #552]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007766:	430b      	orrs	r3, r1
 8007768:	6593      	str	r3, [r2, #88]	@ 0x58
 800776a:	e003      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007780:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007784:	2300      	movs	r3, #0
 8007786:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800778a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800778e:	460b      	mov	r3, r1
 8007790:	4313      	orrs	r3, r2
 8007792:	d03a      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779a:	2b30      	cmp	r3, #48	@ 0x30
 800779c:	d01f      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800779e:	2b30      	cmp	r3, #48	@ 0x30
 80077a0:	d819      	bhi.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d00c      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d815      	bhi.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d019      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80077ae:	2b10      	cmp	r3, #16
 80077b0:	d111      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b2:	4b77      	ldr	r3, [pc, #476]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	4a76      	ldr	r2, [pc, #472]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80077be:	e011      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c4:	3308      	adds	r3, #8
 80077c6:	2102      	movs	r1, #2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 f807 	bl	80087dc <RCCEx_PLL2_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80077d4:	e006      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077dc:	e002      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80077de:	bf00      	nop
 80077e0:	e000      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80077e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077ec:	4b68      	ldr	r3, [pc, #416]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077fa:	4a65      	ldr	r2, [pc, #404]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077fc:	430b      	orrs	r3, r1
 80077fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007800:	e003      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800780a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007816:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800781a:	2300      	movs	r3, #0
 800781c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007820:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007824:	460b      	mov	r3, r1
 8007826:	4313      	orrs	r3, r2
 8007828:	d051      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007830:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007834:	d035      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007836:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800783a:	d82e      	bhi.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800783c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007840:	d031      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007842:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007846:	d828      	bhi.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800784c:	d01a      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800784e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007852:	d822      	bhi.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800785c:	d007      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800785e:	e01c      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007860:	4b4b      	ldr	r3, [pc, #300]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007864:	4a4a      	ldr	r2, [pc, #296]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800786a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800786c:	e01c      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800786e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007872:	3308      	adds	r3, #8
 8007874:	2100      	movs	r1, #0
 8007876:	4618      	mov	r0, r3
 8007878:	f000 ffb0 	bl	80087dc <RCCEx_PLL2_Config>
 800787c:	4603      	mov	r3, r0
 800787e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007882:	e011      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007888:	3328      	adds	r3, #40	@ 0x28
 800788a:	2100      	movs	r1, #0
 800788c:	4618      	mov	r0, r3
 800788e:	f001 f857 	bl	8008940 <RCCEx_PLL3_Config>
 8007892:	4603      	mov	r3, r0
 8007894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007898:	e006      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078a0:	e002      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80078a2:	bf00      	nop
 80078a4:	e000      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80078a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80078b0:	4b37      	ldr	r3, [pc, #220]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80078b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078be:	4a34      	ldr	r2, [pc, #208]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80078c4:	e003      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80078da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078de:	2300      	movs	r3, #0
 80078e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80078e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80078e8:	460b      	mov	r3, r1
 80078ea:	4313      	orrs	r3, r2
 80078ec:	d056      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80078ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078f8:	d033      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80078fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078fe:	d82c      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007900:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007904:	d02f      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007906:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800790a:	d826      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800790c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007910:	d02b      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007912:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007916:	d820      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800791c:	d012      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800791e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007922:	d81a      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d022      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800792c:	d115      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007932:	3308      	adds	r3, #8
 8007934:	2101      	movs	r1, #1
 8007936:	4618      	mov	r0, r3
 8007938:	f000 ff50 	bl	80087dc <RCCEx_PLL2_Config>
 800793c:	4603      	mov	r3, r0
 800793e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007942:	e015      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007948:	3328      	adds	r3, #40	@ 0x28
 800794a:	2101      	movs	r1, #1
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fff7 	bl	8008940 <RCCEx_PLL3_Config>
 8007952:	4603      	mov	r3, r0
 8007954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007958:	e00a      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007960:	e006      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007962:	bf00      	nop
 8007964:	e004      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007966:	bf00      	nop
 8007968:	e002      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800796e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10d      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007978:	4b05      	ldr	r3, [pc, #20]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800797a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800797c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007986:	4a02      	ldr	r2, [pc, #8]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007988:	430b      	orrs	r3, r1
 800798a:	6513      	str	r3, [r2, #80]	@ 0x50
 800798c:	e006      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800798e:	bf00      	nop
 8007990:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80079a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079ac:	2300      	movs	r3, #0
 80079ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4313      	orrs	r3, r2
 80079ba:	d055      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079c8:	d033      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80079ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079ce:	d82c      	bhi.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d4:	d02f      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80079d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079da:	d826      	bhi.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079e0:	d02b      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80079e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079e6:	d820      	bhi.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ec:	d012      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80079ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f2:	d81a      	bhi.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d022      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80079f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fc:	d115      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a02:	3308      	adds	r3, #8
 8007a04:	2101      	movs	r1, #1
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fee8 	bl	80087dc <RCCEx_PLL2_Config>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a12:	e015      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a18:	3328      	adds	r3, #40	@ 0x28
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 ff8f 	bl	8008940 <RCCEx_PLL3_Config>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a28:	e00a      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a30:	e006      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a32:	bf00      	nop
 8007a34:	e004      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a36:	bf00      	nop
 8007a38:	e002      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a3a:	bf00      	nop
 8007a3c:	e000      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10b      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007a48:	4ba3      	ldr	r3, [pc, #652]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a4c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a58:	4a9f      	ldr	r2, [pc, #636]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a5e:	e003      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007a74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a82:	460b      	mov	r3, r1
 8007a84:	4313      	orrs	r3, r2
 8007a86:	d037      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a92:	d00e      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a98:	d816      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d018      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007a9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007aa2:	d111      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	4a8b      	ldr	r2, [pc, #556]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ab0:	e00f      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	2101      	movs	r1, #1
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fe8e 	bl	80087dc <RCCEx_PLL2_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ac6:	e004      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ace:	e000      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ada:	4b7f      	ldr	r3, [pc, #508]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ade:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae8:	4a7b      	ldr	r2, [pc, #492]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aea:	430b      	orrs	r3, r1
 8007aec:	6513      	str	r3, [r2, #80]	@ 0x50
 8007aee:	e003      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007b04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b0e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4313      	orrs	r3, r2
 8007b16:	d039      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d81c      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007b22:	a201      	add	r2, pc, #4	@ (adr r2, 8007b28 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b65 	.word	0x08007b65
 8007b2c:	08007b39 	.word	0x08007b39
 8007b30:	08007b47 	.word	0x08007b47
 8007b34:	08007b65 	.word	0x08007b65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b38:	4b67      	ldr	r3, [pc, #412]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3c:	4a66      	ldr	r2, [pc, #408]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b44:	e00f      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	2102      	movs	r1, #2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fe44 	bl	80087dc <RCCEx_PLL2_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b5a:	e004      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b62:	e000      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10a      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b72:	f023 0103 	bic.w	r1, r3, #3
 8007b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b7c:	4a56      	ldr	r2, [pc, #344]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b82:	e003      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ba2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f000 809f 	beq.w	8007cec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bae:	4b4b      	ldr	r3, [pc, #300]	@ (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bba:	f7fc fa43 	bl	8004044 <HAL_GetTick>
 8007bbe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bc2:	e00b      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bc4:	f7fc fa3e 	bl	8004044 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b64      	cmp	r3, #100	@ 0x64
 8007bd2:	d903      	bls.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bda:	e005      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0ed      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d179      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007bf0:	4b39      	ldr	r3, [pc, #228]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bf2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bfc:	4053      	eors	r3, r2
 8007bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d015      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c06:	4b34      	ldr	r3, [pc, #208]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c12:	4b31      	ldr	r3, [pc, #196]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c16:	4a30      	ldr	r2, [pc, #192]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c22:	4a2d      	ldr	r2, [pc, #180]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007c2a:	4a2b      	ldr	r2, [pc, #172]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007c30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c3e:	d118      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c40:	f7fc fa00 	bl	8004044 <HAL_GetTick>
 8007c44:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c48:	e00d      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c4a:	f7fc f9fb 	bl	8004044 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007c54:	1ad2      	subs	r2, r2, r3
 8007c56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d903      	bls.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007c64:	e005      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c66:	4b1c      	ldr	r3, [pc, #112]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0eb      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d129      	bne.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c8a:	d10e      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007c8c:	4b12      	ldr	r3, [pc, #72]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c9c:	091a      	lsrs	r2, r3, #4
 8007c9e:	4b10      	ldr	r3, [pc, #64]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	6113      	str	r3, [r2, #16]
 8007ca8:	e005      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007caa:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	4a0a      	ldr	r2, [pc, #40]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007cb4:	6113      	str	r3, [r2, #16]
 8007cb6:	4b08      	ldr	r3, [pc, #32]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cb8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc6:	4a04      	ldr	r2, [pc, #16]	@ (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ccc:	e00e      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007cd6:	e009      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007cd8:	58024400 	.word	0x58024400
 8007cdc:	58024800 	.word	0x58024800
 8007ce0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f002 0301 	and.w	r3, r2, #1
 8007cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	f000 8089 	beq.w	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d14:	2b28      	cmp	r3, #40	@ 0x28
 8007d16:	d86b      	bhi.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007d18:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007df9 	.word	0x08007df9
 8007d24:	08007df1 	.word	0x08007df1
 8007d28:	08007df1 	.word	0x08007df1
 8007d2c:	08007df1 	.word	0x08007df1
 8007d30:	08007df1 	.word	0x08007df1
 8007d34:	08007df1 	.word	0x08007df1
 8007d38:	08007df1 	.word	0x08007df1
 8007d3c:	08007df1 	.word	0x08007df1
 8007d40:	08007dc5 	.word	0x08007dc5
 8007d44:	08007df1 	.word	0x08007df1
 8007d48:	08007df1 	.word	0x08007df1
 8007d4c:	08007df1 	.word	0x08007df1
 8007d50:	08007df1 	.word	0x08007df1
 8007d54:	08007df1 	.word	0x08007df1
 8007d58:	08007df1 	.word	0x08007df1
 8007d5c:	08007df1 	.word	0x08007df1
 8007d60:	08007ddb 	.word	0x08007ddb
 8007d64:	08007df1 	.word	0x08007df1
 8007d68:	08007df1 	.word	0x08007df1
 8007d6c:	08007df1 	.word	0x08007df1
 8007d70:	08007df1 	.word	0x08007df1
 8007d74:	08007df1 	.word	0x08007df1
 8007d78:	08007df1 	.word	0x08007df1
 8007d7c:	08007df1 	.word	0x08007df1
 8007d80:	08007df9 	.word	0x08007df9
 8007d84:	08007df1 	.word	0x08007df1
 8007d88:	08007df1 	.word	0x08007df1
 8007d8c:	08007df1 	.word	0x08007df1
 8007d90:	08007df1 	.word	0x08007df1
 8007d94:	08007df1 	.word	0x08007df1
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007df1 	.word	0x08007df1
 8007da0:	08007df9 	.word	0x08007df9
 8007da4:	08007df1 	.word	0x08007df1
 8007da8:	08007df1 	.word	0x08007df1
 8007dac:	08007df1 	.word	0x08007df1
 8007db0:	08007df1 	.word	0x08007df1
 8007db4:	08007df1 	.word	0x08007df1
 8007db8:	08007df1 	.word	0x08007df1
 8007dbc:	08007df1 	.word	0x08007df1
 8007dc0:	08007df9 	.word	0x08007df9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc8:	3308      	adds	r3, #8
 8007dca:	2101      	movs	r1, #1
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fd05 	bl	80087dc <RCCEx_PLL2_Config>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007dd8:	e00f      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dde:	3328      	adds	r3, #40	@ 0x28
 8007de0:	2101      	movs	r1, #1
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fdac 	bl	8008940 <RCCEx_PLL3_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007dee:	e004      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007df6:	e000      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007e02:	4bbf      	ldr	r3, [pc, #764]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e06:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e10:	4abb      	ldr	r2, [pc, #748]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e12:	430b      	orrs	r3, r1
 8007e14:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e16:	e003      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f002 0302 	and.w	r3, r2, #2
 8007e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007e36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	d041      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e46:	2b05      	cmp	r3, #5
 8007e48:	d824      	bhi.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007e9d 	.word	0x08007e9d
 8007e54:	08007e69 	.word	0x08007e69
 8007e58:	08007e7f 	.word	0x08007e7f
 8007e5c:	08007e9d 	.word	0x08007e9d
 8007e60:	08007e9d 	.word	0x08007e9d
 8007e64:	08007e9d 	.word	0x08007e9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	2101      	movs	r1, #1
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fcb3 	bl	80087dc <RCCEx_PLL2_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e7c:	e00f      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e82:	3328      	adds	r3, #40	@ 0x28
 8007e84:	2101      	movs	r1, #1
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fd5a 	bl	8008940 <RCCEx_PLL3_Config>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e92:	e004      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e9a:	e000      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10a      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ea6:	4b96      	ldr	r3, [pc, #600]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eaa:	f023 0107 	bic.w	r1, r3, #7
 8007eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007eb4:	4a92      	ldr	r2, [pc, #584]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007eb6:	430b      	orrs	r3, r1
 8007eb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007eba:	e003      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f002 0304 	and.w	r3, r2, #4
 8007ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007eda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	d044      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007eec:	2b05      	cmp	r3, #5
 8007eee:	d825      	bhi.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef6:	bf00      	nop
 8007ef8:	08007f45 	.word	0x08007f45
 8007efc:	08007f11 	.word	0x08007f11
 8007f00:	08007f27 	.word	0x08007f27
 8007f04:	08007f45 	.word	0x08007f45
 8007f08:	08007f45 	.word	0x08007f45
 8007f0c:	08007f45 	.word	0x08007f45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f14:	3308      	adds	r3, #8
 8007f16:	2101      	movs	r1, #1
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 fc5f 	bl	80087dc <RCCEx_PLL2_Config>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007f24:	e00f      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2a:	3328      	adds	r3, #40	@ 0x28
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fd06 	bl	8008940 <RCCEx_PLL3_Config>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007f3a:	e004      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10b      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f4e:	4b6c      	ldr	r3, [pc, #432]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f52:	f023 0107 	bic.w	r1, r3, #7
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f5e:	4a68      	ldr	r2, [pc, #416]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f60:	430b      	orrs	r3, r1
 8007f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f64:	e003      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f002 0320 	and.w	r3, r2, #32
 8007f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	d055      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f9a:	d033      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fa0:	d82c      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fa6:	d02f      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fac:	d826      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007fae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fb2:	d02b      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007fb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fb8:	d820      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fbe:	d012      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007fc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fc4:	d81a      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d022      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007fca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fce:	d115      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fbff 	bl	80087dc <RCCEx_PLL2_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007fe4:	e015      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fea:	3328      	adds	r3, #40	@ 0x28
 8007fec:	2102      	movs	r1, #2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fca6 	bl	8008940 <RCCEx_PLL3_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ffa:	e00a      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008002:	e006      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008004:	bf00      	nop
 8008006:	e004      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008008:	bf00      	nop
 800800a:	e002      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800800c:	bf00      	nop
 800800e:	e000      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10b      	bne.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800801a:	4b39      	ldr	r3, [pc, #228]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800801c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802a:	4a35      	ldr	r2, [pc, #212]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800802c:	430b      	orrs	r3, r1
 800802e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008030:	e003      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800804a:	2300      	movs	r3, #0
 800804c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008050:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008054:	460b      	mov	r3, r1
 8008056:	4313      	orrs	r3, r2
 8008058:	d058      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008062:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008066:	d033      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008068:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800806c:	d82c      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800806e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008072:	d02f      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008078:	d826      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800807a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800807e:	d02b      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008080:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008084:	d820      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008086:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800808a:	d012      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800808c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008090:	d81a      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d022      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800809a:	d115      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a0:	3308      	adds	r3, #8
 80080a2:	2100      	movs	r1, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fb99 	bl	80087dc <RCCEx_PLL2_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80080b0:	e015      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b6:	3328      	adds	r3, #40	@ 0x28
 80080b8:	2102      	movs	r1, #2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fc40 	bl	8008940 <RCCEx_PLL3_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80080c6:	e00a      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ce:	e006      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080d0:	bf00      	nop
 80080d2:	e004      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080d4:	bf00      	nop
 80080d6:	e002      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080d8:	bf00      	nop
 80080da:	e000      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10e      	bne.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080e6:	4b06      	ldr	r3, [pc, #24]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080f6:	4a02      	ldr	r2, [pc, #8]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080f8:	430b      	orrs	r3, r1
 80080fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80080fc:	e006      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80080fe:	bf00      	nop
 8008100:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800811c:	2300      	movs	r3, #0
 800811e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008122:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008126:	460b      	mov	r3, r1
 8008128:	4313      	orrs	r3, r2
 800812a:	d055      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008130:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008134:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008138:	d033      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800813a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800813e:	d82c      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008144:	d02f      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800814a:	d826      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800814c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008150:	d02b      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008152:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008156:	d820      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800815c:	d012      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800815e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008162:	d81a      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008164:	2b00      	cmp	r3, #0
 8008166:	d022      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800816c:	d115      	bne.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800816e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008172:	3308      	adds	r3, #8
 8008174:	2100      	movs	r1, #0
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fb30 	bl	80087dc <RCCEx_PLL2_Config>
 800817c:	4603      	mov	r3, r0
 800817e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008182:	e015      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008188:	3328      	adds	r3, #40	@ 0x28
 800818a:	2102      	movs	r1, #2
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fbd7 	bl	8008940 <RCCEx_PLL3_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008198:	e00a      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081a0:	e006      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80081a2:	bf00      	nop
 80081a4:	e004      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80081a6:	bf00      	nop
 80081a8:	e002      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80081aa:	bf00      	nop
 80081ac:	e000      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80081ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10b      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80081b8:	4ba1      	ldr	r3, [pc, #644]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80081c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081c8:	4a9d      	ldr	r2, [pc, #628]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081ca:	430b      	orrs	r3, r1
 80081cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ce:	e003      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f002 0308 	and.w	r3, r2, #8
 80081e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081e8:	2300      	movs	r3, #0
 80081ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80081f2:	460b      	mov	r3, r1
 80081f4:	4313      	orrs	r3, r2
 80081f6:	d01e      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80081f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008204:	d10c      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820a:	3328      	adds	r3, #40	@ 0x28
 800820c:	2102      	movs	r1, #2
 800820e:	4618      	mov	r0, r3
 8008210:	f000 fb96 	bl	8008940 <RCCEx_PLL3_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008220:	4b87      	ldr	r3, [pc, #540]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008224:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008230:	4a83      	ldr	r2, [pc, #524]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008232:	430b      	orrs	r3, r1
 8008234:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f002 0310 	and.w	r3, r2, #16
 8008242:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008246:	2300      	movs	r3, #0
 8008248:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800824c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008250:	460b      	mov	r3, r1
 8008252:	4313      	orrs	r3, r2
 8008254:	d01e      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800825e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008262:	d10c      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008268:	3328      	adds	r3, #40	@ 0x28
 800826a:	2102      	movs	r1, #2
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fb67 	bl	8008940 <RCCEx_PLL3_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800827e:	4b70      	ldr	r3, [pc, #448]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008282:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800828e:	4a6c      	ldr	r2, [pc, #432]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008290:	430b      	orrs	r3, r1
 8008292:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80082a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082a4:	2300      	movs	r3, #0
 80082a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80082ae:	460b      	mov	r3, r1
 80082b0:	4313      	orrs	r3, r2
 80082b2:	d03e      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80082b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082c0:	d022      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80082c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082c6:	d81b      	bhi.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80082cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082d0:	d00b      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80082d2:	e015      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d8:	3308      	adds	r3, #8
 80082da:	2100      	movs	r1, #0
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fa7d 	bl	80087dc <RCCEx_PLL2_Config>
 80082e2:	4603      	mov	r3, r0
 80082e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80082e8:	e00f      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ee:	3328      	adds	r3, #40	@ 0x28
 80082f0:	2102      	movs	r1, #2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fb24 	bl	8008940 <RCCEx_PLL3_Config>
 80082f8:	4603      	mov	r3, r0
 80082fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80082fe:	e004      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008306:	e000      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800830a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10b      	bne.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008312:	4b4b      	ldr	r3, [pc, #300]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008316:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800831a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008322:	4a47      	ldr	r2, [pc, #284]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008324:	430b      	orrs	r3, r1
 8008326:	6593      	str	r3, [r2, #88]	@ 0x58
 8008328:	e003      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800833e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008340:	2300      	movs	r3, #0
 8008342:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008344:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008348:	460b      	mov	r3, r1
 800834a:	4313      	orrs	r3, r2
 800834c:	d03b      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008356:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800835a:	d01f      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800835c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008360:	d818      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008366:	d003      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008368:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800836c:	d007      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800836e:	e011      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008370:	4b33      	ldr	r3, [pc, #204]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	4a32      	ldr	r2, [pc, #200]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800837a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800837c:	e00f      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800837e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008382:	3328      	adds	r3, #40	@ 0x28
 8008384:	2101      	movs	r1, #1
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fada 	bl	8008940 <RCCEx_PLL3_Config>
 800838c:	4603      	mov	r3, r0
 800838e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008392:	e004      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800839a:	e000      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800839c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800839e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10b      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083a6:	4b26      	ldr	r3, [pc, #152]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80083ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b6:	4a22      	ldr	r2, [pc, #136]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083b8:	430b      	orrs	r3, r1
 80083ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80083bc:	e003      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80083d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80083d4:	2300      	movs	r3, #0
 80083d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80083d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80083dc:	460b      	mov	r3, r1
 80083de:	4313      	orrs	r3, r2
 80083e0:	d034      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80083ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083f0:	d007      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80083f2:	e011      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083f4:	4b12      	ldr	r3, [pc, #72]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f8:	4a11      	ldr	r2, [pc, #68]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008400:	e00e      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008406:	3308      	adds	r3, #8
 8008408:	2102      	movs	r1, #2
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f9e6 	bl	80087dc <RCCEx_PLL2_Config>
 8008410:	4603      	mov	r3, r0
 8008412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008416:	e003      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800841e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10d      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008428:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800842a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800842c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008436:	4a02      	ldr	r2, [pc, #8]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008438:	430b      	orrs	r3, r1
 800843a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800843c:	e006      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800843e:	bf00      	nop
 8008440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008448:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800844c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008458:	66bb      	str	r3, [r7, #104]	@ 0x68
 800845a:	2300      	movs	r3, #0
 800845c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800845e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008462:	460b      	mov	r3, r1
 8008464:	4313      	orrs	r3, r2
 8008466:	d00c      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846c:	3328      	adds	r3, #40	@ 0x28
 800846e:	2102      	movs	r1, #2
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fa65 	bl	8008940 <RCCEx_PLL3_Config>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800848e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008490:	2300      	movs	r3, #0
 8008492:	667b      	str	r3, [r7, #100]	@ 0x64
 8008494:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008498:	460b      	mov	r3, r1
 800849a:	4313      	orrs	r3, r2
 800849c:	d038      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800849e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084aa:	d018      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80084ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084b0:	d811      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80084b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084b6:	d014      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80084b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084bc:	d80b      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d011      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80084c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084c6:	d106      	bne.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c8:	4bc3      	ldr	r3, [pc, #780]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084cc:	4ac2      	ldr	r2, [pc, #776]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80084d4:	e008      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084dc:	e004      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084de:	bf00      	nop
 80084e0:	e002      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084e2:	bf00      	nop
 80084e4:	e000      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10b      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084f0:	4bb9      	ldr	r3, [pc, #740]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008500:	4ab5      	ldr	r2, [pc, #724]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008502:	430b      	orrs	r3, r1
 8008504:	6553      	str	r3, [r2, #84]	@ 0x54
 8008506:	e003      	b.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800850c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800851c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800851e:	2300      	movs	r3, #0
 8008520:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008522:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008526:	460b      	mov	r3, r1
 8008528:	4313      	orrs	r3, r2
 800852a:	d009      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800852c:	4baa      	ldr	r3, [pc, #680]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800852e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008530:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800853a:	4aa7      	ldr	r2, [pc, #668]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800853c:	430b      	orrs	r3, r1
 800853e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800854c:	653b      	str	r3, [r7, #80]	@ 0x50
 800854e:	2300      	movs	r3, #0
 8008550:	657b      	str	r3, [r7, #84]	@ 0x54
 8008552:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008556:	460b      	mov	r3, r1
 8008558:	4313      	orrs	r3, r2
 800855a:	d00a      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800855c:	4b9e      	ldr	r3, [pc, #632]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008568:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800856c:	4a9a      	ldr	r2, [pc, #616]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800856e:	430b      	orrs	r3, r1
 8008570:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800857e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008580:	2300      	movs	r3, #0
 8008582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008584:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008588:	460b      	mov	r3, r1
 800858a:	4313      	orrs	r3, r2
 800858c:	d009      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800858e:	4b92      	ldr	r3, [pc, #584]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008592:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800859c:	4a8e      	ldr	r2, [pc, #568]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800859e:	430b      	orrs	r3, r1
 80085a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80085ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80085b0:	2300      	movs	r3, #0
 80085b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80085b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80085b8:	460b      	mov	r3, r1
 80085ba:	4313      	orrs	r3, r2
 80085bc:	d00e      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085be:	4b86      	ldr	r3, [pc, #536]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	4a85      	ldr	r2, [pc, #532]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085c8:	6113      	str	r3, [r2, #16]
 80085ca:	4b83      	ldr	r3, [pc, #524]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085cc:	6919      	ldr	r1, [r3, #16]
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80085d6:	4a80      	ldr	r2, [pc, #512]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085d8:	430b      	orrs	r3, r1
 80085da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80085dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80085e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085ea:	2300      	movs	r3, #0
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80085f2:	460b      	mov	r3, r1
 80085f4:	4313      	orrs	r3, r2
 80085f6:	d009      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80085f8:	4b77      	ldr	r3, [pc, #476]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008606:	4a74      	ldr	r2, [pc, #464]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008608:	430b      	orrs	r3, r1
 800860a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008618:	633b      	str	r3, [r7, #48]	@ 0x30
 800861a:	2300      	movs	r3, #0
 800861c:	637b      	str	r3, [r7, #52]	@ 0x34
 800861e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008622:	460b      	mov	r3, r1
 8008624:	4313      	orrs	r3, r2
 8008626:	d00a      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008628:	4b6b      	ldr	r3, [pc, #428]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800862a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800862c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008638:	4a67      	ldr	r2, [pc, #412]	@ (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800863a:	430b      	orrs	r3, r1
 800863c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800863e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	2100      	movs	r1, #0
 8008648:	62b9      	str	r1, [r7, #40]	@ 0x28
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008650:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008654:	460b      	mov	r3, r1
 8008656:	4313      	orrs	r3, r2
 8008658:	d011      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865e:	3308      	adds	r3, #8
 8008660:	2100      	movs	r1, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f8ba 	bl	80087dc <RCCEx_PLL2_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800866e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800867a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800867e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	2100      	movs	r1, #0
 8008688:	6239      	str	r1, [r7, #32]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008690:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008694:	460b      	mov	r3, r1
 8008696:	4313      	orrs	r3, r2
 8008698:	d011      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800869a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869e:	3308      	adds	r3, #8
 80086a0:	2101      	movs	r1, #1
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f89a 	bl	80087dc <RCCEx_PLL2_Config>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80086be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	2100      	movs	r1, #0
 80086c8:	61b9      	str	r1, [r7, #24]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80086d4:	460b      	mov	r3, r1
 80086d6:	4313      	orrs	r3, r2
 80086d8:	d011      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086de:	3308      	adds	r3, #8
 80086e0:	2102      	movs	r1, #2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f87a 	bl	80087dc <RCCEx_PLL2_Config>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80086fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	2100      	movs	r1, #0
 8008708:	6139      	str	r1, [r7, #16]
 800870a:	f003 0308 	and.w	r3, r3, #8
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008714:	460b      	mov	r3, r1
 8008716:	4313      	orrs	r3, r2
 8008718:	d011      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800871a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871e:	3328      	adds	r3, #40	@ 0x28
 8008720:	2100      	movs	r1, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f90c 	bl	8008940 <RCCEx_PLL3_Config>
 8008728:	4603      	mov	r3, r0
 800872a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800872e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800873a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800873e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	2100      	movs	r1, #0
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	f003 0310 	and.w	r3, r3, #16
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008754:	460b      	mov	r3, r1
 8008756:	4313      	orrs	r3, r2
 8008758:	d011      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800875a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875e:	3328      	adds	r3, #40	@ 0x28
 8008760:	2101      	movs	r1, #1
 8008762:	4618      	mov	r0, r3
 8008764:	f000 f8ec 	bl	8008940 <RCCEx_PLL3_Config>
 8008768:	4603      	mov	r3, r0
 800876a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800876e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800877a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	2100      	movs	r1, #0
 8008788:	6039      	str	r1, [r7, #0]
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	607b      	str	r3, [r7, #4]
 8008790:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008794:	460b      	mov	r3, r1
 8008796:	4313      	orrs	r3, r2
 8008798:	d011      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800879a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879e:	3328      	adds	r3, #40	@ 0x28
 80087a0:	2102      	movs	r1, #2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 f8cc 	bl	8008940 <RCCEx_PLL3_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80087be:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	e000      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80087d2:	46bd      	mov	sp, r7
 80087d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087d8:	58024400 	.word	0x58024400

080087dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087ea:	4b53      	ldr	r3, [pc, #332]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80087ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d101      	bne.n	80087fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e099      	b.n	800892e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a4e      	ldr	r2, [pc, #312]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 8008800:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008806:	f7fb fc1d 	bl	8004044 <HAL_GetTick>
 800880a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800880c:	e008      	b.n	8008820 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800880e:	f7fb fc19 	bl	8004044 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b02      	cmp	r3, #2
 800881a:	d901      	bls.n	8008820 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e086      	b.n	800892e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008820:	4b45      	ldr	r3, [pc, #276]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1f0      	bne.n	800880e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800882c:	4b42      	ldr	r3, [pc, #264]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 800882e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008830:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	031b      	lsls	r3, r3, #12
 800883a:	493f      	ldr	r1, [pc, #252]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 800883c:	4313      	orrs	r3, r2
 800883e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	3b01      	subs	r3, #1
 8008846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	3b01      	subs	r3, #1
 8008850:	025b      	lsls	r3, r3, #9
 8008852:	b29b      	uxth	r3, r3
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	3b01      	subs	r3, #1
 800885c:	041b      	lsls	r3, r3, #16
 800885e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	3b01      	subs	r3, #1
 800886a:	061b      	lsls	r3, r3, #24
 800886c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008870:	4931      	ldr	r1, [pc, #196]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 8008872:	4313      	orrs	r3, r2
 8008874:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008876:	4b30      	ldr	r3, [pc, #192]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 8008878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	492d      	ldr	r1, [pc, #180]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 8008884:	4313      	orrs	r3, r2
 8008886:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008888:	4b2b      	ldr	r3, [pc, #172]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 800888a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888c:	f023 0220 	bic.w	r2, r3, #32
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	4928      	ldr	r1, [pc, #160]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 8008896:	4313      	orrs	r3, r2
 8008898:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800889a:	4b27      	ldr	r3, [pc, #156]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 800889c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889e:	4a26      	ldr	r2, [pc, #152]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088a0:	f023 0310 	bic.w	r3, r3, #16
 80088a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088a6:	4b24      	ldr	r3, [pc, #144]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088aa:	4b24      	ldr	r3, [pc, #144]	@ (800893c <RCCEx_PLL2_Config+0x160>)
 80088ac:	4013      	ands	r3, r2
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	69d2      	ldr	r2, [r2, #28]
 80088b2:	00d2      	lsls	r2, r2, #3
 80088b4:	4920      	ldr	r1, [pc, #128]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80088ba:	4b1f      	ldr	r3, [pc, #124]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	4a1e      	ldr	r2, [pc, #120]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088c0:	f043 0310 	orr.w	r3, r3, #16
 80088c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80088cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d0:	4a19      	ldr	r2, [pc, #100]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088d8:	e00f      	b.n	80088fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d106      	bne.n	80088ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80088e0:	4b15      	ldr	r3, [pc, #84]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e4:	4a14      	ldr	r2, [pc, #80]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088ec:	e005      	b.n	80088fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088ee:	4b12      	ldr	r3, [pc, #72]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f2:	4a11      	ldr	r2, [pc, #68]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80088f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a0e      	ldr	r2, [pc, #56]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 8008900:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008906:	f7fb fb9d 	bl	8004044 <HAL_GetTick>
 800890a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800890c:	e008      	b.n	8008920 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800890e:	f7fb fb99 	bl	8004044 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b02      	cmp	r3, #2
 800891a:	d901      	bls.n	8008920 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e006      	b.n	800892e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008920:	4b05      	ldr	r3, [pc, #20]	@ (8008938 <RCCEx_PLL2_Config+0x15c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0f0      	beq.n	800890e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800892c:	7bfb      	ldrb	r3, [r7, #15]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	58024400 	.word	0x58024400
 800893c:	ffff0007 	.word	0xffff0007

08008940 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800894e:	4b53      	ldr	r3, [pc, #332]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	2b03      	cmp	r3, #3
 8008958:	d101      	bne.n	800895e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e099      	b.n	8008a92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800895e:	4b4f      	ldr	r3, [pc, #316]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a4e      	ldr	r2, [pc, #312]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800896a:	f7fb fb6b 	bl	8004044 <HAL_GetTick>
 800896e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008970:	e008      	b.n	8008984 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008972:	f7fb fb67 	bl	8004044 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	2b02      	cmp	r3, #2
 800897e:	d901      	bls.n	8008984 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e086      	b.n	8008a92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008984:	4b45      	ldr	r3, [pc, #276]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1f0      	bne.n	8008972 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008990:	4b42      	ldr	r3, [pc, #264]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008994:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	051b      	lsls	r3, r3, #20
 800899e:	493f      	ldr	r1, [pc, #252]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	025b      	lsls	r3, r3, #9
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	431a      	orrs	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	3b01      	subs	r3, #1
 80089c0:	041b      	lsls	r3, r3, #16
 80089c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80089c6:	431a      	orrs	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	061b      	lsls	r3, r3, #24
 80089d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80089d4:	4931      	ldr	r1, [pc, #196]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80089da:	4b30      	ldr	r3, [pc, #192]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	492d      	ldr	r1, [pc, #180]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089ec:	4b2b      	ldr	r3, [pc, #172]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 80089ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	4928      	ldr	r1, [pc, #160]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089fe:	4b27      	ldr	r3, [pc, #156]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a02:	4a26      	ldr	r2, [pc, #152]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a0a:	4b24      	ldr	r3, [pc, #144]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a0e:	4b24      	ldr	r3, [pc, #144]	@ (8008aa0 <RCCEx_PLL3_Config+0x160>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	69d2      	ldr	r2, [r2, #28]
 8008a16:	00d2      	lsls	r2, r2, #3
 8008a18:	4920      	ldr	r1, [pc, #128]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a22:	4a1e      	ldr	r2, [pc, #120]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d106      	bne.n	8008a3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a30:	4b1a      	ldr	r3, [pc, #104]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a34:	4a19      	ldr	r2, [pc, #100]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a3c:	e00f      	b.n	8008a5e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d106      	bne.n	8008a52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a44:	4b15      	ldr	r3, [pc, #84]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a48:	4a14      	ldr	r2, [pc, #80]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a50:	e005      	b.n	8008a5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a52:	4b12      	ldr	r3, [pc, #72]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a56:	4a11      	ldr	r2, [pc, #68]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a0e      	ldr	r2, [pc, #56]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a6a:	f7fb faeb 	bl	8004044 <HAL_GetTick>
 8008a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a70:	e008      	b.n	8008a84 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a72:	f7fb fae7 	bl	8004044 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e006      	b.n	8008a92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a84:	4b05      	ldr	r3, [pc, #20]	@ (8008a9c <RCCEx_PLL3_Config+0x15c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0f0      	beq.n	8008a72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	58024400 	.word	0x58024400
 8008aa0:	ffff0007 	.word	0xffff0007

08008aa4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e02b      	b.n	8008b10 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d106      	bne.n	8008ad2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f825 	bl	8008b1c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f000 fca9 	bl	800943c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	461a      	mov	r2, r3
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	f000 fcfd 	bl	80094f4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008afa:	4b07      	ldr	r3, [pc, #28]	@ (8008b18 <HAL_SDRAM_Init+0x74>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a06      	ldr	r2, [pc, #24]	@ (8008b18 <HAL_SDRAM_Init+0x74>)
 8008b00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b04:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	52004000 	.word	0x52004000

08008b1c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008b42:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d101      	bne.n	8008b4e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	e021      	b.n	8008b92 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d002      	beq.n	8008b5a <HAL_SDRAM_SendCommand+0x2a>
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b05      	cmp	r3, #5
 8008b58:	d118      	bne.n	8008b8c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fd2c 	bl	80095c8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d104      	bne.n	8008b82 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2205      	movs	r2, #5
 8008b7c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008b80:	e006      	b.n	8008b90 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008b8a:	e001      	b.n	8008b90 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e000      	b.n	8008b92 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3718      	adds	r7, #24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d101      	bne.n	8008bb4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e016      	b.n	8008be2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d10f      	bne.n	8008be0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fd1e 	bl	8009610 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e000      	b.n	8008be2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e049      	b.n	8008c90 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d106      	bne.n	8008c16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f841 	bl	8008c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3304      	adds	r3, #4
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f000 fac5 	bl	80091b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d001      	beq.n	8008cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e054      	b.n	8008d6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f042 0201 	orr.w	r2, r2, #1
 8008cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a26      	ldr	r2, [pc, #152]	@ (8008d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d022      	beq.n	8008d2c <HAL_TIM_Base_Start_IT+0x80>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cee:	d01d      	beq.n	8008d2c <HAL_TIM_Base_Start_IT+0x80>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a22      	ldr	r2, [pc, #136]	@ (8008d80 <HAL_TIM_Base_Start_IT+0xd4>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d018      	beq.n	8008d2c <HAL_TIM_Base_Start_IT+0x80>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a21      	ldr	r2, [pc, #132]	@ (8008d84 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d013      	beq.n	8008d2c <HAL_TIM_Base_Start_IT+0x80>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a1f      	ldr	r2, [pc, #124]	@ (8008d88 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00e      	beq.n	8008d2c <HAL_TIM_Base_Start_IT+0x80>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a1e      	ldr	r2, [pc, #120]	@ (8008d8c <HAL_TIM_Base_Start_IT+0xe0>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d009      	beq.n	8008d2c <HAL_TIM_Base_Start_IT+0x80>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8008d90 <HAL_TIM_Base_Start_IT+0xe4>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d004      	beq.n	8008d2c <HAL_TIM_Base_Start_IT+0x80>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a1b      	ldr	r2, [pc, #108]	@ (8008d94 <HAL_TIM_Base_Start_IT+0xe8>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d115      	bne.n	8008d58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689a      	ldr	r2, [r3, #8]
 8008d32:	4b19      	ldr	r3, [pc, #100]	@ (8008d98 <HAL_TIM_Base_Start_IT+0xec>)
 8008d34:	4013      	ands	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b06      	cmp	r3, #6
 8008d3c:	d015      	beq.n	8008d6a <HAL_TIM_Base_Start_IT+0xbe>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d44:	d011      	beq.n	8008d6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f042 0201 	orr.w	r2, r2, #1
 8008d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d56:	e008      	b.n	8008d6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0201 	orr.w	r2, r2, #1
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	e000      	b.n	8008d6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	40010000 	.word	0x40010000
 8008d80:	40000400 	.word	0x40000400
 8008d84:	40000800 	.word	0x40000800
 8008d88:	40000c00 	.word	0x40000c00
 8008d8c:	40010400 	.word	0x40010400
 8008d90:	40001800 	.word	0x40001800
 8008d94:	40014000 	.word	0x40014000
 8008d98:	00010007 	.word	0x00010007

08008d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e049      	b.n	8008e42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f89d 	bl	8008f02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	f000 f9ec 	bl	80091b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b082      	sub	sp, #8
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2202      	movs	r2, #2
 8008e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6a1a      	ldr	r2, [r3, #32]
 8008e60:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008e64:	4013      	ands	r3, r2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10f      	bne.n	8008e8a <HAL_TIM_PWM_DeInit+0x40>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6a1a      	ldr	r2, [r3, #32]
 8008e70:	f240 4344 	movw	r3, #1092	@ 0x444
 8008e74:	4013      	ands	r3, r2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d107      	bne.n	8008e8a <HAL_TIM_PWM_DeInit+0x40>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 0201 	bic.w	r2, r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f843 	bl	8008f16 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b083      	sub	sp, #12
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d122      	bne.n	8008f86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d11b      	bne.n	8008f86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f06f 0202 	mvn.w	r2, #2
 8008f56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f905 	bl	800917c <HAL_TIM_IC_CaptureCallback>
 8008f72:	e005      	b.n	8008f80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f8f7 	bl	8009168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f908 	bl	8009190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d122      	bne.n	8008fda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d11b      	bne.n	8008fda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f06f 0204 	mvn.w	r2, #4
 8008faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f8db 	bl	800917c <HAL_TIM_IC_CaptureCallback>
 8008fc6:	e005      	b.n	8008fd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f8cd 	bl	8009168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f8de 	bl	8009190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f003 0308 	and.w	r3, r3, #8
 8008fe4:	2b08      	cmp	r3, #8
 8008fe6:	d122      	bne.n	800902e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f003 0308 	and.w	r3, r3, #8
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	d11b      	bne.n	800902e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f06f 0208 	mvn.w	r2, #8
 8008ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2204      	movs	r2, #4
 8009004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f003 0303 	and.w	r3, r3, #3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f8b1 	bl	800917c <HAL_TIM_IC_CaptureCallback>
 800901a:	e005      	b.n	8009028 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f8a3 	bl	8009168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f8b4 	bl	8009190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	f003 0310 	and.w	r3, r3, #16
 8009038:	2b10      	cmp	r3, #16
 800903a:	d122      	bne.n	8009082 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f003 0310 	and.w	r3, r3, #16
 8009046:	2b10      	cmp	r3, #16
 8009048:	d11b      	bne.n	8009082 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f06f 0210 	mvn.w	r2, #16
 8009052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2208      	movs	r2, #8
 8009058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f887 	bl	800917c <HAL_TIM_IC_CaptureCallback>
 800906e:	e005      	b.n	800907c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f879 	bl	8009168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f88a 	bl	8009190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b01      	cmp	r3, #1
 800908e:	d10e      	bne.n	80090ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b01      	cmp	r3, #1
 800909c:	d107      	bne.n	80090ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f06f 0201 	mvn.w	r2, #1
 80090a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f9b3 	bl	8009414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b8:	2b80      	cmp	r3, #128	@ 0x80
 80090ba:	d10e      	bne.n	80090da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090c6:	2b80      	cmp	r3, #128	@ 0x80
 80090c8:	d107      	bne.n	80090da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80090d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f913 	bl	8009300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090e8:	d10e      	bne.n	8009108 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f4:	2b80      	cmp	r3, #128	@ 0x80
 80090f6:	d107      	bne.n	8009108 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f906 	bl	8009314 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009112:	2b40      	cmp	r3, #64	@ 0x40
 8009114:	d10e      	bne.n	8009134 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009120:	2b40      	cmp	r3, #64	@ 0x40
 8009122:	d107      	bne.n	8009134 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800912c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f838 	bl	80091a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	f003 0320 	and.w	r3, r3, #32
 800913e:	2b20      	cmp	r3, #32
 8009140:	d10e      	bne.n	8009160 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	f003 0320 	and.w	r3, r3, #32
 800914c:	2b20      	cmp	r3, #32
 800914e:	d107      	bne.n	8009160 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0220 	mvn.w	r2, #32
 8009158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f8c6 	bl	80092ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a40      	ldr	r2, [pc, #256]	@ (80092cc <TIM_Base_SetConfig+0x114>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d013      	beq.n	80091f8 <TIM_Base_SetConfig+0x40>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d6:	d00f      	beq.n	80091f8 <TIM_Base_SetConfig+0x40>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a3d      	ldr	r2, [pc, #244]	@ (80092d0 <TIM_Base_SetConfig+0x118>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d00b      	beq.n	80091f8 <TIM_Base_SetConfig+0x40>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a3c      	ldr	r2, [pc, #240]	@ (80092d4 <TIM_Base_SetConfig+0x11c>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d007      	beq.n	80091f8 <TIM_Base_SetConfig+0x40>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a3b      	ldr	r2, [pc, #236]	@ (80092d8 <TIM_Base_SetConfig+0x120>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d003      	beq.n	80091f8 <TIM_Base_SetConfig+0x40>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a3a      	ldr	r2, [pc, #232]	@ (80092dc <TIM_Base_SetConfig+0x124>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d108      	bne.n	800920a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	4313      	orrs	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a2f      	ldr	r2, [pc, #188]	@ (80092cc <TIM_Base_SetConfig+0x114>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d01f      	beq.n	8009252 <TIM_Base_SetConfig+0x9a>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009218:	d01b      	beq.n	8009252 <TIM_Base_SetConfig+0x9a>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a2c      	ldr	r2, [pc, #176]	@ (80092d0 <TIM_Base_SetConfig+0x118>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d017      	beq.n	8009252 <TIM_Base_SetConfig+0x9a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a2b      	ldr	r2, [pc, #172]	@ (80092d4 <TIM_Base_SetConfig+0x11c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d013      	beq.n	8009252 <TIM_Base_SetConfig+0x9a>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a2a      	ldr	r2, [pc, #168]	@ (80092d8 <TIM_Base_SetConfig+0x120>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d00f      	beq.n	8009252 <TIM_Base_SetConfig+0x9a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a29      	ldr	r2, [pc, #164]	@ (80092dc <TIM_Base_SetConfig+0x124>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d00b      	beq.n	8009252 <TIM_Base_SetConfig+0x9a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a28      	ldr	r2, [pc, #160]	@ (80092e0 <TIM_Base_SetConfig+0x128>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d007      	beq.n	8009252 <TIM_Base_SetConfig+0x9a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a27      	ldr	r2, [pc, #156]	@ (80092e4 <TIM_Base_SetConfig+0x12c>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d003      	beq.n	8009252 <TIM_Base_SetConfig+0x9a>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a26      	ldr	r2, [pc, #152]	@ (80092e8 <TIM_Base_SetConfig+0x130>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d108      	bne.n	8009264 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	4313      	orrs	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a10      	ldr	r2, [pc, #64]	@ (80092cc <TIM_Base_SetConfig+0x114>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d00f      	beq.n	80092b0 <TIM_Base_SetConfig+0xf8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a12      	ldr	r2, [pc, #72]	@ (80092dc <TIM_Base_SetConfig+0x124>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d00b      	beq.n	80092b0 <TIM_Base_SetConfig+0xf8>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a11      	ldr	r2, [pc, #68]	@ (80092e0 <TIM_Base_SetConfig+0x128>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d007      	beq.n	80092b0 <TIM_Base_SetConfig+0xf8>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a10      	ldr	r2, [pc, #64]	@ (80092e4 <TIM_Base_SetConfig+0x12c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d003      	beq.n	80092b0 <TIM_Base_SetConfig+0xf8>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a0f      	ldr	r2, [pc, #60]	@ (80092e8 <TIM_Base_SetConfig+0x130>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d103      	bne.n	80092b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	615a      	str	r2, [r3, #20]
}
 80092be:	bf00      	nop
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	40010000 	.word	0x40010000
 80092d0:	40000400 	.word	0x40000400
 80092d4:	40000800 	.word	0x40000800
 80092d8:	40000c00 	.word	0x40000c00
 80092dc:	40010400 	.word	0x40010400
 80092e0:	40014000 	.word	0x40014000
 80092e4:	40014400 	.word	0x40014400
 80092e8:	40014800 	.word	0x40014800

080092ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b090      	sub	sp, #64	@ 0x40
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009330:	4b33      	ldr	r3, [pc, #204]	@ (8009400 <HAL_InitTick+0xd8>)
 8009332:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009336:	4a32      	ldr	r2, [pc, #200]	@ (8009400 <HAL_InitTick+0xd8>)
 8009338:	f043 0310 	orr.w	r3, r3, #16
 800933c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009340:	4b2f      	ldr	r3, [pc, #188]	@ (8009400 <HAL_InitTick+0xd8>)
 8009342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009346:	f003 0310 	and.w	r3, r3, #16
 800934a:	60bb      	str	r3, [r7, #8]
 800934c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800934e:	f107 020c 	add.w	r2, r7, #12
 8009352:	f107 0310 	add.w	r3, r7, #16
 8009356:	4611      	mov	r1, r2
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd fff3 	bl	8007344 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800935e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009360:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8009362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009364:	2b00      	cmp	r3, #0
 8009366:	d103      	bne.n	8009370 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8009368:	f7fd ffc0 	bl	80072ec <HAL_RCC_GetPCLK1Freq>
 800936c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800936e:	e004      	b.n	800937a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8009370:	f7fd ffbc 	bl	80072ec <HAL_RCC_GetPCLK1Freq>
 8009374:	4603      	mov	r3, r0
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800937a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800937c:	4a21      	ldr	r2, [pc, #132]	@ (8009404 <HAL_InitTick+0xdc>)
 800937e:	fba2 2303 	umull	r2, r3, r2, r3
 8009382:	0c9b      	lsrs	r3, r3, #18
 8009384:	3b01      	subs	r3, #1
 8009386:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8009388:	4b1f      	ldr	r3, [pc, #124]	@ (8009408 <HAL_InitTick+0xe0>)
 800938a:	4a20      	ldr	r2, [pc, #128]	@ (800940c <HAL_InitTick+0xe4>)
 800938c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800938e:	4b1e      	ldr	r3, [pc, #120]	@ (8009408 <HAL_InitTick+0xe0>)
 8009390:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009394:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8009396:	4a1c      	ldr	r2, [pc, #112]	@ (8009408 <HAL_InitTick+0xe0>)
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0U;
 800939c:	4b1a      	ldr	r3, [pc, #104]	@ (8009408 <HAL_InitTick+0xe0>)
 800939e:	2200      	movs	r2, #0
 80093a0:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093a2:	4b19      	ldr	r3, [pc, #100]	@ (8009408 <HAL_InitTick+0xe0>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&TimHandle);
 80093a8:	4817      	ldr	r0, [pc, #92]	@ (8009408 <HAL_InitTick+0xe0>)
 80093aa:	f7ff fc1e 	bl	8008bea <HAL_TIM_Base_Init>
 80093ae:	4603      	mov	r3, r0
 80093b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (status == HAL_OK)
 80093b4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d11b      	bne.n	80093f4 <HAL_InitTick+0xcc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&TimHandle);
 80093bc:	4812      	ldr	r0, [pc, #72]	@ (8009408 <HAL_InitTick+0xe0>)
 80093be:	f7ff fc75 	bl	8008cac <HAL_TIM_Base_Start_IT>
 80093c2:	4603      	mov	r3, r0
 80093c4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (status == HAL_OK)
 80093c8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d111      	bne.n	80093f4 <HAL_InitTick+0xcc>
    {
	  /* Enable the TIM6 global Interrupt */
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80093d0:	2036      	movs	r0, #54	@ 0x36
 80093d2:	f7fa ff55 	bl	8004280 <HAL_NVIC_EnableIRQ>
   
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b0f      	cmp	r3, #15
 80093da:	d808      	bhi.n	80093ee <HAL_InitTick+0xc6>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 80093dc:	2200      	movs	r2, #0
 80093de:	6879      	ldr	r1, [r7, #4]
 80093e0:	2036      	movs	r0, #54	@ 0x36
 80093e2:	f7fa ff33 	bl	800424c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80093e6:	4a0a      	ldr	r2, [pc, #40]	@ (8009410 <HAL_InitTick+0xe8>)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	e002      	b.n	80093f4 <HAL_InitTick+0xcc>
      }
      else
      {
        status = HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }
   }
}

  /* Return function status */
  return status;
 80093f4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3740      	adds	r7, #64	@ 0x40
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	58024400 	.word	0x58024400
 8009404:	431bde83 	.word	0x431bde83
 8009408:	24001780 	.word	0x24001780
 800940c:	40001000 	.word	0x40001000
 8009410:	24000050 	.word	0x24000050

08009414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800941c:	f7fa fdfe 	bl	800401c <HAL_IncTick>
}
 8009420:	bf00      	nop
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800942c:	4802      	ldr	r0, [pc, #8]	@ (8009438 <TIM6_DAC_IRQHandler+0x10>)
 800942e:	f7ff fd7c 	bl	8008f2a <HAL_TIM_IRQHandler>
}
 8009432:	bf00      	nop
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	24001780 	.word	0x24001780

0800943c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d121      	bne.n	8009492 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	4b27      	ldr	r3, [pc, #156]	@ (80094f0 <FMC_SDRAM_Init+0xb4>)
 8009454:	4013      	ands	r3, r2
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	6851      	ldr	r1, [r2, #4]
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	6892      	ldr	r2, [r2, #8]
 800945e:	4311      	orrs	r1, r2
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	68d2      	ldr	r2, [r2, #12]
 8009464:	4311      	orrs	r1, r2
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	6912      	ldr	r2, [r2, #16]
 800946a:	4311      	orrs	r1, r2
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	6952      	ldr	r2, [r2, #20]
 8009470:	4311      	orrs	r1, r2
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	6992      	ldr	r2, [r2, #24]
 8009476:	4311      	orrs	r1, r2
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	69d2      	ldr	r2, [r2, #28]
 800947c:	4311      	orrs	r1, r2
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	6a12      	ldr	r2, [r2, #32]
 8009482:	4311      	orrs	r1, r2
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009488:	430a      	orrs	r2, r1
 800948a:	431a      	orrs	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	e026      	b.n	80094e0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	69d9      	ldr	r1, [r3, #28]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	4319      	orrs	r1, r3
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a8:	430b      	orrs	r3, r1
 80094aa:	431a      	orrs	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	4b0e      	ldr	r3, [pc, #56]	@ (80094f0 <FMC_SDRAM_Init+0xb4>)
 80094b6:	4013      	ands	r3, r2
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	6851      	ldr	r1, [r2, #4]
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	6892      	ldr	r2, [r2, #8]
 80094c0:	4311      	orrs	r1, r2
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	68d2      	ldr	r2, [r2, #12]
 80094c6:	4311      	orrs	r1, r2
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	6912      	ldr	r2, [r2, #16]
 80094cc:	4311      	orrs	r1, r2
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	6952      	ldr	r2, [r2, #20]
 80094d2:	4311      	orrs	r1, r2
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	6992      	ldr	r2, [r2, #24]
 80094d8:	430a      	orrs	r2, r1
 80094da:	431a      	orrs	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	ffff8000 	.word	0xffff8000

080094f4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d128      	bne.n	8009558 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	1e59      	subs	r1, r3, #1
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	3b01      	subs	r3, #1
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	4319      	orrs	r1, r3
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	3b01      	subs	r3, #1
 8009524:	021b      	lsls	r3, r3, #8
 8009526:	4319      	orrs	r1, r3
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	3b01      	subs	r3, #1
 800952e:	031b      	lsls	r3, r3, #12
 8009530:	4319      	orrs	r1, r3
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	3b01      	subs	r3, #1
 8009538:	041b      	lsls	r3, r3, #16
 800953a:	4319      	orrs	r1, r3
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	3b01      	subs	r3, #1
 8009542:	051b      	lsls	r3, r3, #20
 8009544:	4319      	orrs	r1, r3
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	3b01      	subs	r3, #1
 800954c:	061b      	lsls	r3, r3, #24
 800954e:	430b      	orrs	r3, r1
 8009550:	431a      	orrs	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	609a      	str	r2, [r3, #8]
 8009556:	e02d      	b.n	80095b4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	4b19      	ldr	r3, [pc, #100]	@ (80095c4 <FMC_SDRAM_Timing_Init+0xd0>)
 800955e:	4013      	ands	r3, r2
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	68d2      	ldr	r2, [r2, #12]
 8009564:	3a01      	subs	r2, #1
 8009566:	0311      	lsls	r1, r2, #12
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	6952      	ldr	r2, [r2, #20]
 800956c:	3a01      	subs	r2, #1
 800956e:	0512      	lsls	r2, r2, #20
 8009570:	430a      	orrs	r2, r1
 8009572:	431a      	orrs	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	1e59      	subs	r1, r3, #1
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	3b01      	subs	r3, #1
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	4319      	orrs	r1, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	3b01      	subs	r3, #1
 8009596:	021b      	lsls	r3, r3, #8
 8009598:	4319      	orrs	r1, r3
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	3b01      	subs	r3, #1
 80095a0:	041b      	lsls	r3, r3, #16
 80095a2:	4319      	orrs	r1, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	3b01      	subs	r3, #1
 80095aa:	061b      	lsls	r3, r3, #24
 80095ac:	430b      	orrs	r3, r1
 80095ae:	431a      	orrs	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	ff0f0fff 	.word	0xff0f0fff

080095c8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	4b0c      	ldr	r3, [pc, #48]	@ (800960c <FMC_SDRAM_SendCommand+0x44>)
 80095da:	4013      	ands	r3, r2
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	6811      	ldr	r1, [r2, #0]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	6852      	ldr	r2, [r2, #4]
 80095e4:	4311      	orrs	r1, r2
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	6892      	ldr	r2, [r2, #8]
 80095ea:	3a01      	subs	r2, #1
 80095ec:	0152      	lsls	r2, r2, #5
 80095ee:	4311      	orrs	r1, r2
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	68d2      	ldr	r2, [r2, #12]
 80095f4:	0252      	lsls	r2, r2, #9
 80095f6:	430a      	orrs	r2, r1
 80095f8:	431a      	orrs	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	ffc00000 	.word	0xffc00000

08009610 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	695a      	ldr	r2, [r3, #20]
 800961e:	4b07      	ldr	r3, [pc, #28]	@ (800963c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009620:	4013      	ands	r3, r2
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	0052      	lsls	r2, r2, #1
 8009626:	431a      	orrs	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	ffffc001 	.word	0xffffc001

08009640 <__libc_init_array>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	4d0d      	ldr	r5, [pc, #52]	@ (8009678 <__libc_init_array+0x38>)
 8009644:	4c0d      	ldr	r4, [pc, #52]	@ (800967c <__libc_init_array+0x3c>)
 8009646:	1b64      	subs	r4, r4, r5
 8009648:	10a4      	asrs	r4, r4, #2
 800964a:	2600      	movs	r6, #0
 800964c:	42a6      	cmp	r6, r4
 800964e:	d109      	bne.n	8009664 <__libc_init_array+0x24>
 8009650:	4d0b      	ldr	r5, [pc, #44]	@ (8009680 <__libc_init_array+0x40>)
 8009652:	4c0c      	ldr	r4, [pc, #48]	@ (8009684 <__libc_init_array+0x44>)
 8009654:	f000 f818 	bl	8009688 <_init>
 8009658:	1b64      	subs	r4, r4, r5
 800965a:	10a4      	asrs	r4, r4, #2
 800965c:	2600      	movs	r6, #0
 800965e:	42a6      	cmp	r6, r4
 8009660:	d105      	bne.n	800966e <__libc_init_array+0x2e>
 8009662:	bd70      	pop	{r4, r5, r6, pc}
 8009664:	f855 3b04 	ldr.w	r3, [r5], #4
 8009668:	4798      	blx	r3
 800966a:	3601      	adds	r6, #1
 800966c:	e7ee      	b.n	800964c <__libc_init_array+0xc>
 800966e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009672:	4798      	blx	r3
 8009674:	3601      	adds	r6, #1
 8009676:	e7f2      	b.n	800965e <__libc_init_array+0x1e>
 8009678:	08009c10 	.word	0x08009c10
 800967c:	08009c10 	.word	0x08009c10
 8009680:	08009c10 	.word	0x08009c10
 8009684:	08009c14 	.word	0x08009c14

08009688 <_init>:
 8009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968a:	bf00      	nop
 800968c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968e:	bc08      	pop	{r3}
 8009690:	469e      	mov	lr, r3
 8009692:	4770      	bx	lr

08009694 <_fini>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	bf00      	nop
 8009698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969a:	bc08      	pop	{r3}
 800969c:	469e      	mov	lr, r3
 800969e:	4770      	bx	lr
